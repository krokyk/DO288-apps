apiVersion: v1
items:
- apiVersion: template.openshift.io/v1
  kind: Template
  metadata:
    annotations:
      description: 3scale's APIcast is an NGINX based API gateway used to integrate your internal and external API services with 3scale's API Management Platform. It supports OpenID connect to integrate with external Identity Providers such as Red Hat Single Sign On, for API traffic authentication
      iconClass: icon-3scale
      openshift.io/display-name: 3scale APIcast API Gateway
      openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_3scale/2.saas/html/deployment_options/apicast-openshift
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: api,gateway,3scale
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: 3scale-gateway
    namespace: openshift
    resourceVersion: "15151"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/3scale-gateway
    uid: 6c9b8755-575f-4d2c-8d4c-1b26ac5946de
  objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APICAST_NAME}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APICAST_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          annotations:
            prometheus.io/port: "9421"
            prometheus.io/scrape: "true"
          labels:
            deploymentconfig: ${APICAST_NAME}
        spec:
          containers:
          - env:
            - name: THREESCALE_PORTAL_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: password
                  name: apicast-configuration-url-secret
            - name: THREESCALE_CONFIG_FILE
              value: ${CONFIGURATION_FILE_PATH}
            - name: THREESCALE_DEPLOYMENT_ENV
              value: ${DEPLOYMENT_ENVIRONMENT}
            - name: RESOLVER
              value: ${RESOLVER}
            - name: APICAST_SERVICES_LIST
              value: ${SERVICES_LIST}
            - name: APICAST_CONFIGURATION_LOADER
              value: ${CONFIGURATION_LOADER}
            - name: APICAST_LOG_LEVEL
              value: ${LOG_LEVEL}
            - name: APICAST_PATH_ROUTING
              value: ${PATH_ROUTING}
            - name: APICAST_RESPONSE_CODES
              value: ${RESPONSE_CODES}
            - name: APICAST_CONFIGURATION_CACHE
              value: ${CONFIGURATION_CACHE}
            - name: REDIS_URL
              value: ${REDIS_URL}
            - name: APICAST_MANAGEMENT_API
              value: ${MANAGEMENT_API}
            - name: OPENSSL_VERIFY
              value: ${OPENSSL_VERIFY}
            image: ${AMP_APICAST_IMAGE}
            imagePullPolicy: IfNotPresent
            livenessProbe:
              httpGet:
                path: /status/live
                port: management
              initialDelaySeconds: 10
              timeoutSeconds: 1
            name: ${APICAST_NAME}
            ports:
            - containerPort: 8080
              name: proxy
              protocol: TCP
            - containerPort: 8090
              name: management
              protocol: TCP
            - containerPort: 9421
              name: metrics
              protocol: TCP
            readinessProbe:
              httpGet:
                path: /status/ready
                port: management
              initialDelaySeconds: 15
              timeoutSeconds: 1
            resources:
              limits:
                cpu: "1"
                memory: 128Mi
              requests:
                cpu: 500m
                memory: 64Mi
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APICAST_NAME}
          from:
            kind: ImageStreamTag
            name: apicast-gateway:latest
            namespace: openshift
        type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APICAST_NAME}
    spec:
      ports:
      - name: proxy
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: management
        port: 8090
        protocol: TCP
        targetPort: 8090
      selector:
        deploymentconfig: ${APICAST_NAME}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: apicast-configuration-url-secret
    stringData:
      password: https://${ACCESS_TOKEN}@${DOMAIN}-admin.3scale.net
    type: Opaque
  parameters:
  - description: AMP release tag.
    name: AMP_RELEASE
    required: true
    value: 2.9.0
  - description: Access Token (not a Service Token) for the 3scale Account Management API
    name: ACCESS_TOKEN
    required: true
  - description: 'The domain found on the URL of your 3scale Admin Portal: https://<domain>-admin.3scale.net'
    name: DOMAIN
    required: true
  - name: AMP_APICAST_IMAGE
    required: true
    value: amp-apicast:latest
  - description: Path to saved JSON file with configuration for the gateway. Has to be injected to the container image as read only volume.
    name: CONFIGURATION_FILE_PATH
  - description: Deployment environment. Can be staging or production.
    name: DEPLOYMENT_ENVIRONMENT
    required: true
    value: production
  - description: Name for the 3scale API Gateway
    name: APICAST_NAME
    required: true
    value: apicast
  - description: DNS Resolver for openresty, if empty it will be autodiscovered
    name: RESOLVER
  - description: Subset of services to run. Use comma separated list of service ids (eg. 42,1337)
    name: SERVICES_LIST
  - description: 'When to load configuration. If on gateway start or incoming request. Allowed values are: lazy, boot.'
    name: CONFIGURATION_LOADER
    value: boot
  - description: 'Log level. One of the following: debug, info, notice, warn, error, crit, alert, or emerg.'
    name: LOG_LEVEL
  - description: Enable path routing. Experimental feature.
    name: PATH_ROUTING
    value: "false"
  - description: Enable logging response codes to 3scale.
    name: RESPONSE_CODES
    value: "false"
  - description: For how long to cache the downloaded configuration in seconds. Can be left empty, 0 or greater than 60.
    name: CONFIGURATION_CACHE
  - description: 'Redis URL. Required for OAuth2 integration. ex: redis://PASSWORD@127.0.0.1:6379/0'
    name: REDIS_URL
  - description: Scope of the Management API. Can be disabled, status or debug. At least status required for health checks.
    name: MANAGEMENT_API
    value: status
  - description: Turn on/off the OpenSSL peer verification. Can be set to true/false.
    name: OPENSSL_VERIFY
    required: true
    value: "false"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: amq63-basic
    xpaas: 1.4.17
  message: A new messaging service has been created in your project. It will handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the service is ${MQ_USERNAME}/${MQ_PASSWORD}.
  metadata:
    annotations:
      description: Application template for JBoss A-MQ brokers. These can be deployed as standalone or in a mesh. This template doesn't feature SSL support.
      iconClass: icon-amq
      openshift.io/display-name: Red Hat JBoss A-MQ 6.3 (Ephemeral, no SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: messaging,amq,jboss
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: amq63-basic
    namespace: openshift
    resourceVersion: "15124"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/amq63-basic
    uid: 0b06a317-aec8-4dc2-b1a3-5fd11c324b7e
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-amqp
    spec:
      ports:
      - port: 5672
        targetPort: 5672
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mqtt
    spec:
      ports:
      - port: 1883
        targetPort: 1883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-stomp
    spec:
      ports:
      - port: 61613
        targetPort: 61613
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        rollingParams:
          maxSurge: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_QUEUES
              value: ${MQ_QUEUES}
            - name: AMQ_TOPICS
              value: ${MQ_TOPICS}
            - name: MQ_SERIALIZABLE_PACKAGES
              value: ${MQ_SERIALIZABLE_PACKAGES}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            - name: AMQ_QUEUE_MEMORY_LIMIT
              value: ${AMQ_QUEUE_MEMORY_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: broker
  - description: 'Protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. If left empty, queues will be still created dynamically.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. If left empty, topics will be still created dynamically.
    displayName: Topics
    name: MQ_TOPICS
  - description: List of packages that are allowed to be serialized for use in ObjectMessage, separated by commas. If your app doesn't use ObjectMessages, leave this blank. This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
    displayName: A-MQ Serializable Packages
    name: MQ_SERIALIZABLE_PACKAGES
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: Sets the store disk limit usage in activemq.xml. If the value set is greater than the disk size, it will be resized to the available disk space.
    displayName: A-MQ Store Usage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: The queue memory limit (default is 1mb)
    displayName: Queue Memory Limit
    name: AMQ_QUEUE_MEMORY_LIMIT
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: amq63-persistent
    xpaas: 1.4.17
  message: A new persistent messaging service has been created in your project. It will handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the service is ${MQ_USERNAME}/${MQ_PASSWORD}.
  metadata:
    annotations:
      description: An example JBoss A-MQ application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-amq
      openshift.io/display-name: JBoss A-MQ 6.3 (no SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: messaging,amq,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-amq/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss A-MQ 6.3 based application, including a deployment configuration and using persistence.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: amq63-persistent
    namespace: openshift
    resourceVersion: "15118"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/amq63-persistent
    uid: 8dfc77a7-14c1-4f2d-9f52-db026b8ef2db
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-amqp
    spec:
      ports:
      - port: 5672
        targetPort: 5672
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mqtt
    spec:
      ports:
      - port: 1883
        targetPort: 1883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-stomp
    spec:
      ports:
      - port: 61613
        targetPort: 61613
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        rollingParams:
          maxSurge: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_QUEUES
              value: ${MQ_QUEUES}
            - name: AMQ_TOPICS
              value: ${MQ_TOPICS}
            - name: MQ_SERIALIZABLE_PACKAGES
              value: ${MQ_SERIALIZABLE_PACKAGES}
            - name: AMQ_SPLIT
              value: ${AMQ_SPLIT}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            - name: AMQ_QUEUE_MEMORY_LIMIT
              value: ${AMQ_QUEUE_MEMORY_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-drainer
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-drainer
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-drainer
          name: ${APPLICATION_NAME}-drainer
        spec:
          containers:
          - command:
            - /opt/amq/bin/drain.sh
            env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-drainer
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-drainer
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: broker
  - description: Split the data directory for each node in a mesh, this is now the default behaviour.
    displayName: Split Data?
    name: AMQ_SPLIT
    value: "true"
  - description: 'Protocols to configure, separated by commas.  Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas.  These queues will be automatically created when the broker starts.  If left empty, queues will be still created dynamically.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas.  These topics will be automatically created when the broker starts.  If left empty, topics will be still created dynamically.
    displayName: Topics
    name: MQ_TOPICS
  - description: List of packages that are allowed to be serialized for use in ObjectMessage, separated by commas. If your app doesn't use ObjectMessages, leave this blank. This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
    displayName: A-MQ Serializable Packages
    name: MQ_SERIALIZABLE_PACKAGES
  - description: Size of the volume used by A-MQ for persisting messages.
    displayName: A-MQ Volume Size
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: User name for standard broker user.  It is required for connecting to the broker.  If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user.  It is required for connecting to the broker.  If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: Sets the store disk limit usage in activemq.xml. If the value set is greater than the disk size, it will be resized to the available disk space.
    displayName: A-MQ Store Usage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: The queue memory limit (default is 1mb)
    displayName: Queue Memory Limit
    name: AMQ_QUEUE_MEMORY_LIMIT
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: amq63-persistent-ssl
    xpaas: 1.4.17
  message: A new persistent messaging service with SSL support has been created in your project. It will handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the service is ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create a secret named "${AMQ_SECRET}" containing the trust store and key store files ("${AMQ_TRUSTSTORE}" and "${AMQ_KEYSTORE}") used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss A-MQ application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-amq
      openshift.io/display-name: JBoss A-MQ 6.3 (with SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: messaging,amq,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-amq/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss A-MQ 6.3 based application, including a deployment configuration, using persistence and secure communication using SSL.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: amq63-persistent-ssl
    namespace: openshift
    resourceVersion: "15112"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/amq63-persistent-ssl
    uid: 93e791c1-3ced-4047-88ed-63e17b84c947
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-amqp
    spec:
      ports:
      - port: 5672
        targetPort: 5672
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP SSL port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-amqp-ssl
    spec:
      ports:
      - port: 5671
        targetPort: 5671
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mqtt
    spec:
      ports:
      - port: 1883
        targetPort: 1883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT SSL port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mqtt-ssl
    spec:
      ports:
      - port: 8883
        targetPort: 8883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-stomp
    spec:
      ports:
      - port: 61613
        targetPort: 61613
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP SSL port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-stomp-ssl
    spec:
      ports:
      - port: 61612
        targetPort: 61612
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire (SSL) port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp-ssl", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp-ssl
    spec:
      ports:
      - port: 61617
        targetPort: 61617
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        rollingParams:
          maxSurge: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_QUEUES
              value: ${MQ_QUEUES}
            - name: AMQ_TOPICS
              value: ${MQ_TOPICS}
            - name: MQ_SERIALIZABLE_PACKAGES
              value: ${MQ_SERIALIZABLE_PACKAGES}
            - name: AMQ_SPLIT
              value: ${AMQ_SPLIT}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
              value: /etc/amq-secret-volume
            - name: AMQ_TRUSTSTORE
              value: ${AMQ_TRUSTSTORE}
            - name: AMQ_TRUSTSTORE_PASSWORD
              value: ${AMQ_TRUSTSTORE_PASSWORD}
            - name: AMQ_KEYSTORE
              value: ${AMQ_KEYSTORE}
            - name: AMQ_KEYSTORE_PASSWORD
              value: ${AMQ_KEYSTORE_PASSWORD}
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            - name: AMQ_QUEUE_MEMORY_LIMIT
              value: ${AMQ_QUEUE_MEMORY_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 8883
              name: mqtt-ssl
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /etc/amq-secret-volume
              name: broker-secret-volume
              readOnly: true
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: broker-secret-volume
            secret:
              secretName: ${AMQ_SECRET}
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-drainer
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-drainer
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-drainer
          name: ${APPLICATION_NAME}-drainer
        spec:
          containers:
          - command:
            - /opt/amq/bin/drain.sh
            env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-drainer
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-drainer
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: broker
  - description: Split the data directory for each node in a mesh, this is now the default behaviour.
    displayName: Split Data?
    name: AMQ_SPLIT
    value: "true"
  - description: 'Protocols to configure, separated by commas.  Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas.  These queues will be automatically created when the broker starts.  If left empty, queues will be still created dynamically.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas.  These topics will be automatically created when the broker starts.  If left empty, topics will be still created dynamically.
    displayName: Topics
    name: MQ_TOPICS
  - description: List of packages that are allowed to be serialized for use in ObjectMessage, separated by commas. If your app doesn't use ObjectMessages, leave this blank. This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
    displayName: A-MQ Serializable Packages
    name: MQ_SERIALIZABLE_PACKAGES
  - description: Size of the volume used by A-MQ for persisting messages.
    displayName: A-MQ Volume Size
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: User name for standard broker user.  It is required for connecting to the broker.  If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user.  It is required for connecting to the broker.  If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: Name of a secret containing SSL related files
    displayName: Secret Name
    name: AMQ_SECRET
    required: true
    value: amq-app-secret
  - description: SSL trust store filename
    displayName: Trust Store Filename
    name: AMQ_TRUSTSTORE
    required: true
    value: broker.ts
  - description: SSL trust store password
    displayName: Trust Store Password
    name: AMQ_TRUSTSTORE_PASSWORD
    required: true
  - description: SSL key store filename
    displayName: A-MQ Keystore Filename
    name: AMQ_KEYSTORE
    required: true
    value: broker.ks
  - description: Password for accessing SSL keystore
    displayName: A-MQ Keystore Password
    name: AMQ_KEYSTORE_PASSWORD
    required: true
  - description: Sets the store disk limit usage in activemq.xml. If the value set is greater than the disk size, it will be resized to the available disk space.
    displayName: A-MQ Store Usage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: The queue memory limit (default is 1mb)
    displayName: Queue Memory Limit
    name: AMQ_QUEUE_MEMORY_LIMIT
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: amq63-ssl
    xpaas: 1.4.17
  message: A new messaging service with SSL support has been created in your project. It will handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the service is ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create a secret named "${AMQ_SECRET}" containing the trust store and key store files ("${AMQ_TRUSTSTORE}" and "${AMQ_KEYSTORE}") used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss A-MQ application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-amq
      openshift.io/display-name: JBoss A-MQ 6.3 (Ephemeral with SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: messaging,amq,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-amq/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss A-MQ 6.2 based application, including a deployment configuration, using ephemeral (temporary) storage and secure communication using SSL. These can be deployed as standalone or in a mesh.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: amq63-ssl
    namespace: openshift
    resourceVersion: "15175"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/amq63-ssl
    uid: baa76aa1-3ac3-4122-92f3-79a44f7fbf3b
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-amqp
    spec:
      ports:
      - port: 5672
        targetPort: 5672
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP SSL port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-amqp-ssl
    spec:
      ports:
      - port: 5671
        targetPort: 5671
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mqtt
    spec:
      ports:
      - port: 1883
        targetPort: 1883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT SSL port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mqtt-ssl
    spec:
      ports:
      - port: 8883
        targetPort: 8883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-stomp
    spec:
      ports:
      - port: 61613
        targetPort: 61613
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP SSL port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-stomp-ssl
    spec:
      ports:
      - port: 61612
        targetPort: 61612
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire (SSL) port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp-ssl", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp-ssl
    spec:
      ports:
      - port: 61617
        targetPort: 61617
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        rollingParams:
          maxSurge: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_QUEUES
              value: ${MQ_QUEUES}
            - name: AMQ_TOPICS
              value: ${MQ_TOPICS}
            - name: MQ_SERIALIZABLE_PACKAGES
              value: ${MQ_SERIALIZABLE_PACKAGES}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
              value: /etc/amq-secret-volume
            - name: AMQ_TRUSTSTORE
              value: ${AMQ_TRUSTSTORE}
            - name: AMQ_TRUSTSTORE_PASSWORD
              value: ${AMQ_TRUSTSTORE_PASSWORD}
            - name: AMQ_KEYSTORE
              value: ${AMQ_KEYSTORE}
            - name: AMQ_KEYSTORE_PASSWORD
              value: ${AMQ_KEYSTORE_PASSWORD}
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            - name: AMQ_QUEUE_MEMORY_LIMIT
              value: ${AMQ_QUEUE_MEMORY_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 8883
              name: mqtt-ssl
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /etc/amq-secret-volume
              name: broker-secret-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: broker-secret-volume
            secret:
              secretName: ${AMQ_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: broker
  - description: 'Protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. SSL variants of these protocols will be configured automaticaly.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. If left empty, queues will be still created dynamically.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. If left empty, topics will be still created dynamically.
    displayName: Topics
    name: MQ_TOPICS
  - description: List of packages that are allowed to be serialized for use in ObjectMessage, separated by commas. If your app doesn't use ObjectMessages, leave this blank. This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
    displayName: A-MQ Serializable Packages
    name: MQ_SERIALIZABLE_PACKAGES
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: Name of a secret containing SSL related files
    displayName: Secret Name
    name: AMQ_SECRET
    required: true
    value: amq-app-secret
  - description: SSL trust store filename
    displayName: Trust Store Filename
    name: AMQ_TRUSTSTORE
    required: true
    value: broker.ts
  - description: SSL trust store password
    displayName: Trust Store Password
    name: AMQ_TRUSTSTORE_PASSWORD
    required: true
  - description: SSL key store filename
    displayName: A-MQ Keystore Filename
    name: AMQ_KEYSTORE
    required: true
    value: broker.ks
  - description: Password for accessing SSL keystore
    displayName: A-MQ Keystore Password
    name: AMQ_KEYSTORE_PASSWORD
    required: true
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: Sets the store disk limit usage in activemq.xml. If the value set is greater than the disk size, it will be resized to the available disk space.
    displayName: A-MQ Store Usage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: The queue memory limit (default is 1mb)
    displayName: Queue Memory Limit
    name: AMQ_QUEUE_MEMORY_LIMIT
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
- apiVersion: template.openshift.io/v1
  kind: Template
  message: Apicurito is now deployed to https://${ROUTE_HOSTNAME}.
  metadata:
    annotations:
      description: Design beautiful, functional APIs with zero coding, using a visual designer for OpenAPI documents.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse Apicurito
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: fuse,apicurio,openapi,swagger,api
      version: "1.7"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      app: apicurito
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:app: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: apicurito
    namespace: openshift
    resourceVersion: "15194"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/apicurito
    uid: 11a6db0f-d2ab-4a77-817c-6b46f8ce9bc1
  objects:
  - apiVersion: v1
    data:
      config.js: |
        var ApicuritoConfig = {
            "generators": [
                {
                    "name":"Fuse Camel Project",
                    "url":"/api/v1/generate/camel-project.zip"
                }
            ]
        }
    kind: ConfigMap
    metadata:
      labels:
        app: apicurito
      name: apicurito-ui-config
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: apicurito
        component: apicurito-ui
      name: apicurito-ui
    spec:
      replicas: 1
      selector:
        app: apicurito
        component: apicurito-ui
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: apicurito
            component: apicurito-ui
        spec:
          containers:
          - imagePullPolicy: IfNotPresent
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 30
            name: apicurito-ui
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 1
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
            volumeMounts:
            - mountPath: /html/config
              name: config-volume
          volumes:
          - configMap:
              name: apicurito-ui-config
            name: config-volume
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - apicurito-ui
          from:
            kind: ImageStreamTag
            name: apicurito-ui:${APP_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: apicurito
      name: apicurito-ui
    spec:
      ports:
      - port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        app: apicurito
        component: apicurito-ui
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      annotations:
        console.alpha.openshift.io/overview-app-route: "true"
      labels:
        app: apicurito
      name: apicurito
    spec:
      host: ${ROUTE_HOSTNAME}
      tls:
        termination: edge
      to:
        kind: Service
        name: apicurito-ui
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: apicurito
        component: fuse-apicurito-generator
      name: fuse-apicurito-generator
    spec:
      replicas: 1
      selector:
        app: apicurito
        component: fuse-apicurito-generator
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: apicurito
            component: fuse-apicurito-generator
        spec:
          containers:
          - imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 8181
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: fuse-apicurito-generator
            ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 9779
              name: prometheus
              protocol: TCP
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 8181
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - fuse-apicurito-generator
          from:
            kind: ImageStreamTag
            name: fuse-apicurito-generator:${APP_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: apicurito
      name: fuse-apicurito-generator
    spec:
      ports:
      - port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        app: apicurito
        component: fuse-apicurito-generator
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: apicurito
      name: fuse-apicurito-generator
    spec:
      host: ${ROUTE_HOSTNAME}
      path: /api/v1
      tls:
        termination: edge
      to:
        kind: Service
        name: fuse-apicurito-generator
  parameters:
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    required: true
    value: "1.7"
  - description: Namespace in which the Fuse image streams are installed. These image streams are normally installed in the 'openshift' namespace. You should only need to modify this if you've installed the image streams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The external hostname to access Apicurito
    name: ROUTE_HOSTNAME
    required: true
  - description: The amount of CPU to request for each container.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for each container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 64Mi
  - description: The amount of CPU each container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory each container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: cache-service
  metadata:
    annotations:
      description: Red Hat Data Grid is an in-memory, distributed key/value store.
      iconClass: icon-datagrid
      openshift.io/display-name: Red Hat Cache Service
      openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_data_grid/7.3/html/red_hat_data_grid_for_openshift/
      openshift.io/long-description: Red Hat Data Grid Cache Service is an implementation of Data Grid for OpenShift that improves application speed and performance with minimal configuration required.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://www.redhat.com/en/services/support
      samples.operator.openshift.io/version: 4.6.52
      tags: database,datagrid
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
      template: cache-service
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
            f:template: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: cache-service
    namespace: openshift
    resourceVersion: "15193"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/cache-service
    uid: e758025c-4a27-4839-9d53-9a121cd5b777
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    stringData:
      application-password: ${APPLICATION_PASSWORD}
      application-user: ${APPLICATION_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a ping service for clustered applications.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a service for accessing the application over HTTPS or Hot Rod protocol.
        service.alpha.openshift.io/serving-cert-secret-name: service-certs
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: hotrod
        port: 11222
        targetPort: 11222
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: ${{NUMBER_OF_INSTANCES}}
      selector:
        matchLabels:
          application: ${APPLICATION_NAME}
      serviceName: ${APPLICATION_NAME}-ping
      strategy:
        rollingParams:
          intervalSeconds: 20
          maxSurge: 1
          maxUnavailable: 1
          timeoutSeconds: 1200
          updatePeriodSeconds: 20
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SERVICE_NAME
              value: ${APPLICATION_NAME}
            - name: SERVICE_PROFILE
              value: cache-service
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  key: application-user
                  name: ${APPLICATION_NAME}
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  key: application-password
                  name: ${APPLICATION_NAME}
            - name: REPLICATION_FACTOR
              value: ${REPLICATION_FACTOR}
            - name: EVICTION_POLICY
              value: ${EVICTION_POLICY}
            image: ${IMAGE}
            livenessProbe:
              exec:
                command:
                - /opt/datagrid/bin/livenessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 15
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            - containerPort: 11222
              name: hotrod
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /opt/datagrid/bin/readinessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 17
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
            resources:
              limits:
                memory: ${TOTAL_CONTAINER_MEM}Mi
              requests:
                cpu: "0.5"
                memory: ${TOTAL_CONTAINER_MEM}Mi
            volumeMounts:
            - mountPath: /opt/datagrid/standalone/data
              name: srv-data
            - mountPath: /var/run/secrets/java.io/keystores
              name: keystore-volume
            - mountPath: /var/run/secrets/openshift.io/serviceaccount
              name: service-certs
          terminationGracePeriodSeconds: 60
          volumes:
          - empty-dir: {}
            name: keystore-volume
          - name: service-certs
            secret:
              secretName: service-certs
      triggers:
      - type: ConfigChange
      volumeClaimTemplates:
      - metadata:
          name: srv-data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  parameters:
  - description: Specifies a name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: cache-service
  - description: Sets an image to bootstrap the service.
    name: IMAGE
    required: true
    value: registry.redhat.io/jboss-datagrid-7/datagrid73-openshift
  - description: Specifies how many instances of the application to create in the cluster.
    displayName: Number of Instances
    name: NUMBER_OF_INSTANCES
    required: true
    value: "1"
  - description: Specifies the number of copies for each data entry.
    displayName: Replication Factor
    name: REPLICATION_FACTOR
    required: true
    value: "1"
  - description: Defines the action to take when the cache size reaches the available memory.
    displayName: Eviction Policy
    name: EVICTION_POLICY
    required: true
    value: evict
  - description: Sets the total memory, in MiB, available to the application.
    displayName: Total Memory
    name: TOTAL_CONTAINER_MEM
    value: "512"
  - description: Specifies a username to authenticate client applications.
    displayName: Client User
    name: APPLICATION_USER
    required: true
  - description: Sets a password to authenticate client applications.
    displayName: Client Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: APPLICATION_PASSWORD
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: cakephp-mysql-example
    template: cakephp-mysql-example
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/cakephp-ex/blob/master/README.md.
  metadata:
    annotations:
      description: |-
        An example CakePHP application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/cakephp-ex/blob/master/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-php
      openshift.io/display-name: CakePHP + MySQL (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/cakephp-ex
      openshift.io/long-description: This template defines resources needed to develop a CakePHP application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,php,cakephp
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: cakephp-mysql-example
    namespace: openshift
    resourceVersion: "15142"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/cakephp-mysql-example
    uid: 090d17f7-1f10-4c1e-8720-9a445a948b76
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      cakephp-secret-token: ${CAKEPHP_SECRET_TOKEN}
      cakephp-security-salt: ${CAKEPHP_SECURITY_SALT}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: ./vendor/bin/phpunit
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: COMPOSER_MIRROR
            value: ${COMPOSER_MIRROR}
          from:
            kind: ImageStreamTag
            name: php:${PHP_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        recreateParams:
          pre:
            execNewPod:
              command:
              - ./migrate-database.sh
              containerName: cakephp-mysql-example
            failurePolicy: Retry
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: DATABASE_ENGINE
              value: ${DATABASE_ENGINE}
            - name: DATABASE_NAME
              value: ${DATABASE_NAME}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: CAKEPHP_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  key: cakephp-secret-token
                  name: ${NAME}
            - name: CAKEPHP_SECURITY_SALT
              valueFrom:
                secretKeyRef:
                  key: cakephp-security-salt
                  name: ${NAME}
            - name: OPCACHE_REVALIDATE_FREQ
              value: ${OPCACHE_REVALIDATE_FREQ}
            image: ' '
            livenessProbe:
              httpGet:
                path: /health.php
                port: 8080
              initialDelaySeconds: 30
              periodSeconds: 60
              timeoutSeconds: 3
            name: cakephp-mysql-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /health.php
                port: 8080
              initialDelaySeconds: 3
              periodSeconds: 60
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - cakephp-mysql-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mysql
        port: 3306
        targetPort: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
              value: ${MYSQL_DEFAULT_AUTHENTICATION_PLUGIN}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: mysql
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_MYSQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: data
          volumes:
          - emptyDir: {}
            name: data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mysql
          from:
            kind: ImageStreamTag
            name: mysql:8.0-el8
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: cakephp-mysql-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of PHP image to be used (7.3-ubi7, 7.3-ubi8, or latest).
    displayName: PHP Version
    name: PHP_VERSION
    required: true
    value: 7.3-ubi8
  - description: Maximum amount of memory the CakePHP container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the MySQL container can use.
    displayName: Memory Limit (MySQL)
    name: MEMORY_MYSQL_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/cakephp-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mysql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    displayName: Database Engine
    name: DATABASE_ENGINE
    required: true
    value: mysql
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: default
  - displayName: Database User
    name: DATABASE_USER
    required: true
    value: cakephp
  - displayName: Database Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - description: Set this to a long random string.
    displayName: CakePHP secret token
    from: '[\w]{50}'
    generate: expression
    name: CAKEPHP_SECRET_TOKEN
  - description: Security salt for session hash.
    displayName: CakePHP Security Salt
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: CAKEPHP_SECURITY_SALT
  - description: How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.
    displayName: OPcache Revalidation Frequency
    name: OPCACHE_REVALIDATE_FREQ
    value: "2"
  - description: The custom Composer mirror URL
    displayName: Custom Composer Mirror URL
    name: COMPOSER_MIRROR
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once PHP client supports it.'
    displayName: MySQL authentication plugin
    name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
    value: mysql_native_password
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: cakephp-mysql-persistent
    template: cakephp-mysql-persistent
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/cakephp-ex/blob/master/README.md.
  metadata:
    annotations:
      description: An example CakePHP application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/cakephp-ex/blob/master/README.md.
      iconClass: icon-php
      openshift.io/display-name: CakePHP + MySQL
      openshift.io/documentation-url: https://github.com/sclorg/cakephp-ex
      openshift.io/long-description: This template defines resources needed to develop a CakePHP application, including a build configuration, application deployment configuration, and database deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,php,cakephp
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: cakephp-mysql-persistent
    namespace: openshift
    resourceVersion: "15221"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/cakephp-mysql-persistent
    uid: 1812c320-c227-4b5d-bf7a-49c5d9e094f4
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      cakephp-secret-token: ${CAKEPHP_SECRET_TOKEN}
      cakephp-security-salt: ${CAKEPHP_SECURITY_SALT}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: ./vendor/bin/phpunit
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: COMPOSER_MIRROR
            value: ${COMPOSER_MIRROR}
          from:
            kind: ImageStreamTag
            name: php:${PHP_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        recreateParams:
          pre:
            execNewPod:
              command:
              - ./migrate-database.sh
              containerName: cakephp-mysql-persistent
            failurePolicy: Retry
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: DATABASE_ENGINE
              value: ${DATABASE_ENGINE}
            - name: DATABASE_NAME
              value: ${DATABASE_NAME}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: CAKEPHP_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  key: cakephp-secret-token
                  name: ${NAME}
            - name: CAKEPHP_SECURITY_SALT
              valueFrom:
                secretKeyRef:
                  key: cakephp-security-salt
                  name: ${NAME}
            - name: OPCACHE_REVALIDATE_FREQ
              value: ${OPCACHE_REVALIDATE_FREQ}
            image: ' '
            livenessProbe:
              httpGet:
                path: /health.php
                port: 8080
              initialDelaySeconds: 30
              periodSeconds: 60
              timeoutSeconds: 3
            name: cakephp-mysql-persistent
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /health.php
                port: 8080
              initialDelaySeconds: 3
              periodSeconds: 60
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - cakephp-mysql-persistent
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mysql
        port: 3306
        targetPort: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
              value: ${MYSQL_DEFAULT_AUTHENTICATION_PLUGIN}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: mysql
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_MYSQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mysql
          from:
            kind: ImageStreamTag
            name: mysql:8.0-el8
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: cakephp-mysql-persistent
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of PHP image to be used (7.3-ubi7, 7.3-ubi8, or latest).
    displayName: PHP Version
    name: PHP_VERSION
    required: true
    value: 7.3-ubi8
  - description: Maximum amount of memory the CakePHP container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the MySQL container can use.
    displayName: Memory Limit (MySQL)
    name: MEMORY_MYSQL_LIMIT
    required: true
    value: 512Mi
  - description: Volume space available for data, e.g. 512Mi, 2Gi
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/cakephp-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mysql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    displayName: Database Engine
    name: DATABASE_ENGINE
    required: true
    value: mysql
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: default
  - displayName: Database User
    name: DATABASE_USER
    required: true
    value: cakephp
  - displayName: Database Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - description: Set this to a long random string.
    displayName: CakePHP secret token
    from: '[\w]{50}'
    generate: expression
    name: CAKEPHP_SECRET_TOKEN
  - description: Security salt for session hash.
    displayName: CakePHP Security Salt
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: CAKEPHP_SECURITY_SALT
  - description: How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.
    displayName: OPcache Revalidation Frequency
    name: OPCACHE_REVALIDATE_FREQ
    value: "2"
  - description: The custom Composer mirror URL
    displayName: Custom Composer Mirror URL
    name: COMPOSER_MIRROR
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once PHP client supports it.'
    displayName: MySQL authentication plugin
    name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
    value: mysql_native_password
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: dancer-mysql-example
    template: dancer-mysql-example
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/dancer-ex/blob/master/README.md.
  metadata:
    annotations:
      description: |-
        An example Dancer application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/dancer-ex/blob/master/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-perl
      openshift.io/display-name: Dancer + MySQL (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/dancer-ex
      openshift.io/long-description: This template defines resources needed to develop a Dancer based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,perl,dancer
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: dancer-mysql-example
    namespace: openshift
    resourceVersion: "15172"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/dancer-mysql-example
    uid: a4b7f6ef-fd94-46d5-9101-739b95284655
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
      keybase: ${SECRET_KEY_BASE}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: perl -I extlib/lib/perl5 -I lib t/*
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: CPAN_MIRROR
            value: ${CPAN_MIRROR}
          from:
            kind: ImageStreamTag
            name: perl:${PERL_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  key: keybase
                  name: ${NAME}
            - name: PERL_APACHE2_RELOAD
              value: ${PERL_APACHE2_RELOAD}
            image: ' '
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: dancer-mysql-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - dancer-mysql-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mysql
        port: 3306
        targetPort: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
              value: ${MYSQL_DEFAULT_AUTHENTICATION_PLUGIN}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: mysql
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_MYSQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: data
          volumes:
          - emptyDir: {}
            name: data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mysql
          from:
            kind: ImageStreamTag
            name: mysql:8.0-el8
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: dancer-mysql-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of Perl image to be used (5.26-el7, 5.26-ubi8, or latest).
    displayName: Version of Perl Image
    name: PERL_VERSION
    required: true
    value: 5.26-ubi8
  - description: Maximum amount of memory the Perl Dancer container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the MySQL container can use.
    displayName: Memory Limit (MySQL)
    name: MEMORY_MYSQL_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/dancer-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Dancer service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: database
  - displayName: Database Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: sampledb
  - description: Set this to "true" to enable automatic reloading of modified Perl modules.
    displayName: Perl Module Reload
    name: PERL_APACHE2_RELOAD
  - description: Your secret key for verifying the integrity of signed cookies.
    displayName: Secret Key
    from: '[a-z0-9]{127}'
    generate: expression
    name: SECRET_KEY_BASE
  - description: The custom CPAN mirror URL
    displayName: Custom CPAN Mirror URL
    name: CPAN_MIRROR
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once clients support it.'
    displayName: MySQL authentication plugin
    name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
    value: mysql_native_password
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: dancer-mysql-persistent
    template: dancer-mysql-persistent
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/dancer-ex/blob/master/README.md.
  metadata:
    annotations:
      description: An example Dancer application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/dancer-ex/blob/master/README.md.
      iconClass: icon-perl
      openshift.io/display-name: Dancer + MySQL
      openshift.io/documentation-url: https://github.com/sclorg/dancer-ex
      openshift.io/long-description: This template defines resources needed to develop a Dancer based application, including a build configuration, application deployment configuration, and database deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,perl,dancer
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: dancer-mysql-persistent
    namespace: openshift
    resourceVersion: "15229"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/dancer-mysql-persistent
    uid: 90083bd4-d6dc-4748-ae79-83eaed183510
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
      keybase: ${SECRET_KEY_BASE}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: perl -I extlib/lib/perl5 -I lib t/*
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: CPAN_MIRROR
            value: ${CPAN_MIRROR}
          from:
            kind: ImageStreamTag
            name: perl:${PERL_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  key: keybase
                  name: ${NAME}
            - name: PERL_APACHE2_RELOAD
              value: ${PERL_APACHE2_RELOAD}
            image: ' '
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: dancer-mysql-persistent
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - dancer-mysql-persistent
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mysql
        port: 3306
        targetPort: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
              value: ${MYSQL_DEFAULT_AUTHENTICATION_PLUGIN}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: mysql
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_MYSQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mysql
          from:
            kind: ImageStreamTag
            name: mysql:8.0-el8
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: dancer-mysql-persistent
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of Perl image to be used (5.26-el7, 5.26-ubi8, or latest).
    displayName: Version of Perl Image
    name: PERL_VERSION
    required: true
    value: 5.26-ubi8
  - description: Maximum amount of memory the Perl Dancer container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the MySQL container can use.
    displayName: Memory Limit (MySQL)
    name: MEMORY_MYSQL_LIMIT
    required: true
    value: 512Mi
  - description: Volume space available for data, e.g. 512Mi, 2Gi
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/dancer-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Dancer service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: database
  - displayName: Database Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: sampledb
  - description: Set this to "true" to enable automatic reloading of modified Perl modules.
    displayName: Perl Module Reload
    name: PERL_APACHE2_RELOAD
  - description: Your secret key for verifying the integrity of signed cookies.
    displayName: Secret Key
    from: '[a-z0-9]{127}'
    generate: expression
    name: SECRET_KEY_BASE
  - description: The custom CPAN mirror URL
    displayName: Custom CPAN Mirror URL
    name: CPAN_MIRROR
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once clients support it.'
    displayName: MySQL authentication plugin
    name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
    value: mysql_native_password
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: datagrid-service
  metadata:
    annotations:
      description: Red Hat Data Grid is an in-memory, distributed key/value store.
      iconClass: icon-datagrid
      openshift.io/display-name: Red Hat Data Grid Service
      openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_data_grid/7.3/html/red_hat_data_grid_for_openshift/
      openshift.io/long-description: Red Hat Data Grid Service provides a fully customizable implementation of Data Grid for OpenShift that is stable, persistent, and elastically scalable.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://www.redhat.com/en/services/support
      samples.operator.openshift.io/version: 4.6.52
      tags: database,datagrid
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
      template: datagrid-service
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
            f:template: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: datagrid-service
    namespace: openshift
    resourceVersion: "15103"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/datagrid-service
    uid: bbd295ca-3633-4f30-b243-0e106bfdd28c
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    stringData:
      application-password: ${APPLICATION_PASSWORD}
      application-user: ${APPLICATION_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a ping service for clustered applications.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a service for accessing the application over HTTPS or Hot Rod protocol.
        service.alpha.openshift.io/serving-cert-secret-name: service-certs
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: hotrod
        port: 11222
        targetPort: 11222
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: ${{NUMBER_OF_INSTANCES}}
      selector:
        matchLabels:
          application: ${APPLICATION_NAME}
      serviceName: ${APPLICATION_NAME}-ping
      strategy:
        rollingParams:
          intervalSeconds: 20
          maxSurge: 1
          maxUnavailable: 1
          timeoutSeconds: 1200
          updatePeriodSeconds: 20
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SERVICE_NAME
              value: ${APPLICATION_NAME}
            - name: SERVICE_PROFILE
              value: datagrid-service
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  key: application-user
                  name: ${APPLICATION_NAME}
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  key: application-password
                  name: ${APPLICATION_NAME}
            image: ${IMAGE}
            livenessProbe:
              exec:
                command:
                - /opt/datagrid/bin/livenessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 15
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            - containerPort: 11222
              name: hotrod
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /opt/datagrid/bin/readinessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 17
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
            resources:
              limits:
                memory: ${TOTAL_CONTAINER_MEM}Mi
              requests:
                cpu: "0.5"
                memory: ${TOTAL_CONTAINER_MEM}Mi
            volumeMounts:
            - mountPath: /opt/datagrid/standalone/data
              name: srv-data
            - mountPath: /var/run/secrets/java.io/keystores
              name: keystore-volume
            - mountPath: /var/run/secrets/openshift.io/serviceaccount
              name: service-certs
          terminationGracePeriodSeconds: 60
          volumes:
          - empty-dir: {}
            name: keystore-volume
          - name: service-certs
            secret:
              secretName: service-certs
      triggers:
      - type: ConfigChange
      volumeClaimTemplates:
      - metadata:
          name: srv-data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${TOTAL_CONTAINER_STORAGE}Gi
  parameters:
  - description: Specifies a name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: datagrid-service
  - description: Sets an image to bootstrap the service.
    name: IMAGE
    required: true
    value: registry.redhat.io/jboss-datagrid-7/datagrid73-openshift
  - description: Specifies how many instances of the application to create in the cluster.
    displayName: Number of Instances
    name: NUMBER_OF_INSTANCES
    required: true
    value: "1"
  - description: Sets the total memory, in MiB, available to the application.
    displayName: Total Memory
    name: TOTAL_CONTAINER_MEM
    value: "512"
  - description: Sets the storage capacity, in GiB, of the persistence volume.
    displayName: Storage Capacity
    name: TOTAL_CONTAINER_STORAGE
    value: "1"
  - description: Specifies a username to authenticate client applications.
    displayName: Client User
    name: APPLICATION_USER
    required: true
  - description: Sets a password to authenticate client applications.
    displayName: Client Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: APPLICATION_PASSWORD
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jdv64: 1.7.0
    template: datavirt64-basic-s2i
  message: A new data service has been created in your project.  The username/password for accessing the service is ${TEIID_USERNAME}/${TEIID_PASSWORD}.  Please be sure to create the secret named ${CONFIGURATION_NAME} containing the datasource configuration details required by the deployed VDB(s).
  metadata:
    annotations:
      description: Application template for JBoss Data Virtualization 6.4 services built using S2I.
      iconClass: icon-datavirt
      openshift.io/display-name: JBoss Data Virtualization 6.4 (no SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: jdv,datavirt,database,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-data-virtualization/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Data Virtualization based application, including a build configuration and application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.7.0
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jdv64: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: datavirt64-basic-s2i
    namespace: openshift
    resourceVersion: "15122"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/datavirt64-basic-s2i
    uid: 3d151729-a6e6-4344-b585-27a12d318e58
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The data virtualization services.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: http
      - name: jdbc
        port: 31000
        targetPort: jdbc
      - name: odbc
        port: 35432
        targetPort: odbc
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http (REST) service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: VDB_DIRS
            value: ${VDB_DIRS}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-datavirt64-openshift:1.7
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: TEIID_USERNAME
              value: ${TEIID_USERNAME}
            - name: TEIID_PASSWORD
              value: ${TEIID_PASSWORD}
            - name: ENV_FILES
              value: /etc/datavirt-environment/*
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 31000
              name: jdbc
              protocol: TCP
            - containerPort: 35432
              name: odbc
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/datavirt-environment
              name: configuration
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: configuration
            secret:
              secretName: ${CONFIGURATION_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: datavirt-app
  - description: The name of the secret containing configuration properties for the data sources.
    displayName: Configuration Secret Name
    name: CONFIGURATION_NAME
    required: true
    value: datavirt-app-config
  - description: 'Specify a custom hostname for the http route.  Leave blank to use default hostname, e.g.: <service-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: master
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: datavirt64/dynamicvdb-datafederation/app
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: Username associated with Teiid data service.
    displayName: Teiid Username
    from: '[\a]{8}'
    generate: expression
    name: TEIID_USERNAME
    required: true
  - description: Password for Teiid user.
    displayName: Teiid User Password
    from: '[\a\A]{8}[\d]{1}[\A]{1}'
    generate: expression
    name: TEIID_PASSWORD
    required: true
  - description: A secret string used to configure the GitHub webhook.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Password used by JGroups to authenticate nodes in the cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Comma delimited list of source directories containing VDBs for deployment
    displayName: VDB Deployment Directories
    name: VDB_DIRS
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jdv64: 1.7.0
    template: datavirt64-extensions-support-s2i
  message: 'A new data service has been created in your project.  The username/password for accessing the service is ${TEIID_USERNAME}/${TEIID_PASSWORD}.  Please be sure to create the following secrets: "${CONFIGURATION_NAME}" containing the datasource configuration details required by the deployed VDB(s); "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.'
  metadata:
    annotations:
      description: An example JBoss Data Virtualization application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-datavirt
      openshift.io/display-name: JBoss Data Virtualization 6.4 (with SSL and Extensions)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: jdv,datavirt,database,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-data-virtualization/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Data Virtualization based application, including a build configuration, application deployment configuration, support for installing extensions (e.g. third-party DB drivers) and the ability to configure certificates for serving secure content.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.7.0
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jdv64: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: datavirt64-extensions-support-s2i
    namespace: openshift
    resourceVersion: "15119"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/datavirt64-extensions-support-s2i
    uid: 3e38e8f1-f246-4b19-a562-9183dc41e4fa
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The data virtualization services.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: http
      - name: https
        port: 8443
        targetPort: https
      - name: jdbc
        port: 31000
        targetPort: jdbc
      - name: jdbcs
        port: 31443
        targetPort: jdbcs
      - name: odbc
        port: 35432
        targetPort: odbc
      - name: odbcs
        port: 35443
        targetPort: odbcs
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http (REST) service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https (REST) service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-jdbc
    kind: Route
    metadata:
      annotations:
        description: Route for application's JDBC service.
      labels:
        application: ${APPLICATION_NAME}
      name: jdbc-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_JDBC}
      port:
        targetPort: jdbcs
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ext
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ext
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-ext:latest
      source:
        contextDir: ${EXTENSIONS_DIR}
        git:
          ref: ${EXTENSIONS_REPOSITORY_REF}
          uri: ${EXTENSIONS_REPOSITORY_URL}
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: ${EXTENSIONS_DOCKERFILE}
        type: Docker
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-ext:latest
          paths:
          - destinationDir: ./${CONTEXT_DIR}/extensions/extras
            sourcePath: /extensions/.
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: VDB_DIRS
            value: ${VDB_DIRS}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-datavirt64-openshift:1.7
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-ext:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/datavirt-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: TEIID_USERNAME
              value: ${TEIID_USERNAME}
            - name: TEIID_PASSWORD
              value: ${TEIID_PASSWORD}
            - name: ENV_FILES
              value: /etc/datavirt-environment/*
            - name: DATAVIRT_TRANSPORT_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: DATAVIRT_TRANSPORT_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: DATAVIRT_TRANSPORT_KEY_ALIAS
              value: ${HTTPS_NAME}
            - name: DATAVIRT_TRANSPORT_KEYSTORE_PASSWORD
              value: ${HTTPS_PASSWORD}
            - description: Used soley by the quickstart and set here to ensure the template can be instatiated with its default parameter values, i.e. so itworks ootb.
              name: QS_DB_TYPE
              value: derby
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 31000
              name: jdbc
              protocol: TCP
            - containerPort: 31443
              name: jdbcs
              protocol: TCP
            - containerPort: 35432
              name: odbc
              protocol: TCP
            - containerPort: 35443
              name: odbcs
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/datavirt-environment
              name: configuration
              readOnly: true
            - mountPath: /etc/datavirt-secret-volume
              name: datavirt-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: datavirt-jgroups-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: configuration
            secret:
              secretName: ${CONFIGURATION_NAME}
          - name: datavirt-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: datavirt-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: datavirt-app
  - description: The name of the secret containing configuration properties for the data sources.
    displayName: Configuration Secret Name
    name: CONFIGURATION_NAME
    required: true
    value: datavirt-app-config
  - description: 'Specify a custom hostname for the http route.  Leave blank to use default hostname, e.g.: <service-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Specify a custom hostname for the https route.  Leave blank to use default hostname, e.g.: secure-<service-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: 'Specify a custom hostname for the JDBC route.  Leave blank to use default hostname, e.g.: secure-<service-name>-<project>.<default-domain-suffix>'
    displayName: Custom JDBC Route Hostname
    name: HOSTNAME_JDBC
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: master
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: datavirt64/dynamicvdb-datafederation/app
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: The URL of the repository with source code for the extensions image.  The image should have all modules, etc., placed in the "/extensions/" directory in the image.  If the contents are in a different directory, the sourcePath for the ImageSource in the BuildConfig must be modified.
    displayName: Extensions Git Repository URL
    name: EXTENSIONS_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Set this to a branch name, tag or other ref of your extensions repository if you are not using the default branch.
    displayName: Extensions Git Reference
    name: EXTENSIONS_REPOSITORY_REF
    value: master
  - description: Set this to the relative path to your project if it is not in the root of your extensions repository.
    displayName: Extensions Context Directory
    name: EXTENSIONS_DIR
    value: datavirt64/derby-driver-image
  - description: Set this to the relative path to the Dockerfile in your extensions directory.
    displayName: Extensions Dockerfile
    name: EXTENSIONS_DOCKERFILE
    value: Dockerfile
  - description: The name of the secret containing the keystore to be used for serving secure content.
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    required: true
    value: datavirt-app-secret
  - description: The name of the keystore file within the secret.
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS).
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate.
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Username associated with Teiid data service.
    displayName: Teiid Username
    from: '[\a]{8}'
    generate: expression
    name: TEIID_USERNAME
    required: true
  - description: Password for Teiid user.
    displayName: Teiid User Password
    from: '[\a\A]{8}[\d]{1}[\A]{1}'
    generate: expression
    name: TEIID_PASSWORD
    required: true
  - description: A secret string used to configure the GitHub webhook.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the secret containing the keystore to be used for securing JGroups communications.
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: datavirt-app-secret
  - description: The name of the keystore file within the JGroups secret.
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the JGroups server certificate
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
    value: secret-key
  - description: The password for the keystore and certificate
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
    value: password
  - description: Password used by JGroups to authenticate nodes in the cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Comma delimited list of source directories containing VDBs for deployment
    displayName: VDB Deployment Directories
    name: VDB_DIRS
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jdv64: 1.7.0
    template: datavirt64-ldap-s2i
  message: A new data service has been created in your project.  The username/password for accessing the service is ${TEIID_USERNAME}/${TEIID_PASSWORD}.  Please be sure to create the secret named ${CONFIGURATION_NAME} containing the datasource configuration details required by the deployed VDB(s).
  metadata:
    annotations:
      description: Application template for JBoss Data Virtualization 6.4 services that configures security domain using S2I.
      iconClass: icon-datavirt
      openshift.io/display-name: JBoss Data Virtualization 6.4 defining Security Domain (no SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: jdv,datavirt,database,jboss,ldap
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-data-virtualization/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Data Virtualization based application, configuring security domain(s), including a build configuration and application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.7.0
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jdv64: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: datavirt64-ldap-s2i
    namespace: openshift
    resourceVersion: "15104"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/datavirt64-ldap-s2i
    uid: 1611b6a4-7933-4209-85dd-2a0ac9106aa3
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The data virtualization services.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: http
      - name: jdbc
        port: 31000
        targetPort: jdbc
      - name: odbc
        port: 35432
        targetPort: odbc
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http (REST) service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: VDB_DIRS
            value: ${VDB_DIRS}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-datavirt64-openshift:1.7
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: TEIID_USERNAME
              value: ${TEIID_USERNAME}
            - name: TEIID_PASSWORD
              value: ${TEIID_PASSWORD}
            - name: ENV_FILES
              value: /etc/datavirt-environment/*,/etc/datavirt-security-environment/*
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 31000
              name: jdbc
              protocol: TCP
            - containerPort: 35432
              name: odbc
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/datavirt-environment
              name: configuration
              readOnly: true
            - mountPath: /etc/datavirt-security-environment
              name: configuration-security-domain
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: configuration
            secret:
              secretName: ${CONFIGURATION_NAME}
          - name: configuration-security-domain
            secret:
              secretName: ${CONFIG_SECURITY_DOMAIN_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: datavirt-app
  - description: The name of the secret containing configuration properties for the data sources.
    displayName: Configuration Secret Name
    name: CONFIGURATION_NAME
    required: true
    value: datavirt-app-config
  - description: The name of the secret containing security domain configuration properties.
    displayName: Security Domain Configuration Secret Name
    name: CONFIG_SECURITY_DOMAIN_NAME
    value: datavirt-security-config
  - description: 'Specify a custom hostname for the http route.  Leave blank to use default hostname, e.g.: <service-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: master
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: datavirt64/dynamicvdb-datafederation/app
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: Username associated with Teiid data service.
    displayName: Teiid Username
    from: '[\a]{8}'
    generate: expression
    name: TEIID_USERNAME
    required: true
  - description: Password for Teiid user.
    displayName: Teiid User Password
    from: '[\a\A]{8}[\d]{1}[\A]{1}'
    generate: expression
    name: TEIID_PASSWORD
    required: true
  - description: A secret string used to configure the GitHub webhook.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Password used by JGroups to authenticate nodes in the cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Comma delimited list of source directories containing VDBs for deployment
    displayName: VDB Deployment Directories
    name: VDB_DIRS
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jdv64: 1.7.0
    template: datavirt64-secure-s2i
  message: 'A new data service has been created in your project.  The username/password for accessing the service is ${TEIID_USERNAME}/${TEIID_PASSWORD}.  Please be sure to create the following secrets: "${CONFIGURATION_NAME}" containing the datasource configuration details required by the deployed VDB(s); "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.'
  metadata:
    annotations:
      description: An example JBoss Data Virtualization application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-datavirt
      openshift.io/display-name: JBoss Data Virtualization 6.4 (with SSL)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: jdv,datavirt,database,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-data-virtualization/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Data Virtualization based application, including a build configuration, application deployment configuration and ability to configure certificates for serving secure content.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.7.0
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jdv64: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: datavirt64-secure-s2i
    namespace: openshift
    resourceVersion: "15202"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/datavirt64-secure-s2i
    uid: 3acc8a60-a21f-4839-818c-9004cda77e11
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The data virtualization services.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: http
      - name: https
        port: 8443
        targetPort: https
      - name: jdbc
        port: 31000
        targetPort: jdbc
      - name: jdbcs
        port: 31443
        targetPort: jdbcs
      - name: odbc
        port: 35432
        targetPort: odbc
      - name: odbcs
        port: 35443
        targetPort: odbcs
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http (REST) service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https (REST) service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-jdbc
    kind: Route
    metadata:
      annotations:
        description: Route for application's JDBC service.
      labels:
        application: ${APPLICATION_NAME}
      name: jdbc-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_JDBC}
      port:
        targetPort: jdbcs
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: VDB_DIRS
            value: ${VDB_DIRS}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-datavirt64-openshift:1.7
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/datavirt-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: TEIID_USERNAME
              value: ${TEIID_USERNAME}
            - name: TEIID_PASSWORD
              value: ${TEIID_PASSWORD}
            - name: ENV_FILES
              value: /etc/datavirt-environment/*
            - name: DATAVIRT_TRANSPORT_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: DATAVIRT_TRANSPORT_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: DATAVIRT_TRANSPORT_KEY_ALIAS
              value: ${HTTPS_NAME}
            - name: DATAVIRT_TRANSPORT_KEYSTORE_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_SERVICE_URL
              value: ${SSO_SERVICE_URL}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_PUBLIC_KEY
              value: ${SSO_PUBLIC_KEY}
            - name: SSO_BEARER_ONLY
              value: ${SSO_BEARER_ONLY}
            - name: SSO_SAML_KEYSTORE_SECRET
              value: ${SSO_SAML_KEYSTORE_SECRET}
            - name: SSO_SAML_KEYSTORE
              value: ${SSO_SAML_KEYSTORE}
            - name: SSO_SAML_KEYSTORE_DIR
              value: /etc/sso-saml-secret-volume
            - name: SSO_SAML_CERTIFICATE_NAME
              value: ${SSO_SAML_CERTIFICATE_NAME}
            - name: SSO_SAML_KEYSTORE_PASSWORD
              value: ${SSO_SAML_KEYSTORE_PASSWORD}
            - name: SSO_SECRET
              value: ${SSO_SECRET}
            - name: SSO_ENABLE_CORS
              value: ${SSO_ENABLE_CORS}
            - name: SSO_SAML_LOGOUT_PAGE
              value: ${SSO_SAML_LOGOUT_PAGE}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ${SSO_OPENIDCONNECT_DEPLOYMENTS}
            - name: SSO_SAML_DEPLOYMENTS
              value: ${SSO_SAML_DEPLOYMENTS}
            - name: HOSTNAME_HTTP
              value: ${HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${HOSTNAME_HTTPS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 31000
              name: jdbc
              protocol: TCP
            - containerPort: 31443
              name: jdbcs
              protocol: TCP
            - containerPort: 35432
              name: odbc
              protocol: TCP
            - containerPort: 35443
              name: odbcs
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/datavirt-environment
              name: configuration
              readOnly: true
            - mountPath: /etc/datavirt-secret-volume
              name: datavirt-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: datavirt-jgroups-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: configuration
            secret:
              secretName: ${CONFIGURATION_NAME}
          - name: datavirt-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: datavirt-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: datavirt-app
  - description: The name of the secret containing configuration properties for the data sources.
    displayName: Configuration Secret Name
    name: CONFIGURATION_NAME
    required: true
    value: datavirt-app-config
  - description: 'Specify a custom hostname for the http route.  Leave blank to use default hostname, e.g.: <service-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Specify a custom hostname for the https route.  Leave blank to use default hostname, e.g.: secure-<service-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: 'Specify a custom hostname for the JDBC route.  Leave blank to use default hostname, e.g.: secure-<service-name>-<project>.<default-domain-suffix>'
    displayName: Custom JDBC Route Hostname
    name: HOSTNAME_JDBC
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: master
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: datavirt64/dynamicvdb-datafederation/app
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: The name of the secret containing the keystore to be used for serving secure content.
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    required: true
    value: datavirt-app-secret
  - description: The name of the keystore file within the secret.
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS).
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate.
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Username associated with Teiid data service.
    displayName: Teiid Username
    from: '[\a]{8}'
    generate: expression
    name: TEIID_USERNAME
    required: true
  - description: Password for Teiid user.
    displayName: Teiid User Password
    from: '[\a\A]{8}[\d]{1}[\A]{1}'
    generate: expression
    name: TEIID_PASSWORD
    required: true
  - description: A secret string used to configure the GitHub webhook.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the secret containing the keystore to be used for securing JGroups communications.
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: datavirt-app-secret
  - description: The name of the keystore file within the JGroups secret.
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the JGroups server certificate
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
    value: secret-key
  - description: The password for the keystore and certificate
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
    value: password
  - description: Password used by JGroups to authenticate nodes in the cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Comma delimited list of source directories containing VDBs for deployment
    displayName: VDB Deployment Directories
    name: VDB_DIRS
  - description: The URL for the SSO server (e.g. https://secure-sso-myproject.example.com/auth).  This is the URL through which the user will be redirected when a login or token is required by the application.
    displayName: SSO Server URL
    name: SSO_URL
  - description: The URL for the interal SSO service, where secure-sso is the kubernetes service exposed by the SSO server.  This is used to create the application client(s) (see SSO_USERNAME).  This can also be the same as SSO_URL.
    displayName: SSO Server Service URL
    name: SSO_SERVICE_URL
  - description: The SSO realm to which the application client(s) should be associated (e.g. demo).
    displayName: SSO Realm
    name: SSO_REALM
  - description: The username used to access the SSO service.  This is used to create the appliction client(s) within the specified SSO realm. This should match the SSO_SERVICE_USERNAME specified through one of the sso70-* templates.
    displayName: SSO Username
    name: SSO_USERNAME
  - description: The password for the SSO service user.
    displayName: SSO User's Password
    name: SSO_PASSWORD
  - description: SSO Realm Public Key. Public key is recommended to be passed into the template to avoid man-in-the-middle security vulnerability.  This can be retrieved from the SSO server, for the specified realm.
    displayName: SSO Realm Public Key
    name: SSO_PUBLIC_KEY
  - description: SSO Client Access Type. true or false
    displayName: SSO Bearer Only
    name: SSO_BEARER_ONLY
  - description: The name of the secret containing the keystore file
    displayName: SSO SAML Keystore Secret
    name: SSO_SAML_KEYSTORE_SECRET
    value: datavirt-app-secret
  - description: The name of the keystore file within the secret
    displayName: SSO SAML Keystore File
    name: SSO_SAML_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: SSO SAML Certificate Alias
    name: SSO_SAML_CERTIFICATE_NAME
  - description: The password for the keystore and certificate
    displayName: SSO SAML Keystore Password
    name: SSO_SAML_KEYSTORE_PASSWORD
  - description: The SSO Client Secret for Confidential Access
    displayName: SSO Client Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_SECRET
  - description: Enable CORS for SSO applications. true or false
    displayName: SSO Enable CORS
    name: SSO_ENABLE_CORS
    value: "false"
  - description: SSO logout page for SAML applications
    displayName: SSO SAML Logout Page
    name: SSO_SAML_LOGOUT_PAGE
    value: /
  - description: If true SSL communication between EAP and the SSO Server will be insecure (i.e. certificate validation is disabled with curl)
    displayName: SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "true"
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: SSO Truststore File
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: SSO Truststore Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: SSO Truststore Secret
    name: SSO_TRUSTSTORE_SECRET
    value: datavirt-app-secret
  - description: Comma delimited list of deployments that shoulds be exploded and enabled for SSO OpenIDConnect via auth-method
    displayName: SSO OpenIDConnect Deployments
    name: SSO_OPENIDCONNECT_DEPLOYMENTS
  - description: Comma delimited list of deployments that shoulds be exploded and enabled for SSO SAML via auth-method
    displayName: SSO SAML Deployments
    name: SSO_SAML_DEPLOYMENTS
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: decisionserver64-amq-s2i
    xpaas: 1.4.17
  message: A new BRMS/A-MQ application with SSL support has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the A-MQ service use the credentials ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BRMS decision server A-MQ application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-decisionserver
      openshift.io/display-name: JBoss BRMS 6.4 decision server + A-MQ (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: decisionserver,jboss
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-brms/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss BRMS 6.4 decision server with A-MQ application, including a build configuration and application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: decisionserver64-amq-s2i
    namespace: openshift
    resourceVersion: "15187"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/decisionserver64-amq-s2i
    uid: 0a051404-6931-4a97-be82-475e8c285327
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's HTTP port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's HTTPS port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
        targetPort: 6166
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's HTTP service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's HTTPS service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-decisionserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_JMS_QUEUES_REQUEST
              value: ${KIE_SERVER_JMS_QUEUES_REQUEST}
            - name: KIE_SERVER_JMS_QUEUES_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUES_RESPONSE}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq=MQ
            - name: MQ_JNDI
              value: ${MQ_JNDI}
            - name: MQ_USERNAME
              value: ${MQ_USERNAME}
            - name: MQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: MQ_PROTOCOL
              value: tcp
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/decisionserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/decisionserver-secret-volume
              name: decisionserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: decisionserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: decisionserver-hellorules=org.openshift.quickstarts:decisionserver-hellorules:1.4.0.Final
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: JNDI name of request queue for JMS.
    displayName: KIE Server JMS Queues Request
    name: KIE_SERVER_JMS_QUEUES_REQUEST
    value: queue/KIE.SERVER.REQUEST
  - description: JNDI name of response queue for JMS.
    displayName: KIE Server JMS Queues Response
    name: KIE_SERVER_JMS_QUEUES_RESPONSE
    value: queue/KIE.SERVER.RESPONSE
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: decisionserver/hellorules
  - description: JNDI name for connection factory used by applications to connect to the broker, e.g. java:/JmsXA
    displayName: JMS Connection Factory JNDI Name
    name: MQ_JNDI
    value: java:/JmsXA
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Queues
    name: MQ_QUEUES
    value: KIE.SERVER.REQUEST,KIE.SERVER.RESPONSE
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Topics
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: decisionserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: The A-MQ storage usage limit
    displayName: A-MQ Storage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: decisionserver64-basic-s2i
    xpaas: 1.4.17
  message: A new BRMS application has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}.
  metadata:
    annotations:
      description: Application template for Red Hat JBoss BRMS 6.4 decision server applications built using S2I.
      iconClass: icon-decisionserver
      openshift.io/display-name: Red Hat JBoss BRMS 6.4 decision server (no https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: decisionserver,jboss,xpaas
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-brms/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss BRMS 6.4 decision server, including a build configuration and application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: decisionserver64-basic-s2i
    namespace: openshift
    resourceVersion: "15148"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/decisionserver64-basic-s2i
    uid: cce9a1a7-a035-49e1-ba47-65805ad4d634
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-decisionserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: decisionserver-hellorules=org.openshift.quickstarts:decisionserver-hellorules:1.4.0.Final
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: decisionserver/hellorules
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: django-psql-example
    template: django-psql-example
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/django-ex/blob/master/README.md.
  metadata:
    annotations:
      description: |-
        An example Django application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/django-ex/blob/master/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-python
      openshift.io/display-name: Django + PostgreSQL (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/django-ex
      openshift.io/long-description: This template defines resources needed to develop a Django based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,python,django
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: django-psql-example
    namespace: openshift
    resourceVersion: "15185"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/django-psql-example
    uid: 7df8e4bc-8fe6-4816-aa1d-3944bad590e0
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
      django-secret-key: ${DJANGO_SECRET_KEY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: ./manage.py test
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: PIP_INDEX_URL
            value: ${PIP_INDEX_URL}
          from:
            kind: ImageStreamTag
            name: python:${PYTHON_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: DATABASE_ENGINE
              value: ${DATABASE_ENGINE}
            - name: DATABASE_NAME
              value: ${DATABASE_NAME}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: APP_CONFIG
              value: ${APP_CONFIG}
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: django-secret-key
                  name: ${NAME}
            image: ' '
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: django-psql-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - django-psql-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            image: ' '
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: postgresql
            ports:
            - containerPort: 5432
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_POSTGRESQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: data
          volumes:
          - emptyDir: {}
            name: data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: django-psql-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of Python image to be used (3.6-ubi8, 3.8-ubi7, 3.8-ubi8, or latest).
    displayName: Version of Python Image
    name: PYTHON_VERSION
    required: true
    value: 3.8-ubi8
  - description: Version of PostgreSQL image to be used (10-el8, 12-el8, or latest).
    displayName: Version of PostgreSQL Image
    name: POSTGRESQL_VERSION
    required: true
    value: 12-el8
  - description: Maximum amount of memory the Django container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the PostgreSQL container can use.
    displayName: Memory Limit (PostgreSQL)
    name: MEMORY_POSTGRESQL_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/django-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Django service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    displayName: Database Engine
    name: DATABASE_ENGINE
    required: true
    value: postgresql
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: default
  - displayName: Database Username
    name: DATABASE_USER
    required: true
    value: django
  - displayName: Database User Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - description: Relative path to Gunicorn configuration file (optional).
    displayName: Application Configuration File Path
    name: APP_CONFIG
  - description: Set this to a long random string.
    displayName: Django Secret Key
    from: '[\w]{50}'
    generate: expression
    name: DJANGO_SECRET_KEY
  - description: The custom PyPi index URL
    displayName: Custom PyPi Index URL
    name: PIP_INDEX_URL
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: django-psql-persistent
    template: django-psql-persistent
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/django-ex/blob/master/README.md.
  metadata:
    annotations:
      description: An example Django application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/django-ex/blob/master/README.md.
      iconClass: icon-python
      openshift.io/display-name: Django + PostgreSQL
      openshift.io/documentation-url: https://github.com/sclorg/django-ex
      openshift.io/long-description: This template defines resources needed to develop a Django based application, including a build configuration, application deployment configuration, and database deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,python,django
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: django-psql-persistent
    namespace: openshift
    resourceVersion: "15178"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/django-psql-persistent
    uid: b623222a-2f13-4b92-924f-1b2d124e5a91
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
      django-secret-key: ${DJANGO_SECRET_KEY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: ./manage.py test
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: PIP_INDEX_URL
            value: ${PIP_INDEX_URL}
          from:
            kind: ImageStreamTag
            name: python:${PYTHON_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: DATABASE_ENGINE
              value: ${DATABASE_ENGINE}
            - name: DATABASE_NAME
              value: ${DATABASE_NAME}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: APP_CONFIG
              value: ${APP_CONFIG}
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: django-secret-key
                  name: ${NAME}
            image: ' '
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: django-psql-persistent
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - django-psql-persistent
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            image: ' '
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: postgresql
            ports:
            - containerPort: 5432
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_POSTGRESQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: django-psql-persistent
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of Python image to be used (3.6-ubi8, 3.8-ubi7, 3.8-ubi8, or latest).
    displayName: Version of Python Image
    name: PYTHON_VERSION
    required: true
    value: 3.8-ubi8
  - description: Version of PostgreSQL image to be used (10-el8, 12-el8, or latest).
    displayName: Version of PostgreSQL Image
    name: POSTGRESQL_VERSION
    required: true
    value: 12-el8
  - description: Maximum amount of memory the Django container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the PostgreSQL container can use.
    displayName: Memory Limit (PostgreSQL)
    name: MEMORY_POSTGRESQL_LIMIT
    required: true
    value: 512Mi
  - description: Volume space available for data, e.g. 512Mi, 2Gi
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/django-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Django service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    displayName: Database Engine
    name: DATABASE_ENGINE
    required: true
    value: postgresql
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: default
  - displayName: Database Username
    name: DATABASE_USER
    required: true
    value: django
  - displayName: Database User Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - description: Relative path to Gunicorn configuration file (optional).
    displayName: Application Configuration File Path
    name: APP_CONFIG
  - description: Set this to a long random string.
    displayName: Django Secret Key
    from: '[\w]{50}'
    generate: expression
    name: DJANGO_SECRET_KEY
  - description: The custom PyPi index URL
    displayName: Custom PyPi Index URL
    name: PIP_INDEX_URL
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: eap73-basic-s2i
    xpaas: "7.3"
  message: A new JBoss EAP based application has been created in your project.
  metadata:
    annotations:
      description: An example JBoss Enterprise Application Platform application. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/7.3.x/README.adoc
      iconClass: icon-eap
      openshift.io/display-name: JBoss EAP 7.3 (OpenJDK 8)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: eap,javaee,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
      template.openshift.io/long-description: This template defines resources needed to develop a JBoss Enterprise Application Platform based application, including a build configuration, application deployment configuration and secure communication using edge TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.3"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: eap73-basic-s2i
    namespace: openshift
    resourceVersion: "15130"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/eap73-basic-s2i
    uid: 52bad103-6078-41a7-a1cb-0d12b46e158c
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      publishNotReadyAddresses: true
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build-artifacts:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: GALLEON_PROVISION_LAYERS
            value: ${GALLEON_PROVISION_LAYERS}
          - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
            value: "true"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${EAP_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        dockerfile: |-
          FROM ${EAP_RUNTIME_IMAGE_NAME}
          COPY /server $JBOSS_HOME
          USER root
          RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
          USER jboss
          CMD $JBOSS_HOME/bin/openshift-launch.sh
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
          paths:
          - destinationDir: .
            sourcePath: /s2i-output/server/
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: ${EAP_RUNTIME_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          imageOptimizationPolicy: SkipLayers
        type: Docker
      triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: dns.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
              value: ${ENABLE_GENERATE_DEFAULT_DATASOURCE}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
              initialDelaySeconds: 10
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: eap-app
  - description: 'Name of the EAP image to use, example: jboss-eap73-openshift:7.3'
    displayName: EAP Image Name
    name: EAP_IMAGE_NAME
    required: true
    value: jboss-eap73-openshift:7.3
  - description: 'Name of the EAP image to use, example: jboss-eap73-runtime-openshift:7.3'
    displayName: EAP Runtime Image Name
    name: EAP_RUNTIME_IMAGE_NAME
    required: true
    value: jboss-eap73-runtime-openshift:7.3
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-developer/jboss-eap-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: openshift
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: kitchensink
  - description: Comma separated list of Galleon layers to provision a server.
    displayName: Galleon layers
    name: GALLEON_PROVISION_LAYERS
  - description: Enable ExampleDS datasource.
    displayName: Enable ExampleDS datasource
    name: ENABLE_GENERATE_DEFAULT_DATASOURCE
    value: "false"
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Topics
    name: MQ_TOPICS
  - description: AMQ cluster admin password
    displayName: AMQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
    value: -Dcom.redhat.xpaas.repo.jbossorg
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: eap73-https-s2i
    xpaas: "7.3"
  message: 'A new JBoss EAP based application with SSL support has been created in your project. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.'
  metadata:
    annotations:
      description: An example JBoss Enterprise Application Platform application configured with secure communication using HTTPS. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/7.3.x/README.adoc
      iconClass: icon-eap
      openshift.io/display-name: JBoss EAP 7.3 (OpenJDK 8) with passthrough TLS
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: eap,javaee,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
      template.openshift.io/long-description: This template defines resources needed to develop a JBoss Enterprise Application Platform application, including a build configuration, application deployment configuration and secure communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.3"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: eap73-https-s2i
    namespace: openshift
    resourceVersion: "15149"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/eap73-https-s2i
    uid: 8a9f4c2c-9a72-4080-be75-940f1136042f
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      publishNotReadyAddresses: true
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build-artifacts:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: GALLEON_PROVISION_LAYERS
            value: ${GALLEON_PROVISION_LAYERS}
          - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
            value: "true"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${EAP_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        dockerfile: |-
          FROM ${EAP_RUNTIME_IMAGE_NAME}
          COPY /server $JBOSS_HOME
          USER root
          RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
          USER jboss
          CMD $JBOSS_HOME/bin/openshift-launch.sh
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
          paths:
          - destinationDir: .
            sourcePath: /s2i-output/server/
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: ${EAP_RUNTIME_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          imageOptimizationPolicy: SkipLayers
        type: Docker
      triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: dns.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
              value: ${ENABLE_GENERATE_DEFAULT_DATASOURCE}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
              initialDelaySeconds: 10
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: eap-app
  - description: 'Name of the EAP image to use, example: jboss-eap73-openshift:7.3'
    displayName: EAP Image Name
    name: EAP_IMAGE_NAME
    required: true
    value: jboss-eap73-openshift:7.3
  - description: 'Name of the EAP image to use, example: jboss-eap73-runtime-openshift:7.3'
    displayName: EAP Runtime Image Name
    name: EAP_RUNTIME_IMAGE_NAME
    required: true
    value: jboss-eap73-runtime-openshift:7.3
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-developer/jboss-eap-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: openshift
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: kitchensink
  - description: Comma separated list of Galleon layers to provision a server.
    displayName: Galleon layers
    name: GALLEON_PROVISION_LAYERS
  - description: Enable ExampleDS datasource.
    displayName: Enable ExampleDS datasource
    name: ENABLE_GENERATE_DEFAULT_DATASOURCE
    value: "false"
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Topics
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    required: true
    value: eap7-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: AMQ cluster admin password
    displayName: AMQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: eap7-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
    value: -Dcom.redhat.xpaas.repo.jbossorg
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: eap73-sso-s2i
    xpaas: "7.3"
  message: 'A new JBoss EAP application with SSL and SSO support has been created in your project. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.'
  metadata:
    annotations:
      description: An example JBoss Enterprise Application Platform application Single Sign-On application. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/7.3.x/README.adoc
      iconClass: icon-eap
      openshift.io/display-name: JBoss EAP 7.3 (OpenJDK 8) + Single Sign-On with passthrough TLS
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: eap,javaee,java,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
      template.openshift.io/long-description: This template defines resources needed to develop a JBoss Enterprise Application Platform based application, including a build configuration, application deployment configuration, integrated with Red Hat Single Sign-On and secure communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.3"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: eap73-sso-s2i
    namespace: openshift
    resourceVersion: "15179"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/eap73-sso-s2i
    uid: fa52dc8b-6bd2-4287-b7a3-0deb6673ada8
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      publishNotReadyAddresses: true
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build-artifacts:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        images:
        - from:
            kind: ImageStreamTag
            name: ${SSO_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          paths:
          - destinationDir: ./${CONTEXT_DIR}/extensions/sso-adapters
            sourcePath: /opt/rh/rh-sso/client/eap7/.
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: GALLEON_PROVISION_LAYERS
            value: ${GALLEON_PROVISION_LAYERS}
          - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
            value: "true"
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${EAP_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        dockerfile: |-
          FROM ${EAP_RUNTIME_IMAGE_NAME}
          COPY /server $JBOSS_HOME
          USER root
          RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
          USER jboss
          CMD $JBOSS_HOME/bin/openshift-launch.sh
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
          paths:
          - destinationDir: .
            sourcePath: /s2i-output/server/
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: ${EAP_RUNTIME_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          imageOptimizationPolicy: SkipLayers
        type: Docker
      triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: dns.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HOSTNAME_HTTP
              value: ${HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${HOSTNAME_HTTPS}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_SERVICE_URL
              value: ${SSO_SERVICE_URL}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_PUBLIC_KEY
              value: ${SSO_PUBLIC_KEY}
            - name: SSO_BEARER_ONLY
              value: ${SSO_BEARER_ONLY}
            - name: SSO_SAML_KEYSTORE_SECRET
              value: ${SSO_SAML_KEYSTORE_SECRET}
            - name: SSO_SAML_KEYSTORE
              value: ${SSO_SAML_KEYSTORE}
            - name: SSO_SAML_KEYSTORE_DIR
              value: /etc/sso-saml-secret-volume
            - name: SSO_SAML_CERTIFICATE_NAME
              value: ${SSO_SAML_CERTIFICATE_NAME}
            - name: SSO_SAML_KEYSTORE_PASSWORD
              value: ${SSO_SAML_KEYSTORE_PASSWORD}
            - name: SSO_SECRET
              value: ${SSO_SECRET}
            - name: SSO_ENABLE_CORS
              value: ${SSO_ENABLE_CORS}
            - name: SSO_SAML_LOGOUT_PAGE
              value: ${SSO_SAML_LOGOUT_PAGE}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
              value: ${ENABLE_GENERATE_DEFAULT_DATASOURCE}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
              initialDelaySeconds: 10
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/sso-saml-secret-volume
              name: sso-saml-keystore-volume
              readOnly: true
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-saml-keystore-volume
            secret:
              secretName: ${SSO_SAML_KEYSTORE_SECRET}
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: eap-app
  - description: 'Name of the EAP image to use, example: jboss-eap73-openshift:7.3'
    displayName: EAP Image Name
    name: EAP_IMAGE_NAME
    required: true
    value: jboss-eap73-openshift:7.3
  - description: 'Name of the EAP image to use, example: jboss-eap73-runtime-openshift:7.3'
    displayName: EAP Runtime Image Name
    name: EAP_RUNTIME_IMAGE_NAME
    required: true
    value: jboss-eap73-runtime-openshift:7.3
  - description: 'Name of the SSO image to use, examples: redhat-sso73-openshift:1.0'
    displayName: SSO Image Name
    name: SSO_IMAGE_NAME
    required: true
    value: redhat-sso73-openshift:1.0
  - description: Hostname for https service route (e.g. secure-eap-app-myproject.example.com).  Required for SSO-enabled applications.  This is added to the white list of redirects in the SSO server.
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
    required: true
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/redhat-developer/redhat-sso-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: 7.0.x-ose
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: Comma separated list of Galleon layers to provision a server.
    displayName: Galleon layers
    name: GALLEON_PROVISION_LAYERS
  - description: Enable ExampleDS datasource.
    displayName: Enable ExampleDS datasource
    name: ENABLE_GENERATE_DEFAULT_DATASOURCE
    value: "false"
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Topics
    name: MQ_TOPICS
  - description: AMQ cluster admin password
    displayName: AMQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    required: true
    value: eap7-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: eap7-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: The URL for the SSO server (e.g. https://secure-sso-myproject.example.com/auth).  This is the URL through which the user will be redirected when a login or token is required by the application.
    displayName: URL for SSO
    name: SSO_URL
    required: true
  - description: The URL for the internal SSO service, where secure-sso (the default) is the kubernetes service exposed by the SSO server.  This is used to create the application client(s) (see SSO_USERNAME).  This can also be the same as SSO_URL.
    displayName: URL for SSO (internal service)
    name: SSO_SERVICE_URL
    value: https://secure-sso:8443/auth
  - description: The SSO realm to which the application client(s) should be associated (e.g. demo).
    displayName: SSO Realm
    name: SSO_REALM
    required: true
  - description: The username used to access the SSO service.  This is used to create the appliction client(s) within the specified SSO realm. This should match the SSO_SERVICE_USERNAME specified through one of the sso70-* templates.
    displayName: SSO Username
    name: SSO_USERNAME
  - description: The password for the SSO service user.
    displayName: SSO Password
    name: SSO_PASSWORD
  - description: SSO Public Key. Public key is recommended to be passed into the template to avoid man-in-the-middle security vulnerability
    displayName: SSO Public Key
    name: SSO_PUBLIC_KEY
  - description: SSO Client Access Type
    displayName: SSO Bearer Only?
    name: SSO_BEARER_ONLY
  - description: List of directories from which archives will be copied into the deployment folder.  If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
    value: app-jee-jsp/target,service-jee-jaxrs/target,app-profile-jee-jsp/target,app-profile-saml-jee-jsp/target
  - description: The name of the secret containing the keystore file
    displayName: SSO SAML Keystore Secret
    name: SSO_SAML_KEYSTORE_SECRET
    value: eap7-app-secret
  - description: The name of the keystore file within the secret
    displayName: SSO SAML Keystore
    name: SSO_SAML_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: SSO SAML Certificate Name
    name: SSO_SAML_CERTIFICATE_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: SSO SAML Keystore Password
    name: SSO_SAML_KEYSTORE_PASSWORD
    value: mykeystorepass
  - description: The SSO Client Secret for Confidential Access
    displayName: SSO Client Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_SECRET
    required: true
  - description: Enable CORS for SSO applications
    displayName: Enable CORS for SSO?
    name: SSO_ENABLE_CORS
    value: "false"
  - description: SSO logout page for SAML applications
    displayName: SSO SAML Logout Page
    name: SSO_SAML_LOGOUT_PAGE
    value: /
  - description: If true SSL communication between EAP and the SSO Server will be insecure (i.e. certificate validation is disabled with curl)
    displayName: Disable SSL Validation in EAP->SSO communication
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "true"
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: eap7-app-secret
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: eap73-third-party-db-s2i
    xpaas: "7.3"
  message: A new EAP based application with SSL support has been created in your project. Please be sure to create the following secrets:"${CONFIGURATION_NAME}" containing the datasource configuration details required by the deployed application(s);  "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.
  metadata:
    annotations:
      description: An example JBoss Enterprise Application Platform application. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/7.3.x/README.adoc.
      iconClass: icon-eap
      openshift.io/display-name: JBoss EAP 7.3 (OpenJDK 8) with passthrough TLS & DB driver examples
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: eap,javaee,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
      template.openshift.io/long-description: This template defines resources needed to develop JBoss Enterprise Application Server based application, including a build configuration, application deployment configuration, using third-party DB drivers and secure communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.3"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: eap73-third-party-db-s2i
    namespace: openshift
    resourceVersion: "15225"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/eap73-third-party-db-s2i
    uid: 944ebdaf-3e4d-4b83-9c5d-8a953400ba11
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      publishNotReadyAddresses: true
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build-artifacts:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        images:
        - from:
            kind: ImageStreamTag
            name: ${EXTENSIONS_IMAGE}
            namespace: ${EXTENSIONS_IMAGE_NAMESPACE}
          paths:
          - destinationDir: ./${CONTEXT_DIR}/extensions/extras
            sourcePath: ${EXTENSIONS_INSTALL_DIR}/.
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: GALLEON_PROVISION_LAYERS
            value: ${GALLEON_PROVISION_LAYERS}
          - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
            value: "true"
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${EAP_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${EXTENSIONS_IMAGE}
            namespace: ${EXTENSIONS_IMAGE_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        dockerfile: |-
          FROM ${EAP_RUNTIME_IMAGE_NAME}
          COPY /server $JBOSS_HOME
          USER root
          RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
          USER jboss
          CMD $JBOSS_HOME/bin/openshift-launch.sh
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
          paths:
          - destinationDir: .
            sourcePath: /s2i-output/server/
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: ${EAP_RUNTIME_IMAGE_NAME}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          imageOptimizationPolicy: SkipLayers
        type: Docker
      triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: dns.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: ENV_FILES
              value: /etc/eap-environment/*
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
              value: ${ENABLE_GENERATE_DEFAULT_DATASOURCE}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
              initialDelaySeconds: 10
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-environment
              name: configuration
              readOnly: true
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: configuration
            secret:
              secretName: ${CONFIGURATION_NAME}
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: eap-app
  - description: 'Name of the EAP image to use, example: jboss-eap73-openshift:7.3'
    displayName: EAP Image Name
    name: EAP_IMAGE_NAME
    required: true
    value: jboss-eap73-openshift:7.3
  - description: 'Name of the EAP image to use, example: jboss-eap73-runtime-openshift:7.3'
    displayName: EAP Runtime Image Name
    name: EAP_RUNTIME_IMAGE_NAME
    required: true
    value: jboss-eap73-runtime-openshift:7.3
  - description: The name of the secret containing configuration properties for the datasources.
    displayName: Configuration Secret Name
    name: CONFIGURATION_NAME
    required: true
    value: eap-app-config
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.3"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: datavirt/hibernate-webapp
  - description: Comma separated list of Galleon layers to provision a server.
    displayName: Galleon layers
    name: GALLEON_PROVISION_LAYERS
  - description: Enable ExampleDS datasource.
    displayName: Enable ExampleDS datasource
    name: ENABLE_GENERATE_DEFAULT_DATASOURCE
    value: "false"
  - description: ImageStreamTag definition for the image containing the drivers and configuration, e.g. jboss-datavirt63-driver-openshift:1.1
    displayName: Drivers ImageStreamTag
    name: EXTENSIONS_IMAGE
    required: true
    value: jboss-datavirt63-driver-openshift:1.1
  - description: Namespace within which the ImageStream definition for the image containing the drivers and configuration is located.
    displayName: Drivers ImageStream Namespace
    name: EXTENSIONS_IMAGE_NAMESPACE
    required: true
    value: openshift
  - description: Full path to the directory within the extensions image where the extensions are located (e.g. install.sh, modules/, etc.)
    displayName: Drivers Image Install Directory
    name: EXTENSIONS_INSTALL_DIR
    required: true
    value: /extensions
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Queue Names
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Topic Names
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    required: true
    value: eap-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Admin password for Messaging cluster.
    displayName: Messaging Cluster Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: A secret string used to configure the GitHub webhook.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the secret containing the keystore to be used for securing JGroups communications.
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: eap-app-secret
  - description: The name of the keystore file within the JGroups secret.
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the JGroups server certificate
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
    value: secret-key
  - description: The password for the keystore and certificate
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
    value: password
  - description: Password used by JGroups to authenticate nodes in the cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: eap-cd-basic-s2i
    xpaas: "20.0"
  message: A new JBoss EAP CD based application has been created in your project.
  metadata:
    annotations:
      description: An example JBoss Enterprise Application Platform continuous delivery application. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/eap-cd/README.adoc
      iconClass: icon-eap
      openshift.io/display-name: JBoss EAP CD
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: eap,javaee,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
      template.openshift.io/long-description: This template defines resources needed to develop a JBoss Enterprise Application Platform continuous delivery based application, including a build configuration, application deployment configuration and secure communication using edge TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: "20.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: eap-cd-basic-s2i
    namespace: openshift
    resourceVersion: "15160"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/eap-cd-basic-s2i
    uid: fa9f545f-1ad3-4689-8670-0537ff53122b
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      publishNotReadyAddresses: true
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build-artifacts:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: GALLEON_PROVISION_LAYERS
            value: ${GALLEON_PROVISION_LAYERS}
          - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
            value: "true"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: eap-cd-openshift:latest
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        dockerfile: |-
          FROM eap-cd-runtime-openshift:latest
          COPY /server $JBOSS_HOME
          USER root
          RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
          USER jboss
          CMD $JBOSS_HOME/bin/openshift-launch.sh
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
          paths:
          - destinationDir: .
            sourcePath: /s2i-output/server/
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: eap-cd-runtime-openshift:latest
            namespace: ${IMAGE_STREAM_NAMESPACE}
          imageOptimizationPolicy: SkipLayers
        type: Docker
      triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: dns.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
              value: ${ENABLE_GENERATE_DEFAULT_DATASOURCE}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
              initialDelaySeconds: 10
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: eap-app
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-developer/jboss-eap-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: openshift
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: kitchensink
  - description: Comma separated list of Galleon layers to provision a server.
    displayName: Galleon layers
    name: GALLEON_PROVISION_LAYERS
  - description: Enable ExampleDS datasource.
    displayName: Enable ExampleDS datasource
    name: ENABLE_GENERATE_DEFAULT_DATASOURCE
    value: "false"
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker.
    displayName: Topics
    name: MQ_TOPICS
  - description: AMQ cluster admin password
    displayName: AMQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
    value: -Dcom.redhat.xpaas.repo.jbossorg
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: eap-cd-starter-s2i
    xpaas: "20.0"
  message: A new JBoss EAP CD based application has been created in your project.
  metadata:
    annotations:
      description: An example JBoss Enterprise Application Platform continuous delivery application. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/eap-cd/README.adoc
      iconClass: icon-eap
      openshift.io/display-name: JBoss EAP CD Starter
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: eap,javaee,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
      template.openshift.io/long-description: This template defines resources needed to develop a JBoss Enterprise Application Platform continuous delivery based application, including a build configuration, application deployment configuration and secure communication using edge TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: "20.0"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: eap-cd-starter-s2i
    namespace: openshift
    resourceVersion: "15219"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/eap-cd-starter-s2i
    uid: 9aa2fce5-1380-4a8c-b327-08f3802e9fd0
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-build-artifacts
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-build-artifacts:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: GALLEON_PROVISION_LAYERS
            value: ${GALLEON_PROVISION_LAYERS}
          - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
            value: "true"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: eap-cd-openshift:latest
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        dockerfile: |-
          FROM eap-cd-runtime-openshift:latest
          COPY /server $JBOSS_HOME
          USER root
          RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
          USER jboss
          CMD $JBOSS_HOME/bin/openshift-launch.sh
        images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
          paths:
          - destinationDir: .
            sourcePath: /s2i-output/server/
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: eap-cd-runtime-openshift:latest
            namespace: ${IMAGE_STREAM_NAMESPACE}
          imageOptimizationPolicy: SkipLayers
        type: Docker
      triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-build-artifacts:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
              value: ${ENABLE_GENERATE_DEFAULT_DATASOURCE}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
              initialDelaySeconds: 10
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: eap-app
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-developer/jboss-eap-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: openshift
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: kitchensink
  - description: Comma separated list of Galleon layers to provision a server.
    displayName: Galleon layers
    name: GALLEON_PROVISION_LAYERS
  - description: Enable ExampleDS datasource.
    displayName: Enable ExampleDS datasource
    name: ENABLE_GENERATE_DEFAULT_DATASOURCE
    value: "false"
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Controls whether exploded deployment content should be automatically deployed
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
    value: -Dcom.redhat.xpaas.repo.jbossorg
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  metadata:
    annotations:
      description: The Red Hat Fuse Console eases the discovery and management of Fuse applications deployed on OpenShift.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.7 Console
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: hawtio,java,fis,jboss-fuse
      version: "1.7"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
      template: fuse-console
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
            f:template: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: fuse77-console
    namespace: openshift
    resourceVersion: "15117"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/fuse77-console
    uid: ee73ac1b-59ed-4807-9d9d-5ed919be6dbc
  objects:
  - apiVersion: v1
    data:
      hawtconfig.json: |
        {
          "about": {
            "title": "Red Hat Fuse Console",
            "productInfo": [],
            "additionalInfo": "The Red Hat Fuse Console eases the discovery and management of Fuse applications deployed on OpenShift.",
            "copyright": "",
            "imgSrc": "../online/img/Logo-RedHat-A-Reverse-RGB.png"
          },
          "branding": {
            "appName": "Fuse Console",
            "appLogoUrl": "../online/img/Logo-Red_Hat-Fuse-A-Reverse-RGB.png"
          },
          "disabledRoutes": [
            "/camel/source",
            "/diagnostics",
            "/jvm/discover",
            "/jvm/local"
          ]
        }
    kind: ConfigMap
    metadata:
      name: ${APP_NAME}-config
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: console
        version: ${APP_VERSION}
      name: ${APP_NAME}-route
    spec:
      host: ${ROUTE_HOSTNAME}
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
      to:
        kind: Service
        name: ${APP_NAME}-service
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/serving-cert-secret-name: ${APP_NAME}-tls
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: console
        version: ${APP_VERSION}
      name: ${APP_NAME}-service
    spec:
      ports:
      - port: 443
        protocol: TCP
        targetPort: nginx
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: console
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.route: '{"kind": "OAuthRedirectReference", "apiVersion": "v1", "reference": {"kind": "Route", "name": "${APP_NAME}-route"}}'
        serviceaccounts.openshift.io/oauth-redirecturi.route: https://
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: console
        version: ${APP_VERSION}
      name: ${APP_NAME}-service-account
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: console
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: console
        version: ${APP_VERSION}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: console
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: HAWTIO_ONLINE_MODE
              value: namespace
            - name: HAWTIO_ONLINE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HAWTIO_OAUTH_CLIENT_ID
              value: ${APP_NAME}-service-account
            image: fuse7-console:${APP_VERSION}
            livenessProbe:
              httpGet:
                path: /online
                port: nginx
                scheme: HTTPS
              initialDelaySeconds: 10
              periodSeconds: 10
            name: ${APP_NAME}
            ports:
            - containerPort: 8443
              name: nginx
            readinessProbe:
              httpGet:
                path: /online
                port: nginx
                scheme: HTTPS
              initialDelaySeconds: 5
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
            volumeMounts:
            - mountPath: /opt/app-root/src/online/hawtconfig.json
              name: ${APP_NAME}-config
              subPath: hawtconfig.json
            - mountPath: /opt/app-root/src/integration/hawtconfig.json
              name: ${APP_NAME}-config
              subPath: hawtconfig.json
            - mountPath: /etc/tls/private/serving
              name: ${APP_NAME}-tls
          volumes:
          - configMap:
              name: ${APP_NAME}-config
            name: ${APP_NAME}-config
          - name: ${APP_NAME}-tls
            secret:
              secretName: ${APP_NAME}-tls
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: fuse7-console:${APP_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: fuse77-console
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    required: true
    value: "1.7"
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The externally-reachable host name that routes to the Red Hat Fuse console service
    name: ROUTE_HOSTNAME
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 32Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 200Mi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: httpd-example
    template: httpd-example
  message: |-
    The following service(s) have been created in your project: ${NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/httpd-ex/blob/master/README.md.
  metadata:
    annotations:
      description: An example Apache HTTP Server (httpd) application that serves static content. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/httpd-ex/blob/master/README.md.
      iconClass: icon-apache
      openshift.io/display-name: Apache HTTP Server
      openshift.io/documentation-url: https://github.com/sclorg/httpd-ex
      openshift.io/long-description: This template defines resources needed to develop a static application served by Apache HTTP Server (httpd), including a build configuration and application deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,httpd
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: httpd-example
    namespace: openshift
    resourceVersion: "15167"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/httpd-example
    uid: 69c65f3d-4043-400e-bb7d-9f293a6efb15
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: httpd:2.4-el8
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env: []
            image: ' '
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: httpd-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - httpd-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: httpd-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/httpd-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the httpd service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: jenkins-ephemeral
    template: jenkins-ephemeral-template
  message: A Jenkins service has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.
  metadata:
    annotations:
      description: |-
        Jenkins service, without persistent storage.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-jenkins
      openshift.io/display-name: Jenkins (Ephemeral)
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/other_images/jenkins.html
      openshift.io/long-description: This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.  The Jenkins configuration is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: instant-app,jenkins
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jenkins-ephemeral
    namespace: openshift
    resourceVersion: "15188"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jenkins-ephemeral
    uid: d2969fbb-d4f1-44d5-8c69-7d083d9bd887
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 4m
        template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
      name: ${JENKINS_SERVICE_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        config.openshift.io/inject-trusted-cabundle: "true"
      name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${JENKINS_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${JENKINS_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: OPENSHIFT_ENABLE_OAUTH
              value: ${ENABLE_OAUTH}
            - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
              value: "true"
            - name: DISABLE_ADMINISTRATIVE_MONITORS
              value: ${DISABLE_ADMINISTRATIVE_MONITORS}
            - name: KUBERNETES_MASTER
              value: https://kubernetes.default:443
            - name: KUBERNETES_TRUST_CERTIFICATES
              value: "true"
            - name: JENKINS_SERVICE_NAME
              value: ${JENKINS_SERVICE_NAME}
            - name: JNLP_SERVICE_NAME
              value: ${JNLP_SERVICE_NAME}
            - name: JENKINS_UC_INSECURE
              value: ${JENKINS_UC_INSECURE}
            - name: CASC_JENKINS_CONFIG
              value: /var/lib/jenkins/proxy.yaml
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 2
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 420
              periodSeconds: 360
              timeoutSeconds: 240
            name: jenkins
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 240
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/jenkins
              name: ${JENKINS_SERVICE_NAME}-data
            - mountPath: /etc/pki/ca-trust/source/anchors
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          serviceAccountName: ${JENKINS_SERVICE_NAME}
          volumes:
          - emptyDir:
              medium: ""
            name: ${JENKINS_SERVICE_NAME}-data
          - configMap:
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
              optional: true
            name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - jenkins
          from:
            kind: ImageStreamTag
            name: ${JENKINS_IMAGE_STREAM_TAG}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE_NAME}"}}'
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    groupNames: null
    kind: RoleBinding
    metadata:
      name: ${JENKINS_SERVICE_NAME}_edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${JNLP_SERVICE_NAME}
    spec:
      ports:
      - name: agent
        nodePort: 0
        port: 50000
        protocol: TCP
        targetPort: 50000
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${JNLP_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
        service.openshift.io/infrastructure: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      ports:
      - name: web
        nodePort: 0
        port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  parameters:
  - description: The name of the OpenShift Service exposed for the Jenkins container.
    displayName: Jenkins Service Name
    name: JENKINS_SERVICE_NAME
    value: jenkins
  - description: The name of the service used for master/slave communication.
    displayName: Jenkins JNLP Service Name
    name: JNLP_SERVICE_NAME
    value: jenkins-jnlp
  - description: Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.
    displayName: Enable OAuth in Jenkins
    name: ENABLE_OAUTH
    value: "true"
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
  - description: The OpenShift Namespace where the Jenkins ImageStream resides.
    displayName: Jenkins ImageStream Namespace
    name: NAMESPACE
    value: openshift
  - description: Whether to perform memory intensive, possibly slow, synchronization with the Jenkins Update Center on start.  If true, the Jenkins core update monitor and site warnings monitor are disabled.
    displayName: Disable memory intensive administrative monitors
    name: DISABLE_ADMINISTRATIVE_MONITORS
    value: "false"
  - description: Name of the ImageStreamTag to be used for the Jenkins image.
    displayName: Jenkins ImageStreamTag
    name: JENKINS_IMAGE_STREAM_TAG
    value: jenkins:2
  - description: Whether to allow use of a Jenkins Update Center that uses invalid certificate (self-signed, unknown CA). If any value other than 'false', certificate check is bypassed. By default, certificate check is enforced.
    displayName: Allows use of Jenkins Update Center repository with invalid SSL certificate
    name: JENKINS_UC_INSECURE
    value: "false"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: ${NAME}
    template: jenkins-ephemeral-monitored
  message: A Jenkins service (monitored via prometheus) has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.
  metadata:
    annotations:
      description: "Jenkins service, without persistent storage. \n\n To run this template extra RBAC permissions need to be provideed to the use to be able to create the ServiceMonitor Custom Resource managed by the prometheus-operator. \n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing."
      iconClass: icon-jenkins
      openshift.io/display-name: Jenkins (Ephemeral)
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/other_images/jenkins.html
      openshift.io/long-description: 'This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login and Prometheus monitoring. DISCLAIMER: User needs to have RBAC Permissions to create the Service Monitor. The Jenkins configuration is stored in non-persistent storage, so this configuration should be used for experimental purposes only.'
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: instant-app,jenkins
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: jenkins-ephemeral-monitored
    namespace: openshift
    resourceVersion: "15213"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jenkins-ephemeral-monitored
    uid: ca61e9b5-eaaa-4aed-9cf2-da0ab280a89b
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 4m
        template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
      name: ${JENKINS_SERVICE_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        config.openshift.io/inject-trusted-cabundle: "true"
      name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${JENKINS_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${JENKINS_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: OPENSHIFT_ENABLE_OAUTH
              value: ${ENABLE_OAUTH}
            - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
              value: "true"
            - name: DISABLE_ADMINISTRATIVE_MONITORS
              value: ${DISABLE_ADMINISTRATIVE_MONITORS}
            - name: KUBERNETES_MASTER
              value: https://kubernetes.default:443
            - name: KUBERNETES_TRUST_CERTIFICATES
              value: "true"
            - name: JENKINS_SERVICE_NAME
              value: ${JENKINS_SERVICE_NAME}
            - name: JNLP_SERVICE_NAME
              value: ${JNLP_SERVICE_NAME}
            - name: JENKINS_UC_INSECURE
              value: ${JENKINS_UC_INSECURE}
            - name: CASC_JENKINS_CONFIG
              value: /var/lib/jenkins/proxy.yaml
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 2
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 420
              periodSeconds: 360
              timeoutSeconds: 240
            name: jenkins
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 240
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/jenkins
              name: ${JENKINS_SERVICE_NAME}-data
            - mountPath: /etc/pki/ca-trust/source/anchors
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          serviceAccountName: ${JENKINS_SERVICE_NAME}
          volumes:
          - emptyDir:
              medium: ""
            name: ${JENKINS_SERVICE_NAME}-data
          - configMap:
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
              optional: true
            name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - jenkins
          from:
            kind: ImageStreamTag
            name: ${JENKINS_IMAGE_STREAM_TAG}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE_NAME}"}}'
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    groupNames: null
    kind: RoleBinding
    metadata:
      name: ${JENKINS_SERVICE_NAME}_edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${JNLP_SERVICE_NAME}
    spec:
      ports:
      - name: agent
        nodePort: 0
        port: 50000
        protocol: TCP
        targetPort: 50000
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${JNLP_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
        service.openshift.io/infrastructure: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      ports:
      - name: web
        nodePort: 0
        port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      labels:
        app: ${NAME}
        name: jenkins
      name: ${NAME}-monitored
    spec:
      endpoints:
      - interval: 10s
        path: /prometheus/
        port: web
      selector:
        matchLabels:
          app: ${NAME}
  parameters:
  - description: Name of the Jenkins instance to be monitored defined by the `app` label
    displayName: Name
    name: NAME
    required: true
    value: jenkins-ephemeral
  - description: The name of the OpenShift Service exposed for the Jenkins container.
    displayName: Jenkins Service Name
    name: JENKINS_SERVICE_NAME
    value: jenkins
  - description: The name of the service used for master/slave communication.
    displayName: Jenkins JNLP Service Name
    name: JNLP_SERVICE_NAME
    value: jenkins-jnlp
  - description: Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.
    displayName: Enable OAuth in Jenkins
    name: ENABLE_OAUTH
    value: "true"
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
  - description: The OpenShift Namespace where the Jenkins ImageStream resides.
    displayName: Jenkins ImageStream Namespace
    name: NAMESPACE
    value: openshift
  - description: Whether to perform memory intensive, possibly slow, synchronization with the Jenkins Update Center on start.  If true, the Jenkins core update monitor and site warnings monitor are disabled.
    displayName: Disable memory intensive administrative monitors
    name: DISABLE_ADMINISTRATIVE_MONITORS
    value: "false"
  - description: Name of the ImageStreamTag to be used for the Jenkins image.
    displayName: Jenkins ImageStreamTag
    name: JENKINS_IMAGE_STREAM_TAG
    value: jenkins:2
  - description: Whether to allow use of a Jenkins Update Center that uses invalid certificate (self-signed, unknown CA). If any value other than 'false', certificate check is bypassed. By default, certificate check is enforced.
    displayName: Allows use of Jenkins Update Center repository with invalid SSL certificate
    name: JENKINS_UC_INSECURE
    value: "false"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: jenkins-persistent
    template: jenkins-persistent-template
  message: A Jenkins service has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.
  metadata:
    annotations:
      description: |-
        Jenkins service, with persistent storage.

        NOTE: You must have persistent volumes available in your cluster to use this template.
      iconClass: icon-jenkins
      openshift.io/display-name: Jenkins
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/other_images/jenkins.html
      openshift.io/long-description: This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: instant-app,jenkins
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jenkins-persistent
    namespace: openshift
    resourceVersion: "15177"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jenkins-persistent
    uid: 60e2ad3f-c82e-46b5-9f3a-19e17f59be34
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 4m
        template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
      name: ${JENKINS_SERVICE_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        config.openshift.io/inject-trusted-cabundle: "true"
      name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${JENKINS_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${JENKINS_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${JENKINS_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: OPENSHIFT_ENABLE_OAUTH
              value: ${ENABLE_OAUTH}
            - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
              value: "true"
            - name: DISABLE_ADMINISTRATIVE_MONITORS
              value: ${DISABLE_ADMINISTRATIVE_MONITORS}
            - name: KUBERNETES_MASTER
              value: https://kubernetes.default:443
            - name: KUBERNETES_TRUST_CERTIFICATES
              value: "true"
            - name: JENKINS_SERVICE_NAME
              value: ${JENKINS_SERVICE_NAME}
            - name: JNLP_SERVICE_NAME
              value: ${JNLP_SERVICE_NAME}
            - name: ENABLE_FATAL_ERROR_LOG_FILE
              value: ${ENABLE_FATAL_ERROR_LOG_FILE}
            - name: JENKINS_UC_INSECURE
              value: ${JENKINS_UC_INSECURE}
            - name: CASC_JENKINS_CONFIG
              value: /var/lib/jenkins/proxy.yaml
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 2
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 420
              periodSeconds: 360
              timeoutSeconds: 240
            name: jenkins
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 240
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/jenkins
              name: ${JENKINS_SERVICE_NAME}-data
            - mountPath: /etc/pki/ca-trust/source/anchors
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          serviceAccountName: ${JENKINS_SERVICE_NAME}
          volumes:
          - name: ${JENKINS_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${JENKINS_SERVICE_NAME}
          - configMap:
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
              optional: true
            name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - jenkins
          from:
            kind: ImageStreamTag
            name: ${JENKINS_IMAGE_STREAM_TAG}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE_NAME}"}}'
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    groupNames: null
    kind: RoleBinding
    metadata:
      name: ${JENKINS_SERVICE_NAME}_edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${JNLP_SERVICE_NAME}
    spec:
      ports:
      - name: agent
        nodePort: 0
        port: 50000
        protocol: TCP
        targetPort: 50000
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${JNLP_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
        service.openshift.io/infrastructure: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      ports:
      - name: web
        nodePort: 0
        port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  parameters:
  - description: The name of the OpenShift Service exposed for the Jenkins container.
    displayName: Jenkins Service Name
    name: JENKINS_SERVICE_NAME
    value: jenkins
  - description: The name of the service used for master/slave communication.
    displayName: Jenkins JNLP Service Name
    name: JNLP_SERVICE_NAME
    value: jenkins-jnlp
  - description: Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.
    displayName: Enable OAuth in Jenkins
    name: ENABLE_OAUTH
    value: "true"
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The OpenShift Namespace where the Jenkins ImageStream resides.
    displayName: Jenkins ImageStream Namespace
    name: NAMESPACE
    value: openshift
  - description: Whether to perform memory intensive, possibly slow, synchronization with the Jenkins Update Center on start.  If true, the Jenkins core update monitor and site warnings monitor are disabled.
    displayName: Disable memory intensive administrative monitors
    name: DISABLE_ADMINISTRATIVE_MONITORS
    value: "false"
  - description: Name of the ImageStreamTag to be used for the Jenkins image.
    displayName: Jenkins ImageStreamTag
    name: JENKINS_IMAGE_STREAM_TAG
    value: jenkins:2
  - description: When a fatal error occurs, an error log is created with information and the state obtained at the time of the fatal error.
    displayName: Fatal Error Log File
    name: ENABLE_FATAL_ERROR_LOG_FILE
    value: "false"
  - description: Whether to allow use of a Jenkins Update Center that uses invalid certificate (self-signed, unknown CA). If any value other than 'false', certificate check is bypassed. By default, certificate check is enforced.
    displayName: Allows use of Jenkins Update Center repository with invalid SSL certificate
    name: JENKINS_UC_INSECURE
    value: "false"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: ${NAME}
    template: jenkins-persistent-monitored
  message: A Jenkins service (monitored via Prometheus) has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.
  metadata:
    annotations:
      description: "Jenkins service, with persistent storage. \n\n To run this template extra RBAC permissions need to be provideed to the use to be able to create the ServiceMonitor Custom Resource managed by the prometheus-operator. \n\nNOTE: You must have persistent volumes available in your cluster to use this template."
      iconClass: icon-jenkins
      openshift.io/display-name: Jenkins
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/other_images/jenkins.html
      openshift.io/long-description: 'This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login and Prometheus monitoring. DISCLAIMER: User needs to have RBAC Permissions to create the Service Monitor.'
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: instant-app,jenkins
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: jenkins-persistent-monitored
    namespace: openshift
    resourceVersion: "15105"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jenkins-persistent-monitored
    uid: 03b02575-9148-4b4c-bf13-4dbb23cc6248
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 4m
        template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
      name: ${JENKINS_SERVICE_NAME}
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${JENKINS_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        config.openshift.io/inject-trusted-cabundle: "true"
      name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${JENKINS_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${JENKINS_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: OPENSHIFT_ENABLE_OAUTH
              value: ${ENABLE_OAUTH}
            - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
              value: "true"
            - name: DISABLE_ADMINISTRATIVE_MONITORS
              value: ${DISABLE_ADMINISTRATIVE_MONITORS}
            - name: KUBERNETES_MASTER
              value: https://kubernetes.default:443
            - name: KUBERNETES_TRUST_CERTIFICATES
              value: "true"
            - name: JENKINS_SERVICE_NAME
              value: ${JENKINS_SERVICE_NAME}
            - name: JNLP_SERVICE_NAME
              value: ${JNLP_SERVICE_NAME}
            - name: ENABLE_FATAL_ERROR_LOG_FILE
              value: ${ENABLE_FATAL_ERROR_LOG_FILE}
            - name: JENKINS_UC_INSECURE
              value: ${JENKINS_UC_INSECURE}
            - name: CASC_JENKINS_CONFIG
              value: /var/lib/jenkins/proxy.yaml
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 2
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 420
              periodSeconds: 360
              timeoutSeconds: 240
            name: jenkins
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 240
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/jenkins
              name: ${JENKINS_SERVICE_NAME}-data
            - mountPath: /etc/pki/ca-trust/source/anchors
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          serviceAccountName: ${JENKINS_SERVICE_NAME}
          volumes:
          - name: ${JENKINS_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${JENKINS_SERVICE_NAME}
          - configMap:
              name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
              optional: true
            name: ${JENKINS_SERVICE_NAME}-trusted-ca-bundle
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - jenkins
          from:
            kind: ImageStreamTag
            name: ${JENKINS_IMAGE_STREAM_TAG}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE_NAME}"}}'
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    groupNames: null
    kind: RoleBinding
    metadata:
      name: ${JENKINS_SERVICE_NAME}_edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${JENKINS_SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${JNLP_SERVICE_NAME}
    spec:
      ports:
      - name: agent
        nodePort: 0
        port: 50000
        protocol: TCP
        targetPort: 50000
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${JNLP_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
        service.openshift.io/infrastructure: "true"
      name: ${JENKINS_SERVICE_NAME}
    spec:
      ports:
      - name: web
        nodePort: 0
        port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        name: ${JENKINS_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      labels:
        app: ${NAME}
        name: jenkins
      name: ${NAME}-monitored
    spec:
      endpoints:
      - interval: 10s
        path: /prometheus/
        port: web
      selector:
        matchLabels:
          app: ${NAME}
  parameters:
  - description: Name of the Jenkins instance to be monitored defined by the `app` label
    displayName: Name
    name: NAME
    required: true
    value: jenkins-persistent
  - description: The name of the OpenShift Service exposed for the Jenkins container.
    displayName: Jenkins Service Name
    name: JENKINS_SERVICE_NAME
    value: jenkins
  - description: The name of the service used for master/slave communication.
    displayName: Jenkins JNLP Service Name
    name: JNLP_SERVICE_NAME
    value: jenkins-jnlp
  - description: Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.
    displayName: Enable OAuth in Jenkins
    name: ENABLE_OAUTH
    value: "true"
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The OpenShift Namespace where the Jenkins ImageStream resides.
    displayName: Jenkins ImageStream Namespace
    name: NAMESPACE
    value: openshift
  - description: Whether to perform memory intensive, possibly slow, synchronization with the Jenkins Update Center on start.  If true, the Jenkins core update monitor and site warnings monitor are disabled.
    displayName: Disable memory intensive administrative monitors
    name: DISABLE_ADMINISTRATIVE_MONITORS
    value: "false"
  - description: Name of the ImageStreamTag to be used for the Jenkins image.
    displayName: Jenkins ImageStreamTag
    name: JENKINS_IMAGE_STREAM_TAG
    value: jenkins:2
  - description: When a fatal error occurs, an error log is created with information and the state obtained at the time of the fatal error.
    displayName: Fatal Error Log File
    name: ENABLE_FATAL_ERROR_LOG_FILE
    value: "false"
  - description: Whether to allow use of a Jenkins Update Center that uses invalid certificate (self-signed, unknown CA). If any value other than 'false', certificate check is bypassed. By default, certificate check is enforced.
    displayName: Allows use of Jenkins Update Center repository with invalid SSL certificate
    name: JENKINS_UC_INSECURE
    value: "false"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat7-basic-s2i
  message: A new JWS application for Apache Tomcat 7 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}.
  metadata:
    annotations:
      description: Application template for JWS applications built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 7 (no https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat7,java,jboss
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: jws31-tomcat7-basic-s2i
    namespace: openshift
    resourceVersion: "15228"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-basic-s2i
    uid: 574145be-9cae-4010-bd6b-755759cae688
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat7-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat7-https-s2i
  message: A new JWS application for Apache Tomcat 7 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application configured for use with https. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 7 (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat7,java,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 3.1 Apache Tomcat 7 based application, including a build configuration, and application deployment configuration. This also illustrations how to connect to the web applicaiton using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat7-https-s2i
    namespace: openshift
    resourceVersion: "15147"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-https-s2i
    uid: 0c6c670d-acc3-49b1-bc40-0cfcb6fdff6d
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat7-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat7-mysql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 7 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: Red Hat JBoss Web Server 3.1 Apache Tomcat 7 + MySQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat7,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 3.1 Apache Tomcat 7 based application, including a build configuration, application deployment configuration, database deployment configuration for MySQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat7-mysql-persistent-s2i
    namespace: openshift
    resourceVersion: "15159"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-mysql-persistent-s2i
    uid: 94962a78-5da1-4431-844f-28366fed0c83
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat7-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat7-mysql-s2i
  message: A new JWS application for Apache Tomcat 7 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS MySQL applications built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 7 + MySQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat7,java,jboss,hidden
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat7-mysql-s2i
    namespace: openshift
    resourceVersion: "15115"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-mysql-s2i
    uid: cbf2c493-99e9-4a46-a4a3-a3d90b950ef3
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat7-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat7-postgresql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 7 (using PostgreSQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the PostgreSQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application with a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 7 + PostgreSQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat7,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 3.1 Apache Tomcat 8 based application, including a build configuration, application deployment configuration, database deployment configuration for PostgreSQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat7-postgresql-persistent-s2i
    namespace: openshift
    resourceVersion: "15150"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-postgresql-persistent-s2i
    uid: 5077c162-0ed4-42a2-b799-9d6617ddb4bf
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat7-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/postgresqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat7-postgresql-s2i
  message: A new JWS application for Apache Tomcat 7 (using PostgreSQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the PostgreSQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS PostgreSQL applications built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 7 + PostgreSQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat7,java,jboss,hidden
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat7-postgresql-s2i
    namespace: openshift
    resourceVersion: "15164"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-postgresql-s2i
    uid: 89665a7f-4bf8-4469-b620-7368bf7c965a
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat7-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/postgresqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat8-basic-s2i
  message: A new JWS application for Apache Tomcat 8 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}.
  metadata:
    annotations:
      description: An example JBoss Web Server application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 8 (no https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat8,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 3.1 Apache Tomcat 8 based application, including a build configuration, and an application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: jws31-tomcat8-basic-s2i
    namespace: openshift
    resourceVersion: "15111"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-basic-s2i
    uid: 7979905e-2f4b-43f4-b5d4-8dbc05e47cca
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat8-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat8-https-s2i
  message: A new JWS application for Apache Tomcat 8 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 8 (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat8,java,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 3.1 Apache Tomcat 8 based application, including a build configuration, application deployment configuration, and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat8-https-s2i
    namespace: openshift
    resourceVersion: "15129"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-https-s2i
    uid: db01af6e-8b10-4d34-9a56-d28904cddf43
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat8-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat8-mysql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 8 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 8 + MySQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat8,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 3.1 Apache Tomcat 8 based application, including a build configuration, application deployment configuration, database deployment configuration for MySQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat8-mysql-persistent-s2i
    namespace: openshift
    resourceVersion: "15181"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-mysql-persistent-s2i
    uid: 269d477e-d348-4160-9b3e-d18844720839
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat8-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat8-mysql-s2i
  message: A new JWS application for Apache Tomcat 8 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS MySQL applications built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 8 + MySQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat8,java,jboss,hidden
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat8-mysql-s2i
    namespace: openshift
    resourceVersion: "15154"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-mysql-s2i
    uid: 668c8c2c-11cb-4caa-8f09-48742ed7a320
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat8-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws31: "1.4"
    template: jws31-tomcat8-postgresql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 8 (using PostgreSQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the PostgreSQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS PostgreSQL applications with persistent storage built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 3.1 Apache Tomcat 8 + PostgreSQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat8,java,jboss
      version: "1.4"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws31: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws31-tomcat8-postgresql-persistent-s2i
    namespace: openshift
    resourceVersion: "15183"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-postgresql-persistent-s2i
    uid: 0829204f-17b2-4391-9931-caf5cbcc01dc
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver31-tomcat8-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/postgresqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk8-tomcat9-basic-s2i
  message: A new JWS application for Apache Tomcat 9 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}.
  metadata:
    annotations:
      description: An example JBoss Web Server application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK8 (no https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 5.3 Apache Tomcat 9 based application, including a build configuration, and an application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws53-openjdk8-tomcat9-basic-s2i
    namespace: openshift
    resourceVersion: "15171"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-basic-s2i
    uid: f9cf4d11-2efa-4438-95ec-8a89ce8466e5
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk8-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk8-tomcat9-https-s2i
  message: A new JWS application for Apache Tomcat 9 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK8 (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 5.3 Apache Tomcat 9 based application, including a build configuration, application deployment configuration, and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: jws53-openjdk8-tomcat9-https-s2i
    namespace: openshift
    resourceVersion: "15203"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-https-s2i
    uid: 2f6d4565-083c-4054-bbf5-3679ec52cae3
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk8-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk8-tomcat9-mysql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 9 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK8 + MySQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 5.3 Apache Tomcat 9 based application, including a build configuration, application deployment configuration, database deployment configuration for MySQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws53-openjdk8-tomcat9-mysql-persistent-s2i
    namespace: openshift
    resourceVersion: "15132"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-mysql-persistent-s2i
    uid: 95de8acf-3eee-42dc-9a44-5b5f3841c07b
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk8-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk8-tomcat9-mysql-s2i
  message: A new JWS application for Apache Tomcat 9 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS MySQL applications built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK8 + MySQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss,hidden
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws53-openjdk8-tomcat9-mysql-s2i
    namespace: openshift
    resourceVersion: "15143"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-mysql-s2i
    uid: 285aa96b-486e-48bf-8c39-c0c5509d733c
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk8-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk8-tomcat9-postgresql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 9 (using PostgreSQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the PostgreSQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS PostgreSQL applications with persistent storage built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK8 + PostgreSQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws53-openjdk8-tomcat9-postgresql-persistent-s2i
    namespace: openshift
    resourceVersion: "15184"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-postgresql-persistent-s2i
    uid: 35be1649-ba9c-44f8-b22c-669d852d159c
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk8-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/postgresqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk11-tomcat9-basic-s2i
  message: A new JWS application for Apache Tomcat 9 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}.
  metadata:
    annotations:
      description: An example JBoss Web Server application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK11 (no https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 5.3 Apache Tomcat 9 based application, including a build configuration, and an application deployment configuration.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws53-openjdk11-tomcat9-basic-s2i
    namespace: openshift
    resourceVersion: "15123"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-basic-s2i
    uid: 978790f2-80d5-4713-8b26-efef3221278b
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk11-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk11-tomcat9-https-s2i
  message: A new JWS application for Apache Tomcat 9 has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK11 (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 5.3 Apache Tomcat 9 based application, including a build configuration, application deployment configuration, and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: jws53-openjdk11-tomcat9-https-s2i
    namespace: openshift
    resourceVersion: "15204"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-https-s2i
    uid: ffb9b247-5276-4b8d-a08f-c1902c328ec8
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk11-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: tomcat-websocket-chat
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk11-tomcat9-mysql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 9 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: An example JBoss Web Server application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK11+ MySQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-web-server/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat JBoss Web Server 5.3 Apache Tomcat 9 based application, including a build configuration, application deployment configuration, database deployment configuration for MySQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: jws53-openjdk11-tomcat9-mysql-persistent-s2i
    namespace: openshift
    resourceVersion: "15206"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-mysql-persistent-s2i
    uid: ea2d6d6c-921c-4bcb-9a26-0060ed533108
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk11-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk11-tomcat9-mysql-s2i
  message: A new JWS application for Apache Tomcat 9 (using MySQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS MySQL applications built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK11 + MySQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss,hidden
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: jws53-openjdk11-tomcat9-mysql-s2i
    namespace: openshift
    resourceVersion: "15217"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-mysql-s2i
    uid: 2634b346-48fb-45fb-b985-4e3500ad9e43
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk11-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    jws53: "1.0"
    template: jws53-openjdk11-tomcat9-postgresql-persistent-s2i
  message: A new persistent JWS application for Apache Tomcat 9 (using PostgreSQL) has been created in your project. The username/password for administering your JWS is ${JWS_ADMIN_USERNAME}/${JWS_ADMIN_PASSWORD}. For accessing the PostgreSQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${JWS_HTTPS_SECRET}" containing the ${JWS_HTTPS_CERTIFICATE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for JWS PostgreSQL applications with persistent storage built using S2I.
      iconClass: icon-rh-tomcat
      openshift.io/display-name: JBoss Web Server 5.3 Apache Tomcat 9 OpenJDK11 + PostgreSQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: tomcat,tomcat9,java,jboss
      version: "1.0"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:jws53: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: jws53-openjdk11-tomcat9-postgresql-persistent-s2i
    namespace: openshift
    resourceVersion: "15116"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-postgresql-persistent-s2i
    uid: 0527ef91-583c-4604-9b67-7320b8d65fe7
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-webserver53-openjdk11-tomcat9-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JWS_HTTPS_CERTIFICATE_DIR
              value: /etc/jws-secret-volume
            - name: JWS_HTTPS_CERTIFICATE
              value: ${JWS_HTTPS_CERTIFICATE}
            - name: JWS_HTTPS_CERTIFICATE_KEY
              value: ${JWS_HTTPS_CERTIFICATE_KEY}
            - name: JWS_HTTPS_CERTIFICATE_PASSWORD
              value: ${JWS_HTTPS_CERTIFICATE_PASSWORD}
            - name: JWS_ADMIN_USERNAME
              value: ${JWS_ADMIN_USERNAME}
            - name: JWS_ADMIN_PASSWORD
              value: ${JWS_ADMIN_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - curl --noproxy '*' -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName' |grep -iq 'stateName *= *STARTED'
            volumeMounts:
            - mountPath: /etc/jws-secret-volume
              name: jws-certificate-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: jws-certificate-volume
            secret:
              secretName: ${JWS_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: jws-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.2"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: todolist/todolist-jdbc
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/postgresqlDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: jboss/datasources/defaultDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the certificate files
    displayName: Secret Name
    name: JWS_HTTPS_SECRET
    required: true
    value: jws-app-secret
  - description: The name of the certificate file within the secret
    displayName: Certificate Name
    name: JWS_HTTPS_CERTIFICATE
    value: server.crt
  - description: The name of the certificate key file within the secret
    displayName: Certificate Key Name
    name: JWS_HTTPS_CERTIFICATE_KEY
    value: server.key
  - description: The certificate password
    displayName: Certificate Password
    name: JWS_HTTPS_CERTIFICATE_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: JWS Admin User
    displayName: JWS Admin Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_USERNAME
    required: true
  - description: JWS Admin Password
    displayName: JWS Admin Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JWS_ADMIN_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: mariadb-ephemeral-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Username: ${MYSQL_USER}
           Password: ${MYSQL_PASSWORD}
      Database Name: ${MYSQL_DATABASE}
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.
  metadata:
    annotations:
      description: |-
        MariaDB database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
      iconClass: icon-mariadb
      openshift.io/display-name: MariaDB (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md
      openshift.io/long-description: This template provides a standalone MariaDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,mariadb
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: mariadb-ephemeral
    namespace: openshift
    resourceVersion: "15220"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/mariadb-ephemeral
    uid: 9f38349e-ee93-4d9b-b8fa-0b6942c4d811
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-name: ${MYSQL_DATABASE}
      database-password: ${MYSQL_PASSWORD}
      database-root-password: ${MYSQL_ROOT_PASSWORD}
      database-user: ${MYSQL_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mariadb
        port: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-root-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 30
              timeoutSeconds: 1
            name: mariadb
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mariadb
          from:
            kind: ImageStreamTag
            name: mariadb:${MARIADB_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mariadb
  - description: Username for MariaDB user that will be used for accessing the database.
    displayName: MariaDB Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: MYSQL_USER
    required: true
  - description: Password for the MariaDB connection user.
    displayName: MariaDB Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_PASSWORD
    required: true
  - description: Password for the MariaDB root user.
    displayName: MariaDB root Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_ROOT_PASSWORD
    required: true
  - description: Name of the MariaDB database accessed.
    displayName: MariaDB Database Name
    name: MYSQL_DATABASE
    required: true
    value: sampledb
  - description: Version of MariaDB image to be used (10.3-el7, 10.3-el8, or latest).
    displayName: Version of MariaDB Image
    name: MARIADB_VERSION
    required: true
    value: 10.3-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: mariadb-persistent-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Username: ${MYSQL_USER}
           Password: ${MYSQL_PASSWORD}
      Database Name: ${MYSQL_DATABASE}
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.
  metadata:
    annotations:
      description: |-
        MariaDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.

        NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
      iconClass: icon-mariadb
      openshift.io/display-name: MariaDB
      openshift.io/documentation-url: https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md
      openshift.io/long-description: This template provides a standalone MariaDB server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,mariadb
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: mariadb-persistent
    namespace: openshift
    resourceVersion: "15145"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/mariadb-persistent
    uid: de252497-5637-46ab-abc3-ae2618730334
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-name: ${MYSQL_DATABASE}
      database-password: ${MYSQL_PASSWORD}
      database-root-password: ${MYSQL_ROOT_PASSWORD}
      database-user: ${MYSQL_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mariadb
        port: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-root-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 30
              timeoutSeconds: 1
            name: mariadb
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mariadb
          from:
            kind: ImageStreamTag
            name: mariadb:${MARIADB_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mariadb
  - description: Username for MariaDB user that will be used for accessing the database.
    displayName: MariaDB Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: MYSQL_USER
    required: true
  - description: Password for the MariaDB connection user.
    displayName: MariaDB Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_PASSWORD
    required: true
  - description: Password for the MariaDB root user.
    displayName: MariaDB root Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_ROOT_PASSWORD
    required: true
  - description: Name of the MariaDB database accessed.
    displayName: MariaDB Database Name
    name: MYSQL_DATABASE
    required: true
    value: sampledb
  - description: Version of MariaDB image to be used (10.3-el7, 10.3-el8, or latest).
    displayName: Version of MariaDB Image
    name: MARIADB_VERSION
    required: true
    value: 10.3-el8
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: mysql-ephemeral-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Username: ${MYSQL_USER}
           Password: ${MYSQL_PASSWORD}
      Database Name: ${MYSQL_DATABASE}
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
  metadata:
    annotations:
      description: |-
        MySQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
      iconClass: icon-mysql-database
      openshift.io/display-name: MySQL (Ephemeral)
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/mysql.html
      openshift.io/long-description: This template provides a standalone MySQL server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,mysql
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: mysql-ephemeral
    namespace: openshift
    resourceVersion: "15226"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/mysql-ephemeral
    uid: b97dcf96-443d-4759-ad1e-18aaeb8bba5d
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-name: ${MYSQL_DATABASE}
      database-password: ${MYSQL_PASSWORD}
      database-root-password: ${MYSQL_ROOT_PASSWORD}
      database-user: ${MYSQL_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mysql
        nodePort: 0
        port: 3306
        protocol: TCP
        targetPort: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-root-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 30
              timeoutSeconds: 1
            name: mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_VERSION}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
    status: {}
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mysql
  - description: Username for MySQL user that will be used for accessing the database.
    displayName: MySQL Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: MYSQL_USER
    required: true
  - description: Password for the MySQL connection user.
    displayName: MySQL Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_PASSWORD
    required: true
  - description: Password for the MySQL root user.
    displayName: MySQL root user Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_ROOT_PASSWORD
    required: true
  - description: Name of the MySQL database accessed.
    displayName: MySQL Database Name
    name: MYSQL_DATABASE
    required: true
    value: sampledb
  - description: Version of MySQL image to be used (8.0-el7, 8.0-el8, or latest).
    displayName: Version of MySQL Image
    name: MYSQL_VERSION
    required: true
    value: 8.0-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: mysql-persistent-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Username: ${MYSQL_USER}
           Password: ${MYSQL_PASSWORD}
      Database Name: ${MYSQL_DATABASE}
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
  metadata:
    annotations:
      description: |-
        MySQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.

        NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
      iconClass: icon-mysql-database
      openshift.io/display-name: MySQL
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/mysql.html
      openshift.io/long-description: This template provides a standalone MySQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,mysql
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: mysql-persistent
    namespace: openshift
    resourceVersion: "15209"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/mysql-persistent
    uid: a56167a6-0942-4ca2-90a9-91647007a205
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-name: ${MYSQL_DATABASE}
      database-password: ${MYSQL_PASSWORD}
      database-root-password: ${MYSQL_ROOT_PASSWORD}
      database-user: ${MYSQL_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mysql
        port: 3306
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-root-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 30
              timeoutSeconds: 1
            name: mysql
            ports:
            - containerPort: 3306
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mysql
  - description: Username for MySQL user that will be used for accessing the database.
    displayName: MySQL Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: MYSQL_USER
    required: true
  - description: Password for the MySQL connection user.
    displayName: MySQL Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_PASSWORD
    required: true
  - description: Password for the MySQL root user.
    displayName: MySQL root user Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: MYSQL_ROOT_PASSWORD
    required: true
  - description: Name of the MySQL database accessed.
    displayName: MySQL Database Name
    name: MYSQL_DATABASE
    required: true
    value: sampledb
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Version of MySQL image to be used (8.0-el7, 8.0-el8, or latest).
    displayName: Version of MySQL Image
    name: MYSQL_VERSION
    required: true
    value: 8.0-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: nginx-example
  message: |-
    The following service(s) have been created in your project: ${NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nginx-ex/blob/master/README.md.
  metadata:
    annotations:
      description: An example Nginx HTTP server and a reverse proxy (nginx) application that serves static content. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nginx-ex/blob/master/README.md.
      iconClass: icon-nginx
      openshift.io/display-name: Nginx HTTP server and a reverse proxy
      openshift.io/documentation-url: https://github.com/sclorg/nginx-ex
      openshift.io/long-description: This template defines resources needed to develop a static application served by Nginx HTTP server and a reverse proxy (nginx), including a build configuration and application deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,nginx
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: nginx-example
    namespace: openshift
    resourceVersion: "15113"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/nginx-example
    uid: a41c6ba0-c9c5-4238-bbd3-59cda68dd51a
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: nginx:${NGINX_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env: []
            image: ' '
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: nginx-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - nginx-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: nginx-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of NGINX image to be used (1.16-el8 by default).
    displayName: NGINX Version
    name: NGINX_VERSION
    required: true
    value: 1.16-el8
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/nginx-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the nginx service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: nodejs-mongodb-example
    template: nodejs-mongodb-example
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nodejs-ex/blob/master/README.md.
  metadata:
    annotations:
      description: |-
        An example Node.js application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nodejs-ex/blob/master/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-nodejs
      openshift.io/display-name: Node.js + MongoDB (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/nodejs-ex
      openshift.io/long-description: This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,nodejs,hidden
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: nodejs-mongodb-example
    namespace: openshift
    resourceVersion: "15169"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/nodejs-mongodb-example
    uid: 9ed64262-e77b-4afa-bf15-4252b514705c
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-admin-password: ${DATABASE_ADMIN_PASSWORD}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: npm test
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: NPM_MIRROR
            value: ${NPM_MIRROR}
          from:
            kind: ImageStreamTag
            name: nodejs:${NODEJS_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MONGODB_DATABASE
              value: ${DATABASE_NAME}
            - name: MONGODB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: ${NAME}
            image: ' '
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: nodejs-mongodb-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - nodejs-mongodb-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: mongodb
        port: 27017
        targetPort: 27017
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: MONGODB_DATABASE
              value: ${DATABASE_NAME}
            - name: MONGODB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: ${NAME}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 27017
              timeoutSeconds: 1
            name: mongodb
            ports:
            - containerPort: 27017
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="quit()"
              initialDelaySeconds: 3
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_MONGODB_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mongodb/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mongodb
          from:
            kind: ImageStreamTag
            name: mongodb:${MONGODB_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: nodejs-mongodb-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of NodeJS image to be used (10, 12, or latest).
    displayName: Version of NodeJS Image
    name: NODEJS_VERSION
    required: true
    value: "12"
  - description: Version of MongoDB image to be used (3.6 or latest).
    displayName: Version of MongoDB Image
    name: MONGODB_VERSION
    required: true
    value: "3.6"
  - description: Maximum amount of memory the Node.js container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the MongoDB container can use.
    displayName: Memory Limit (MongoDB)
    name: MEMORY_MONGODB_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/nodejs-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mongodb
  - description: Username for MongoDB user that will be used for accessing the database.
    displayName: MongoDB Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - description: Password for the MongoDB user.
    displayName: MongoDB Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: sampledb
  - description: Password for the database admin user.
    displayName: Database Administrator Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_ADMIN_PASSWORD
  - description: The custom NPM mirror URL
    displayName: Custom NPM Mirror URL
    name: NPM_MIRROR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: nodejs-postgresql-example
    template: nodejs-postgresql-example
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/nodeshift-starters/nodejs-rest-http-crud/blob/master/README.md.
  metadata:
    annotations:
      description: |-
        An example Node.js application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/nodeshift-starters/nodejs-rest-http-crud/blob/master/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-nodejs
      openshift.io/display-name: Node.js + PostgreSQL (Ephemeral)
      openshift.io/documentation-url: https://github.com/nodeshift-starters/nodejs-rest-http-crud
      openshift.io/long-description: This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,nodejs
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: nodejs-postgresql-example
    namespace: openshift
    resourceVersion: "15125"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/nodejs-postgresql-example
    uid: 9002a4fb-69f5-4e76-8524-357bb23443ed
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-admin-password: ${DATABASE_ADMIN_PASSWORD}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit: {}
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: NPM_MIRROR
            value: ${NPM_MIRROR}
          from:
            kind: ImageStreamTag
            name: nodejs:${NODEJS_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app.openshift.io/runtime: nodejs
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app.openshift.io/runtime: nodejs
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: ${NAME}
            image: ' '
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: nodejs-postgresql-example
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - nodejs-postgresql-example
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: ${NAME}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: postgresql
            ports:
            - containerPort: 5432
            resources:
              limits:
                memory: ${MEMORY_POSTGRESQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: nodejs-postgresql-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of NodeJS image to be used (10-ubi8, 12-ubi8, or latest).
    displayName: Version of NodeJS Image
    name: NODEJS_VERSION
    required: true
    value: 12-ubi8
  - description: Version of PostgreSQL image to be used (12-el8, or latest).
    displayName: Version of PostgreSQL Image
    name: POSTGRESQL_VERSION
    required: true
    value: 12-el8
  - description: Maximum amount of memory the Node.js container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: Maximum amount of memory the PostgreSQL container can use.
    displayName: Memory Limit (PostgreSQL)
    name: MEMORY_POSTGRESQL_LIMIT
    required: true
    value: 256Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/nodeshift-starters/nodejs-rest-http-crud.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - description: Password for the PostgreSQL user.
    displayName: PostgreSQL Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: my_data
  - description: Password for the database admin user.
    displayName: Database Administrator Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_ADMIN_PASSWORD
  - description: The custom NPM mirror URL
    displayName: Custom NPM Mirror URL
    name: NPM_MIRROR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: nodejs-postgresql-persistent
    template: nodejs-postgresql-persistent
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/nodeshift-starters/nodejs-rest-http-crud/blob/master/README.md.
  metadata:
    annotations:
      description: An example Node.js application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/nodeshift-starters/nodejs-rest-http-crud/blob/master/README.md.
      iconClass: icon-nodejs
      openshift.io/display-name: Node.js + PostgreSQL
      openshift.io/documentation-url: https://github.com/nodeshift-starters/nodejs-rest-http-crud
      openshift.io/long-description: This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,nodejs
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: nodejs-postgresql-persistent
    namespace: openshift
    resourceVersion: "15126"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/nodejs-postgresql-persistent
    uid: 6e7149ee-d51f-49f8-aac1-d733b7387241
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      database-admin-password: ${DATABASE_ADMIN_PASSWORD}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit: {}
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: NPM_MIRROR
            value: ${NPM_MIRROR}
          from:
            kind: ImageStreamTag
            name: nodejs:${NODEJS_VERSION}
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app.openshift.io/runtime: nodejs
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app.openshift.io/runtime: nodejs
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: ${NAME}
            image: ' '
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: nodejs-postgresql-persistent
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - nodejs-postgresql-persistent
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-admin-password
                  name: ${NAME}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: postgresql
            ports:
            - containerPort: 5432
            resources:
              limits:
                memory: ${MEMORY_POSTGRESQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_VERSION}
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: nodejs-postgresql-persistent
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Version of NodeJS image to be used (10-ubi8, 12-ubi8, or latest).
    displayName: Version of NodeJS Image
    name: NODEJS_VERSION
    required: true
    value: 12-ubi8
  - description: Version of PostgreSQL image to be used (12-el8, or latest).
    displayName: Version of PostgreSQL Image
    name: POSTGRESQL_VERSION
    required: true
    value: 12-el8
  - description: Maximum amount of memory the Node.js container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: Maximum amount of memory the PostgreSQL container can use.
    displayName: Memory Limit (PostgreSQL)
    name: MEMORY_POSTGRESQL_LIMIT
    required: true
    value: 256Mi
  - description: Volume space available for data, e.g. 512Mi, 2Gi
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/nodeshift-starters/nodejs-rest-http-crud.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - description: Password for the PostgreSQL user.
    displayName: PostgreSQL Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: my_data
  - description: Password for the database admin user.
    displayName: Database Administrator Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_ADMIN_PASSWORD
  - description: The custom NPM mirror URL
    displayName: Custom NPM Mirror URL
    name: NPM_MIRROR
- apiVersion: template.openshift.io/v1
  kind: Template
  message: A new java application has been created in your project.
  metadata:
    annotations:
      description: An example Java application using OpenJDK. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-rh-openjdk
      openshift.io/display-name: OpenJDK
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: java
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat OpenJDK Java based application.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
      template: openjdk-web-basic-s2i
      xpaas: 1.4.17
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
            f:template: {}
            f:xpaas: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: openjdk-web-basic-s2i
    namespace: openshift
    resourceVersion: "15165"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/openjdk-web-basic-s2i
    uid: e6c8080c-adac-42ba-8c24-348fd46614ee
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The application's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          forcePull: true
          from:
            kind: ImageStreamTag
            name: java:${JAVA_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env: []
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: openjdk-app
  - description: The version of Java to use, e.g. 8, 11, latest. (Corresponds to the 'java' ImageStream tag.)
    displayName: Java Version
    name: JAVA_IMAGE_STREAM_TAG
    required: true
    value: latest
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: master
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: undertow-servlet
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: postgresql-ephemeral-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Username: ${POSTGRESQL_USER}
           Password: ${POSTGRESQL_PASSWORD}
      Database Name: ${POSTGRESQL_DATABASE}
     Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.
  metadata:
    annotations:
      description: |-
        PostgreSQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
      iconClass: icon-postgresql
      openshift.io/display-name: PostgreSQL (Ephemeral)
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/postgresql.html
      openshift.io/long-description: This template provides a standalone PostgreSQL server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,postgresql
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: postgresql-ephemeral
    namespace: openshift
    resourceVersion: "15186"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/postgresql-ephemeral
    uid: 73f2bb78-c6a1-45f4-9a48-a1cd0164e0da
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-name: ${POSTGRESQL_DATABASE}
      database-password: ${POSTGRESQL_PASSWORD}
      database-user: ${POSTGRESQL_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        nodePort: 0
        port: 5432
        protocol: TCP
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_VERSION}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
    status: {}
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: POSTGRESQL_USER
    required: true
  - description: Password for the PostgreSQL connection user.
    displayName: PostgreSQL Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: POSTGRESQL_PASSWORD
    required: true
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    required: true
    value: sampledb
  - description: Version of PostgreSQL image to be used (10-el7, 10-el8, or latest).
    displayName: Version of PostgreSQL Image
    name: POSTGRESQL_VERSION
    required: true
    value: 10-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: postgresql-persistent-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Username: ${POSTGRESQL_USER}
           Password: ${POSTGRESQL_PASSWORD}
      Database Name: ${POSTGRESQL_DATABASE}
     Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.
  metadata:
    annotations:
      description: |-
        PostgreSQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.

        NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
      iconClass: icon-postgresql
      openshift.io/display-name: PostgreSQL
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/postgresql.html
      openshift.io/long-description: This template provides a standalone PostgreSQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,postgresql
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: postgresql-persistent
    namespace: openshift
    resourceVersion: "15170"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/postgresql-persistent
    uid: 8a705b0c-d155-48f4-9df3-217ee6f76402
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-name: ${POSTGRESQL_DATABASE}
      database-password: ${POSTGRESQL_PASSWORD}
      database-user: ${POSTGRESQL_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        nodePort: 0
        port: 5432
        protocol: TCP
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_VERSION}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
    status: {}
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: POSTGRESQL_USER
    required: true
  - description: Password for the PostgreSQL connection user.
    displayName: PostgreSQL Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: POSTGRESQL_PASSWORD
    required: true
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    required: true
    value: sampledb
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Version of PostgreSQL image to be used (10-el7, 10-el8, or latest).
    displayName: Version of PostgreSQL Image
    name: POSTGRESQL_VERSION
    required: true
    value: 10-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-amq-mysql-persistent-s2i
    xpaas: 1.4.17
  message: A new persistent BPMS application (using MySQL and A-MQ) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. And for the A-MQ service use the credentials ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with A-MQ and a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + A-MQ + MySQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, Red Hat A-MQ for messaging broker, database deployment configuration for MySQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: processserver64-amq-mysql-persistent-s2i
    namespace: openshift
    resourceVersion: "15156"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-amq-mysql-persistent-s2i
    uid: 59f9a58b-9339-4108-bb8f-8ccf5365dd6b
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_JMS_QUEUES_REQUEST
              value: ${KIE_SERVER_JMS_QUEUES_REQUEST}
            - name: KIE_SERVER_JMS_QUEUES_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUES_RESPONSE}
            - name: KIE_SERVER_EXECUTOR_JMS_QUEUE
              value: ${KIE_SERVER_EXECUTOR_JMS_QUEUE}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq=MQ
            - name: MQ_JNDI
              value: ${MQ_JNDI}
            - name: MQ_USERNAME
              value: ${MQ_USERNAME}
            - name: MQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: MQ_PROTOCOL
              value: tcp
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB,${APPLICATION_NAME}-mysql=QUARTZ
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JNDI
              value: ${DB_JNDI}NotManaged
            - name: QUARTZ_USERNAME
              value: ${DB_USERNAME}
            - name: QUARTZ_PASSWORD
              value: ${DB_PASSWORD}
            - name: QUARTZ_DATABASE
              value: ${DB_DATABASE}
            - name: QUARTZ_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: QUARTZ_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: QUARTZ_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JTA
              value: "false"
            - name: QUARTZ_NONXA
              value: "true"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_SPLIT
              value: ${AMQ_SPLIT}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: JNDI name of request queue for JMS.
    displayName: KIE Server JMS Queues Request
    name: KIE_SERVER_JMS_QUEUES_REQUEST
    value: queue/KIE.SERVER.REQUEST
  - description: JNDI name of response queue for JMS.
    displayName: KIE Server JMS Queues Response
    name: KIE_SERVER_JMS_QUEUES_RESPONSE
    value: queue/KIE.SERVER.RESPONSE
  - description: JNDI name of executor queue for JMS.
    displayName: KIE Server Executor JMS Queue
    name: KIE_SERVER_EXECUTOR_JMS_QUEUE
    value: queue/KIE.SERVER.EXECUTOR
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.MySQL5Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: JNDI name for connection factory used by applications to connect to the broker, e.g. java:/JmsXA
    displayName: JMS Connection Factory JNDI Name
    name: MQ_JNDI
    value: java:/JmsXA
  - description: Split the data directory for each node in a mesh.
    displayName: Split Data?
    name: AMQ_SPLIT
    value: "false"
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Queues
    name: MQ_QUEUES
    value: KIE.SERVER.REQUEST,KIE.SERVER.RESPONSE,KIE.SERVER.EXECUTOR
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Topics
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: The A-MQ storage usage limit
    displayName: A-MQ Storage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-amq-mysql-s2i
    xpaas: 1.4.17
  message: A new BPMS application (using MySQL and A-MQ) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. And for the A-MQ service use the credentials ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with A-MQ and a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + A-MQ + MySQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss,hidden
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, Red Hat A-MQ for messaging broker, database deployment configuration for MySQL using ephemeral (temporary) storage and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: processserver64-amq-mysql-s2i
    namespace: openshift
    resourceVersion: "15157"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-amq-mysql-s2i
    uid: 829a6516-23c0-4128-83fa-b6443ad3f4e6
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_JMS_QUEUES_REQUEST
              value: ${KIE_SERVER_JMS_QUEUES_REQUEST}
            - name: KIE_SERVER_JMS_QUEUES_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUES_RESPONSE}
            - name: KIE_SERVER_EXECUTOR_JMS_QUEUE
              value: ${KIE_SERVER_EXECUTOR_JMS_QUEUE}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq=MQ
            - name: MQ_JNDI
              value: ${MQ_JNDI}
            - name: MQ_USERNAME
              value: ${MQ_USERNAME}
            - name: MQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: MQ_PROTOCOL
              value: tcp
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: JNDI name of request queue for JMS.
    displayName: KIE Server JMS Queues Request
    name: KIE_SERVER_JMS_QUEUES_REQUEST
    value: queue/KIE.SERVER.REQUEST
  - description: JNDI name of response queue for JMS.
    displayName: KIE Server JMS Queues Response
    name: KIE_SERVER_JMS_QUEUES_RESPONSE
    value: queue/KIE.SERVER.RESPONSE
  - description: JNDI name of executor queue for JMS.
    displayName: KIE Server Executor JMS Queue
    name: KIE_SERVER_EXECUTOR_JMS_QUEUE
    value: queue/KIE.SERVER.EXECUTOR
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.MySQL5Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: JNDI name for connection factory used by applications to connect to the broker, e.g. java:/JmsXA
    displayName: JMS Connection Factory JNDI Name
    name: MQ_JNDI
    value: java:/JmsXA
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Queues
    name: MQ_QUEUES
    value: KIE.SERVER.REQUEST,KIE.SERVER.RESPONSE,KIE.SERVER.EXECUTOR
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Topics
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: The A-MQ storage usage limit
    displayName: A-MQ Storage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-amq-postgresql-persistent-s2i
    xpaas: 1.4.17
  message: A new persistent BPMS application (using PostgreSQL and A-MQ) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. And for the A-MQ service use the credentials ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with A-MQ and a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + A-MQ + PostgreSQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, Red Hat A-MQ for messaging broker, database deployment configuration for PostgreSQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: processserver64-amq-postgresql-persistent-s2i
    namespace: openshift
    resourceVersion: "15227"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-amq-postgresql-persistent-s2i
    uid: bf1febf7-5134-4192-957c-74db013b9d95
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_JMS_QUEUES_REQUEST
              value: ${KIE_SERVER_JMS_QUEUES_REQUEST}
            - name: KIE_SERVER_JMS_QUEUES_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUES_RESPONSE}
            - name: KIE_SERVER_EXECUTOR_JMS_QUEUE
              value: ${KIE_SERVER_EXECUTOR_JMS_QUEUE}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq=MQ
            - name: MQ_JNDI
              value: ${MQ_JNDI}
            - name: MQ_USERNAME
              value: ${MQ_USERNAME}
            - name: MQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: MQ_PROTOCOL
              value: tcp
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB,${APPLICATION_NAME}-postgresql=QUARTZ
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JNDI
              value: ${DB_JNDI}NotManaged
            - name: QUARTZ_USERNAME
              value: ${DB_USERNAME}
            - name: QUARTZ_PASSWORD
              value: ${DB_PASSWORD}
            - name: QUARTZ_DATABASE
              value: ${DB_DATABASE}
            - name: QUARTZ_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: QUARTZ_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: QUARTZ_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JTA
              value: "false"
            - name: QUARTZ_NONXA
              value: "true"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_SPLIT
              value: ${AMQ_SPLIT}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: JNDI name of request queue for JMS.
    displayName: KIE Server JMS Queues Request
    name: KIE_SERVER_JMS_QUEUES_REQUEST
    value: queue/KIE.SERVER.REQUEST
  - description: JNDI name of response queue for JMS.
    displayName: KIE Server JMS Queues Response
    name: KIE_SERVER_JMS_QUEUES_RESPONSE
    value: queue/KIE.SERVER.RESPONSE
  - description: JNDI name of executor queue for JMS.
    displayName: KIE Server Executor JMS Queue
    name: KIE_SERVER_EXECUTOR_JMS_QUEUE
    value: queue/KIE.SERVER.EXECUTOR
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.PostgreSQL82Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: JNDI name for connection factory used by applications to connect to the broker, e.g. java:/JmsXA
    displayName: JMS Connection Factory JNDI Name
    name: MQ_JNDI
    value: java:/JmsXA
  - description: Split the data directory for each node in a mesh.
    displayName: Split Data?
    name: AMQ_SPLIT
    value: "false"
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Queues
    name: MQ_QUEUES
    value: KIE.SERVER.REQUEST,KIE.SERVER.RESPONSE,KIE.SERVER.EXECUTOR
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Topics
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: The A-MQ storage usage limit
    displayName: A-MQ Storage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-amq-postgresql-s2i
    xpaas: 1.4.17
  message: A new BPMS application (using PostgreSQL and A-MQ) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. And for the A-MQ service use the credentials ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with A-MQ and a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + A-MQ + PostgreSQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss,hidden
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, Red Hat A-MQ for messaging broker, database deployment configuration for PostgreSQL using ephemeral (temporary) storage and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: processserver64-amq-postgresql-s2i
    namespace: openshift
    resourceVersion: "15127"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-amq-postgresql-s2i
    uid: ec2768f3-c11b-4f67-9964-34277dd0e737
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Supports node discovery for mesh formation.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq-mesh
    spec:
      clusterIP: None
      ports:
      - name: mesh
        port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_JMS_QUEUES_REQUEST
              value: ${KIE_SERVER_JMS_QUEUES_REQUEST}
            - name: KIE_SERVER_JMS_QUEUES_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUES_RESPONSE}
            - name: KIE_SERVER_EXECUTOR_JMS_QUEUE
              value: ${KIE_SERVER_EXECUTOR_JMS_QUEUE}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq=MQ
            - name: MQ_JNDI
              value: ${MQ_JNDI}
            - name: MQ_USERNAME
              value: ${MQ_USERNAME}
            - name: MQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: MQ_PROTOCOL
              value: tcp
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${MQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: AMQ_TRANSPORTS
              value: ${MQ_PROTOCOL}
            - name: AMQ_MESH_DISCOVERY_TYPE
              value: ${AMQ_MESH_DISCOVERY_TYPE}
            - name: AMQ_MESH_SERVICE_NAME
              value: ${APPLICATION_NAME}-amq-mesh
            - name: AMQ_MESH_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_STORAGE_USAGE_LIMIT
              value: ${AMQ_STORAGE_USAGE_LIMIT}
            image: jboss-amq-63
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: tcp
              protocol: TCP
            - containerPort: 61617
              name: tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: jboss-amq-63:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: JNDI name of request queue for JMS.
    displayName: KIE Server JMS Queues Request
    name: KIE_SERVER_JMS_QUEUES_REQUEST
    value: queue/KIE.SERVER.REQUEST
  - description: JNDI name of response queue for JMS.
    displayName: KIE Server JMS Queues Response
    name: KIE_SERVER_JMS_QUEUES_RESPONSE
    value: queue/KIE.SERVER.RESPONSE
  - description: JNDI name of executor queue for JMS.
    displayName: KIE Server Executor JMS Queue
    name: KIE_SERVER_EXECUTOR_JMS_QUEUE
    value: queue/KIE.SERVER.EXECUTOR
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.PostgreSQL82Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: JNDI name for connection factory used by applications to connect to the broker, e.g. java:/JmsXA
    displayName: JMS Connection Factory JNDI Name
    name: MQ_JNDI
    value: java:/JmsXA
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: A-MQ Protocols
    name: MQ_PROTOCOL
    value: openwire
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Queues
    name: MQ_QUEUES
    value: KIE.SERVER.REQUEST,KIE.SERVER.RESPONSE,KIE.SERVER.EXECUTOR
  - description: Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP.
    displayName: Topics
    name: MQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: MQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: A-MQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_PASSWORD
  - description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
    displayName: A-MQ Mesh Discovery Type
    name: AMQ_MESH_DISCOVERY_TYPE
    value: dns
  - description: The A-MQ storage usage limit
    displayName: A-MQ Storage Limit
    name: AMQ_STORAGE_USAGE_LIMIT
    value: 100 gb
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-basic-s2i
    xpaas: 1.4.17
  message: A new BPMS application has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}.
  metadata:
    annotations:
      description: An example BPM Suite application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server (no https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration and insecure communication using http.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: processserver64-basic-s2i
    namespace: openshift
    resourceVersion: "15173"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-basic-s2i
    uid: 25fd9751-6a15-4b3b-8565-878bd89f5359
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-externaldb-s2i
    xpaas: 1.4.17
  message: A new BPMS application has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with a external database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + External Database
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss,hidden
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, database deployment configuration for external database and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: processserver64-externaldb-s2i
    namespace: openshift
    resourceVersion: "15222"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-externaldb-s2i
    uid: a0b96ce3-b394-40a1-8085-4af422383377
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        images:
        - from:
            kind: ImageStreamTag
            name: ${EXTENSIONS_IMAGE}
            namespace: ${EXTENSIONS_IMAGE_NAMESPACE}
          paths:
          - destinationDir: ./${CONTEXT_DIR}/extensions/extras
            sourcePath: ${EXTENSIONS_INSTALL_DIR}/.
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${EXTENSIONS_IMAGE}
            namespace: ${EXTENSIONS_IMAGE_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: KIE_SERVER_PERSISTENCE_SCHEMA
              value: ${KIE_SERVER_PERSISTENCE_SCHEMA}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${BPMS_JNDI}
            - name: DATASOURCES
              value: BPMS,QUARTZ
            - name: BPMS_JNDI
              value: ${BPMS_JNDI}
            - name: BPMS_SERVICE_HOST
              value: ${BPMS_SERVICE_HOST}
            - name: BPMS_SERVICE_PORT
              value: ${BPMS_SERVICE_PORT}
            - name: BPMS_NONXA
              value: ${BPMS_NONXA}
            - name: BPMS_URL
              value: ${BPMS_CONNECTION_URL}
            - name: BPMS_XA_CONNECTION_PROPERTY_URL
              value: ${BPMS_CONNECTION_URL}
            - name: BPMS_DRIVER
              value: ${BPMS_DRIVER}
            - name: BPMS_DATABASE
              value: ${BPMS_DATABASE}
            - name: BPMS_USERNAME
              value: ${BPMS_DATABASE_USERNAME}
            - name: BPMS_PASSWORD
              value: ${BPMS_DATABASE_PASSWORD}
            - name: BPMS_MIN_POOL_SIZE
              value: ${BPMS_MIN_POOL_SIZE}
            - name: BPMS_MAX_POOL_SIZE
              value: ${BPMS_MAX_POOL_SIZE}
            - name: BPMS_CONNECTION_CHECKER
              value: ${BPMS_CONNECTION_CHECKER}
            - name: BPMS_EXCEPTION_SORTER
              value: ${BPMS_EXCEPTION_SORTER}
            - name: BPMS_BACKGROUND_VALIDATION
              value: ${BPMS_BACKGROUND_VALIDATION}
            - name: BPMS_BACKGROUND_VALIDATION_MILLIS
              value: ${BPMS_BACKGROUND_VALIDATION_MILLIS}
            - name: QUARTZ_JNDI
              value: ${BPMS_JNDI}NotManaged
            - name: QUARTZ_SERVICE_HOST
              value: ${BPMS_SERVICE_HOST}
            - name: QUARTZ_SERVICE_PORT
              value: ${BPMS_SERVICE_PORT}
            - name: QUARTZ_URL
              value: ${BPMS_CONNECTION_URL}
            - name: QUARTZ_DRIVER
              value: ${BPMS_DRIVER}
            - name: QUARTZ_DRIVER_MODULE
              value: ${QUARTZ_DRIVER_MODULE}
            - name: QUARTZ_DATABASE
              value: ${BPMS_DATABASE}
            - name: QUARTZ_USERNAME
              value: ${BPMS_DATABASE_USERNAME}
            - name: QUARTZ_PASSWORD
              value: ${BPMS_DATABASE_PASSWORD}
            - name: QUARTZ_JTA
              value: "false"
            - name: QUARTZ_NONXA
              value: "true"
            - name: QUARTZ_MIN_POOL_SIZE
              value: ${BPMS_MIN_POOL_SIZE}
            - name: QUARTZ_MAX_POOL_SIZE
              value: ${BPMS_MAX_POOL_SIZE}
            - name: QUARTZ_CONNECTION_CHECKER
              value: ${BPMS_CONNECTION_CHECKER}
            - name: QUARTZ_EXCEPTION_SORTER
              value: ${BPMS_EXCEPTION_SORTER}
            - name: QUARTZ_BACKGROUND_VALIDATION
              value: ${BPMS_BACKGROUND_VALIDATION}
            - name: QUARTZ_BACKGROUND_VALIDATION_MILLIS
              value: ${BPMS_BACKGROUND_VALIDATION_MILLIS}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    required: true
  - description: Hibernate persistence schema.
    displayName: KIE Server Persistence Schema
    name: KIE_SERVER_PERSISTENCE_SCHEMA
  - description: Sets the datasource service port. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the URL or XA_CONNECTION_URL is set
    displayName: Datasource Service Host
    name: BPMS_SERVICE_HOST
  - description: Sets the datasource service port. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the URL or XA_CONNECTION_URL is set
    displayName: Database service Port
    name: BPMS_SERVICE_PORT
  - description: Sets the datasources type. It can be XA or NONXA. For non XA set it to true. Default value is false.
    displayName: Non XA datasource
    name: BPMS_NONXA
  - description: Sets the datasources jdbc connection url. Note that, if you are using PostgreSQL do not use this field, use the BPMS_SERVICE_HOST and PORT. If using SERVICE_PORT and HOST there is no need to fill this parameter.
    displayName: Datasource Connection URL
    name: BPMS_CONNECTION_URL
  - description: The predefined driver name, available values are mysql, postgresql or the preferred name for the external driver. For external driver the value passed here should be the same than EXTERNALDB_DRIVER_NAME.
    displayName: Database Driver Name
    name: BPMS_DRIVER
    required: true
  - description: 'The predefined driver name installed as a deployment, only required for Oracle, for jdbc driver as deployment append the keywork ''deployment'' to the jar name, example: ''deployment.ojdbc6.jar'''
    displayName: Quartz Database Driver Module
    name: QUARTZ_DRIVER_MODULE
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: BPMS_JNDI
    required: true
    value: java:jboss/datasources/jbpmDS
  - description: Database name
    displayName: Database Name
    name: BPMS_DATABASE
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: BPMS_DATABASE_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: BPMS_DATABASE_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: BPMS_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: BPMS_MAX_POOL_SIZE
  - description: An org.jboss.jca.adapters.jdbc.ValidConnectionChecker that provides a SQLException isValidConnection(Connection e) method to validate if a connection is valid.
    displayName: JDBC Connection Checker class
    name: BPMS_CONNECTION_CHECKER
  - description: An org.jboss.jca.adapters.jdbc.ExceptionSorter that provides a boolean isExceptionFatal(SQLException e) method to validate if an exception should be broadcast to all javax.resource.spi.ConnectionEventListener as a connectionErrorOccurred.
    displayName: JDBC Exception Sorter class
    name: BPMS_EXCEPTION_SORTER
  - description: Sets the sql validation method to background-validation, if set to false the validate-on-match method will be used.
    displayName: JDBC background validation
    name: BPMS_BACKGROUND_VALIDATION
  - description: Defines the interval for the background-validation check for the jdbc connections.
    displayName: JDBC Background Validation Millis
    name: BPMS_BACKGROUND_VALIDATION_MILLIS
  - description: ImageStreamTag definition for the image containing the drivers and configuration. i.e custom-driver-image:1.0
    displayName: Drivers Extension Image
    name: EXTENSIONS_IMAGE
    required: true
    value: custom-driver-extension:1.0
  - description: Namespace within which the ImageStream definition for the image containing the drivers and configuration is located.
    displayName: Drivers ImageStream Namespace
    name: EXTENSIONS_IMAGE_NAMESPACE
    required: true
    value: openshift
  - description: Full path to the directory within the extensions image where the extensions are located (e.g. install.sh, modules/, etc.)
    displayName: Drivers Image Install Directory
    name: EXTENSIONS_INSTALL_DIR
    required: true
    value: /extensions
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven additional arguments to use for S2I builds
    displayName: Maven Additional Arguments
    name: MAVEN_ARGS_APPEND
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact directory
    name: ARTIFACT_DIR
  - description: Container memory limit
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-mysql-persistent-s2i
    xpaas: 1.4.17
  message: A new persistent BPMS application (using MySQL) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + MySQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, database deployment configuration for MySQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: processserver64-mysql-persistent-s2i
    namespace: openshift
    resourceVersion: "15189"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-mysql-persistent-s2i
    uid: 2caa501a-09ec-40e7-88db-4ea0565cdac0
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB,${APPLICATION_NAME}-mysql=QUARTZ
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JNDI
              value: ${DB_JNDI}NotManaged
            - name: QUARTZ_USERNAME
              value: ${DB_USERNAME}
            - name: QUARTZ_PASSWORD
              value: ${DB_PASSWORD}
            - name: QUARTZ_DATABASE
              value: ${DB_DATABASE}
            - name: QUARTZ_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: QUARTZ_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: QUARTZ_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JTA
              value: "false"
            - name: QUARTZ_NONXA
              value: "true"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.MySQL5Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-mysql-s2i
    xpaas: 1.4.17
  message: A new BPMS application (using MySQL) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + MySQL (Ephemeral with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss,hidden
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, database deployment configuration for MySQL using ephemeral (temporary) storage and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: processserver64-mysql-s2i
    namespace: openshift
    resourceVersion: "15195"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-mysql-s2i
    uid: 3474c9b8-da79-4537-9643-17f9fc111239
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.MySQL5Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: processserver64-postgresql-persistent-s2i
    xpaas: 1.4.17
  message: A new persistent BPMS application (using PostgreSQL) has been created in your project. The username/password for accessing the KIE Server REST or JMS interface is ${KIE_SERVER_USER}/${KIE_SERVER_PASSWORD}. For accessing the MySQL database "${DB_DATABASE}" use the credentials ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the secret named "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: An example BPM Suite application with a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-processserver
      openshift.io/display-name: JBoss BPM Suite 6.4 intelligent process server + PostgreSQL (with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: processserver,jboss
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-bpm-suite/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Business Process Suite intelligent process server 6.4 based application, including a build configuration, application deployment configuration, database deployment configuration for PostgreSQL using persistence and secure communication using https.
      template.openshift.io/support-url: https://access.redhat.com
      version: 1.4.17
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
          f:xpaas: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: processserver64-postgresql-persistent-s2i
    namespace: openshift
    resourceVersion: "15207"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-postgresql-persistent-s2i
    uid: 8ffad228-4734-459c-8d4a-a17a387b1f6c
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jboss-processserver64-openshift:1.6
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: KIE_CONTAINER_DEPLOYMENT
              value: ${KIE_CONTAINER_DEPLOYMENT}
            - name: KIE_SERVER_PROTOCOL
              value: ${KIE_SERVER_PROTOCOL}
            - name: KIE_SERVER_PORT
              value: ${KIE_SERVER_PORT}
            - name: KIE_SERVER_USER
              value: ${KIE_SERVER_USER}
            - name: KIE_SERVER_PASSWORD
              value: ${KIE_SERVER_PASSWORD}
            - name: KIE_SERVER_DOMAIN
              value: ${KIE_SERVER_DOMAIN}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_PERSISTENCE_DIALECT}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB,${APPLICATION_NAME}-postgresql=QUARTZ
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JNDI
              value: ${DB_JNDI}NotManaged
            - name: QUARTZ_USERNAME
              value: ${DB_USERNAME}
            - name: QUARTZ_PASSWORD
              value: ${DB_PASSWORD}
            - name: QUARTZ_DATABASE
              value: ${DB_DATABASE}
            - name: QUARTZ_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: QUARTZ_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: QUARTZ_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: QUARTZ_JTA
              value: "false"
            - name: QUARTZ_NONXA
              value: "true"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/processserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: HORNETQ_CLUSTER_PASSWORD
              value: ${HORNETQ_CLUSTER_PASSWORD}
            - name: HORNETQ_QUEUES
              value: ${HORNETQ_QUEUES}
            - name: HORNETQ_TOPICS
              value: ${HORNETQ_TOPICS}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/processserver-secret-volume
              name: processserver-keystore-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: processserver-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: 'The KIE Container deployment configuration in format: containerId=groupId:artifactId:version|c2=g2:a2:v2'
    displayName: KIE Container Deployment
    name: KIE_CONTAINER_DEPLOYMENT
    value: processserver-library=org.openshift.quickstarts:processserver-library:1.4.0.Final
  - description: The protocol to access the KIE Server REST interface.
    displayName: KIE Server Protocol
    name: KIE_SERVER_PROTOCOL
    value: https
  - description: The port to access the KIE Server REST interface.
    displayName: KIE Server Port
    name: KIE_SERVER_PORT
    value: "8443"
  - description: The user name to access the KIE Server REST or JMS interface.
    displayName: KIE Server Username
    name: KIE_SERVER_USER
    value: kieserver
  - description: The password to access the KIE Server REST or JMS interface. Must be different than username; must not be root, admin, or administrator; must contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), and 1 non-alphanumeric symbol(s).
    displayName: KIE Server Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_PASSWORD
  - description: JAAS LoginContext domain that shall be used to authenticate users when using JMS.
    displayName: KIE Server Domain
    name: KIE_SERVER_DOMAIN
    value: other
  - description: Hibernate persistence dialect.
    displayName: KIE Server Persistence Dialect
    name: KIE_SERVER_PERSISTENCE_DIALECT
    value: org.hibernate.dialect.PostgreSQL82Dialect
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: kie-app
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/jboss-openshift/openshift-quickstarts
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
    value: "1.4"
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
    value: processserver/library
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/ExampleDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Queue names
    displayName: Queues
    name: HORNETQ_QUEUES
  - description: Topic names
    displayName: Topics
    name: HORNETQ_TOPICS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: processserver-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: Server Certificate Name
    name: HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
    value: mykeystorepass
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: HornetQ cluster admin password
    displayName: HornetQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: HORNETQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder.
    name: ARTIFACT_DIR
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit
    displayName: Container memory limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: rails-pgsql-persistent
    template: rails-pgsql-persistent
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/rails-ex/blob/master/README.md.
  metadata:
    annotations:
      description: An example Rails application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/rails-ex/blob/master/README.md.
      iconClass: icon-ruby
      openshift.io/display-name: Rails + PostgreSQL
      openshift.io/documentation-url: https://github.com/sclorg/rails-ex
      openshift.io/long-description: This template defines resources needed to develop a Rails application, including a build configuration, application deployment configuration, and database deployment configuration.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,ruby,rails
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rails-pgsql-persistent
    namespace: openshift
    resourceVersion: "15166"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rails-pgsql-persistent
    uid: 57576637-cb57-4fba-a855-4e1c8b412b49
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      application-password: ${APPLICATION_PASSWORD}
      application-user: ${APPLICATION_USER}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
      keybase: ${SECRET_KEY_BASE}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: bundle exec rake test
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: RUBYGEM_MIRROR
            value: ${RUBYGEM_MIRROR}
          from:
            kind: ImageStreamTag
            name: ruby:2.6-ubi8
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        recreateParams:
          pre:
            execNewPod:
              command:
              - ./migrate-database.sh
              containerName: ${NAME}
            failurePolicy: Abort
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  key: keybase
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            - name: APPLICATION_DOMAIN
              value: ${APPLICATION_DOMAIN}
            - name: APPLICATION_USER
              valueFrom:
                secretKeyRef:
                  key: application-user
                  name: ${NAME}
            - name: APPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: application-password
                  name: ${NAME}
            - name: RAILS_ENV
              value: ${RAILS_ENV}
            image: ' '
            livenessProbe:
              httpGet:
                path: /articles
                port: 8080
              initialDelaySeconds: 10
              timeoutSeconds: 3
            name: ${NAME}
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /articles
                port: 8080
              initialDelaySeconds: 5
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: ' '
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: postgresql
            ports:
            - containerPort: 5432
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_POSTGRESQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:12-el8
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: rails-pgsql-persistent
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Maximum amount of memory the Rails container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the PostgreSQL container can use.
    displayName: Memory Limit (PostgreSQL)
    name: MEMORY_POSTGRESQL_LIMIT
    required: true
    value: 512Mi
  - description: Volume space available for data, e.g. 512Mi, 2Gi
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/rails-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Rails service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: Your secret key for verifying the integrity of signed cookies.
    displayName: Secret Key
    from: '[a-z0-9]{127}'
    generate: expression
    name: SECRET_KEY_BASE
  - description: The application user that is used within the sample application to authorize access on pages.
    displayName: Application Username
    name: APPLICATION_USER
    required: true
    value: openshift
  - description: The application password that is used within the sample application to authorize access on pages.
    displayName: Application Password
    name: APPLICATION_PASSWORD
    required: true
    value: secret
  - description: Environment under which the sample application will run. Could be set to production, development or test.
    displayName: Rails Environment
    name: RAILS_ENV
    required: true
    value: production
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - displayName: Database Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: root
  - displayName: Maximum Database Connections
    name: POSTGRESQL_MAX_CONNECTIONS
    value: "100"
  - displayName: Shared Buffer Amount
    name: POSTGRESQL_SHARED_BUFFERS
    value: 12MB
  - description: The custom RubyGems mirror URL
    displayName: Custom RubyGems Mirror URL
    name: RUBYGEM_MIRROR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    app: rails-postgresql-example
    template: rails-postgresql-example
  message: |-
    The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/rails-ex/blob/master/README.md.
  metadata:
    annotations:
      description: |-
        An example Rails application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/rails-ex/blob/master/README.md.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
      iconClass: icon-ruby
      openshift.io/display-name: Rails + PostgreSQL (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/rails-ex
      openshift.io/long-description: This template defines resources needed to develop a Rails application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,ruby,rails
      template.openshift.io/bindable: "false"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:app: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rails-postgresql-example
    namespace: openshift
    resourceVersion: "15135"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rails-postgresql-example
    uid: cf3b83ab-41e5-4a9d-ba7b-fa2c47a2b4f9
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}
    stringData:
      application-password: ${APPLICATION_PASSWORD}
      application-user: ${APPLICATION_USER}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${DATABASE_USER}
      keybase: ${SECRET_KEY_BASE}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: ${NAME}
    spec:
      ports:
      - name: web
        port: 8080
        targetPort: 8080
      selector:
        name: ${NAME}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: ${NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:latest
      postCommit:
        script: bundle exec rake test
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: RUBYGEM_MIRROR
            value: ${RUBYGEM_MIRROR}
          from:
            kind: ImageStreamTag
            name: ruby:2.6-ubi8
            namespace: ${NAMESPACE}
        type: Source
      triggers:
      - type: ImageChange
      - type: ConfigChange
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        name: ${NAME}
      strategy:
        recreateParams:
          pre:
            execNewPod:
              command:
              - ./migrate-database.sh
              containerName: ${NAME}
            failurePolicy: Abort
        type: Recreate
      template:
        metadata:
          labels:
            name: ${NAME}
          name: ${NAME}
        spec:
          containers:
          - env:
            - name: DATABASE_SERVICE_NAME
              value: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  key: keybase
                  name: ${NAME}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            - name: APPLICATION_DOMAIN
              value: ${APPLICATION_DOMAIN}
            - name: APPLICATION_USER
              valueFrom:
                secretKeyRef:
                  key: application-user
                  name: ${NAME}
            - name: APPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: application-password
                  name: ${NAME}
            - name: RAILS_ENV
              value: ${RAILS_ENV}
            image: ' '
            livenessProbe:
              httpGet:
                path: /articles
                port: 8080
              initialDelaySeconds: 10
              timeoutSeconds: 3
            name: ${NAME}
            ports:
            - containerPort: 8080
            readinessProbe:
              httpGet:
                path: /articles
                port: 8080
              initialDelaySeconds: 5
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}
            - name: POSTGRESQL_DATABASE
              value: ${DATABASE_NAME}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: ' '
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: postgresql
            ports:
            - containerPort: 5432
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_POSTGRESQL_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: data
          volumes:
          - emptyDir: {}
            name: data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:12-el8
            namespace: ${NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: rails-postgresql-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Maximum amount of memory the Rails container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the PostgreSQL container can use.
    displayName: Memory Limit (PostgreSQL)
    name: MEMORY_POSTGRESQL_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/sclorg/rails-ex.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Set this to the relative path to your project if it is not in the root of your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The exposed hostname that will route to the Rails service, if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: Your secret key for verifying the integrity of signed cookies.
    displayName: Secret Key
    from: '[a-z0-9]{127}'
    generate: expression
    name: SECRET_KEY_BASE
  - description: The application user that is used within the sample application to authorize access on pages.
    displayName: Application Username
    name: APPLICATION_USER
    required: true
    value: openshift
  - description: The application password that is used within the sample application to authorize access on pages.
    displayName: Application Password
    name: APPLICATION_PASSWORD
    required: true
    value: secret
  - description: Environment under which the sample application will run. Could be set to production, development or test.
    displayName: Rails Environment
    name: RAILS_ENV
    required: true
    value: production
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - displayName: Database Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: DATABASE_USER
  - displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: root
  - displayName: Maximum Database Connections
    name: POSTGRESQL_MAX_CONNECTIONS
    value: "100"
  - displayName: Shared Buffer Amount
    name: POSTGRESQL_SHARED_BUFFERS
    value: 12MB
  - description: The custom RubyGems mirror URL
    displayName: Custom RubyGems Mirror URL
    name: RUBYGEM_MIRROR
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: redis-ephemeral-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Password: ${REDIS_PASSWORD}
     Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.
  metadata:
    annotations:
      description: |-
        Redis in-memory data structure store, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.

        WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
      iconClass: icon-redis
      openshift.io/display-name: Redis (Ephemeral)
      openshift.io/documentation-url: https://github.com/sclorg/redis-container/tree/master/5
      openshift.io/long-description: This template provides a standalone Redis server.  The data is not stored on persistent storage, so any restart of the service will result in all data being lost.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,redis
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: redis-ephemeral
    namespace: openshift
    resourceVersion: "15196"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/redis-ephemeral
    uid: 4ef63802-0c16-404b-aacb-62fa16ba6f50
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-password: '{.data[''database-password'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-password: ${REDIS_PASSWORD}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: redis
        nodePort: 0
        port: 6379
        protocol: TCP
        targetPort: 6379
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 6379
              timeoutSeconds: 1
            name: redis
            ports:
            - containerPort: 6379
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/redis/data
              name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - redis
          from:
            kind: ImageStreamTag
            name: redis:${REDIS_VERSION}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
    status: {}
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: redis
  - description: Password for the Redis connection user.
    displayName: Redis Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: REDIS_PASSWORD
    required: true
  - description: Version of Redis image to be used (5-el7, 5-el8, or latest).
    displayName: Version of Redis Image
    name: REDIS_VERSION
    required: true
    value: 5-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: redis-persistent-template
  message: |-
    The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

           Password: ${REDIS_PASSWORD}
     Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/

    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.
  metadata:
    annotations:
      description: |-
        Redis in-memory data structure store, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.

        NOTE: You must have persistent volumes available in your cluster to use this template.
      iconClass: icon-redis
      openshift.io/display-name: Redis
      openshift.io/documentation-url: https://github.com/sclorg/redis-container/tree/master/5
      openshift.io/long-description: This template provides a standalone Redis server.  The data is stored on persistent storage.
      openshift.io/provider-display-name: Red Hat, Inc.
      openshift.io/support-url: https://access.redhat.com
      samples.operator.openshift.io/version: 4.6.52
      tags: database,redis
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/documentation-url: {}
            f:openshift.io/long-description: {}
            f:openshift.io/provider-display-name: {}
            f:openshift.io/support-url: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: redis-persistent
    namespace: openshift
    resourceVersion: "15137"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/redis-persistent
    uid: 386b80dc-84c3-4c63-b200-e072562c497f
  objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-password: '{.data[''database-password'']}'
      name: ${DATABASE_SERVICE_NAME}
    stringData:
      database-password: ${REDIS_PASSWORD}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: redis
        nodePort: 0
        port: 6379
        protocol: TCP
        targetPort: 6379
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - capabilities: {}
            env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            image: ' '
            imagePullPolicy: IfNotPresent
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 6379
              timeoutSeconds: 1
            name: redis
            ports:
            - containerPort: 6379
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /var/lib/redis/data
              name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
          - name: ${DATABASE_SERVICE_NAME}-data
            persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - redis
          from:
            kind: ImageStreamTag
            name: redis:${REDIS_VERSION}
            namespace: ${NAMESPACE}
          lastTriggeredImage: ""
        type: ImageChange
      - type: ConfigChange
    status: {}
  parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: redis
  - description: Password for the Redis connection user.
    displayName: Redis Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: REDIS_PASSWORD
    required: true
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Version of Redis image to be used (5-el7, 5-el8, or latest).
    displayName: Version of Redis Image
    name: REDIS_VERSION
    required: true
    value: 5-el8
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhdm: "7.8"
    template: rhdm78-authoring
  message: |-
    A new persistent Decision Manager application has been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secrets named "${BUSINESS_CENTRAL_HTTPS_SECRET}" and "${KIE_SERVER_HTTPS_SECRET}"
    containing the ${BUSINESS_CENTRAL_HTTPS_KEYSTORE} and ${KIE_SERVER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a non-HA persistent authoring environment, for Red Hat Decision Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Decision Manager 7.8 authoring environment (non-HA, persistent, with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhdm,decisionserver,jboss,authoring
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.8/html/deploying_a_red_hat_decision_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to develop and execute Rules on Red Hat Decision Manager 7.8, including application deployment configuration, secure and insecure http communication and a persistent volume to store data that needs to survive to a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Decision Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhdm: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhdm78-authoring
    namespace: openshift
    resourceVersion: "15139"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhdm78-authoring
    uid: 0fadda97-e599-4160-bc01-47933a3a0c8f
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhdmsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Decision Central web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhdmcentr-http
    kind: Route
    metadata:
      annotations:
        description: Route for Decision Central's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: insecure-${APPLICATION_NAME}-rhdmcentr
    spec:
      host: ${DECISION_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhdmcentr-https
    kind: Route
    metadata:
      annotations:
        description: Route for Decision Central's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      host: ${DECISION_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
            service: ${APPLICATION_NAME}-rhdmcentr
          name: ${APPLICATION_NAME}-rhdmcentr
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "false"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: WORKBENCH_ROUTE_NAME
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: GIT_HOOKS_DIR
              value: ${GIT_HOOKS_DIR}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/decisioncentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${DECISION_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${DECISION_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${DECISION_CENTRAL_HTTPS_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${DECISION_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${DECISION_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${DECISION_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${DECISION_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhdm-decisioncentral-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhdmcentr
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${DECISION_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/decisioncentral-secret-volume
              name: decisioncentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhdmcentr-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhdmsvc
          terminationGracePeriodSeconds: 60
          volumes:
          - name: decisioncentral-keystore-volume
            secret:
              secretName: ${DECISION_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhdmcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhdmcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhdmcentr
          from:
            kind: ImageStreamTag
            name: rhdm-decisioncentral-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: ws
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: ControllerBasedStartupStrategy
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHDMCENTR,EXTERNAL
            - name: RHDMCENTR_MAVEN_REPO_ID
              value: repo-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_SERVICE
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHDMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHDMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-rhdmsvc
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DECISION_CENTRAL_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: KIE server controller token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Controller Token
    name: KIE_SERVER_CONTROLLER_TOKEN
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: DEVELOPMENT
  - description: KIE server mbeans enabled/disabled (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route for Decision Central. Leave blank for default hostname, e.g.: insecure-<application-name>-rhdmcentr-<project>.<default-domain-suffix>'
    displayName: Decision Central Custom http Route Hostname
    name: DECISION_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route for Decision Central.  Leave blank for default hostname, e.g.: <application-name>-rhdmcentr-<project>.<default-domain-suffix>'
    displayName: Decision Central Custom https Route Hostname
    name: DECISION_CENTRAL_HOSTNAME_HTTPS
  - description: 'Custom hostname for http service route for KIE Server. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route for KIE Server.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file for Decision Central.
    displayName: Decision Central Server Keystore Secret Name
    name: DECISION_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Decision Central Server Keystore Filename
    name: DECISION_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Decision Central Server Certificate Name
    name: DECISION_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Decision Central Server Keystore Password
    name: DECISION_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "60000"
  - description: Namespace in which the ImageStreams for Red Hat Decision Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhdm-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhdm-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: Maven mirror that Decision Central and KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for building and deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*,!repo-rhdmcentr
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhdmcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The directory to use for git hooks, if required.
    displayName: Git hooks directory
    name: GIT_HOOKS_DIR
  - description: Size of the persistent storage for Decision Central's runtime data.
    displayName: Decision Central Volume Capacity
    name: DECISION_CENTRAL_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Decision Central Container memory limit.
    displayName: Decision Central Container Memory Limit
    name: DECISION_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Decision Central RH-SSO Client name
    displayName: Decision Central RH-SSO Client name
    name: DECISION_CENTRAL_SSO_CLIENT
  - description: Decision Central RH-SSO Client Secret.
    displayName: Decision Central RH-SSO Client Secret
    name: DECISION_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name used to create the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhdm: "7.8"
    template: rhdm78-authoring-ha
  message: |-
    A new persistent HA Decision Manager application has been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secrets named "${DECISION_CENTRAL_HTTPS_SECRET}" and "${KIE_SERVER_HTTPS_SECRET}"
    containing the ${DECISION_CENTRAL_HTTPS_KEYSTORE} and ${KIE_SERVER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a HA persistent authoring environment, for Red Hat Decision Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Decision Manager 7.8 authoring environment (HA, persistent, with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhdm,decisionserver,jboss,authoring,ha
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.8/html/deploying_a_red_hat_decision_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to develop and execute Rules on Red Hat Decision Manager 7.8 with High Availability enabled as tech preview, including application deployment configuration, secure and insecure http communication and persistent volumes to store data that needs to survive a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Decision Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhdm: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhdm78-authoring-ha
    namespace: openshift
    resourceVersion: "15138"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhdm78-authoring-ha
    uid: f38ac93b-9aaf-4d5e-a460-197c5fdff09e
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhdmsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Decision Central web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for rhdmcentr clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr-ping
      name: ${APPLICATION_NAME}-rhdmcentr-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a ping service for clustered applications.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-datagrid-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-datagrid
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a service for accessing the application over Hot Rod protocol.
        service.alpha.openshift.io/serving-cert-secret-name: datagrid-service-certs
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-datagrid
    spec:
      ports:
      - name: hotrod
        port: 11222
        targetPort: 11222
      selector:
        deploymentConfig: ${APPLICATION_NAME}-datagrid
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq-tcp
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      clusterIP: None
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for amq clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ping
      name: ping
    spec:
      clusterIP: None
      ports:
      - port: 8888
        protocol: TCP
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhdmcentr-http
    kind: Route
    metadata:
      annotations:
        description: Route for Decision Central's http service.
        haproxy.router.openshift.io/balance: source
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: insecure-${APPLICATION_NAME}-rhdmcentr
    spec:
      host: ${DECISION_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhdmcentr-https
    kind: Route
    metadata:
      annotations:
        description: Route for Decision Central's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      host: ${DECISION_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-datagrid
    spec:
      podManagementPolicy: OrderedReady
      replicas: 2
      selector:
        matchLabels:
          deploymentConfig: ${APPLICATION_NAME}-datagrid
      serviceName: ${APPLICATION_NAME}-datagrid
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-datagrid
          name: ${APPLICATION_NAME}-datagrid
        spec:
          containers:
          - env:
            - name: SERVICE_NAME
              value: ${APPLICATION_NAME}-datagrid
            - name: SERVICE_PROFILE
              value: ${APPLICATION_NAME}-datagrid
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-datagrid-ping
            - name: INFINISPAN_CONNECTORS
              value: hotrod
            image: ${DATAGRID_IMAGE}
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /opt/datagrid/bin/livenessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 15
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-datagrid
            ports:
            - containerPort: 8888
              name: ping
              protocol: TCP
            - containerPort: 11222
              name: hotrod
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /opt/datagrid/bin/readinessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 17
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
            resources:
              limits:
                cpu: ${DATAGRID_CPU_LIMIT}
                memory: ${DATAGRID_MEMORY_LIMIT}
              requests:
                cpu: ${DATAGRID_CPU_LIMIT}
                memory: ${DATAGRID_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /opt/datagrid/standalone/data
              name: srv-data
            - mountPath: /var/run/secrets/java.io/keystores
              name: datagrid-keystore-volume
            - mountPath: /var/run/secrets/openshift.io/serviceaccount
              name: datagrid-service-certs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 60
          volumes:
          - empty-dir: {}
            name: datagrid-keystore-volume
          - name: datagrid-service-certs
            secret:
              secretName: datagrid-service-certs
      triggers:
      - type: ConfigChange
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          name: srv-data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${DATAGRID_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      replicas: ${{DECISION_CENTRAL_CONTAINER_REPLICAS}}
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
          name: ${APPLICATION_NAME}-rhdmcentr
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "true"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: WORKBENCH_ROUTE_NAME
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: GIT_HOOKS_DIR
              value: ${GIT_HOOKS_DIR}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/decisioncentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${DECISION_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${DECISION_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${DECISION_CENTRAL_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhdmcentr-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: APPFORMER_INFINISPAN_SERVICE_NAME
              value: ${APPLICATION_NAME}-datagrid
            - name: APPFORMER_INFINISPAN_PORT
              value: "11222"
            - name: APPFORMER_JMS_BROKER_ADDRESS
              value: ${APPLICATION_NAME}-amq-tcp
            - name: APPFORMER_JMS_BROKER_PORT
              value: "61616"
            - name: APPFORMER_JMS_BROKER_USER
              value: ${APPFORMER_JMS_BROKER_USER}
            - name: APPFORMER_JMS_BROKER_PASSWORD
              value: ${APPFORMER_JMS_BROKER_PASSWORD}
            - name: JAVA_MAX_MEM_RATIO
              value: ${DECISION_CENTRAL_JAVA_MAX_MEM_RATIO}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${DECISION_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${DECISION_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${DECISION_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${DECISION_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${DECISION_CENTRAL_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhdmcentr
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                cpu: ${DECISION_CENTRAL_CPU_LIMIT}
                memory: ${DECISION_CENTRAL_MEMORY_LIMIT}
              requests:
                cpu: ${DECISION_CENTRAL_CPU_LIMIT}
                memory: ${DECISION_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/decisioncentral-secret-volume
              name: decisioncentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhdmcentr-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhdmsvc
          terminationGracePeriodSeconds: 60
          volumes:
          - name: decisioncentral-keystore-volume
            secret:
              secretName: ${DECISION_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhdmcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhdmcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhdmcentr
          from:
            kind: ImageStreamTag
            name: ${DECISION_CENTRAL_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: ${{KIE_SERVER_CONTAINER_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: ws
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHDMCENTR,EXTERNAL
            - name: RHDMCENTR_MAVEN_REPO_ID
              value: repo-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_SERVICE
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHDMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHDMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                cpu: ${KIE_SERVER_CPU_LIMIT}
                memory: ${KIE_SERVER_MEMORY_LIMIT}
              requests:
                cpu: ${KIE_SERVER_CPU_LIMIT}
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-rhdmsvc
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq
    spec:
      podManagementPolicy: OrderedReady
      replicas: ${{AMQ_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          deploymentConfig: ${APPLICATION_NAME}-amq
      serviceName: ${APPLICATION_NAME}-amq-tcp
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${APPFORMER_JMS_BROKER_USER}
            - name: AMQ_PASSWORD
              value: ${APPFORMER_JMS_BROKER_PASSWORD}
            - name: AMQ_ROLE
              value: ${AMQ_ROLE}
            - name: AMQ_NAME
              value: ${AMQ_NAME}
            - name: AMQ_TRANSPORTS
              value: openwire
            - name: AMQ_GLOBAL_MAX_SIZE
              value: ${AMQ_GLOBAL_MAX_SIZE}
            - name: AMQ_REQUIRE_LOGIN
            - name: AMQ_DATA_DIR
              value: /opt/amq/data
            - name: AMQ_DATA_DIR_LOGGING
              value: "true"
            - name: AMQ_CLUSTERED
              value: "true"
            - name: AMQ_REPLICAS
              value: ${AMQ_REPLICAS}
            - name: AMQ_CLUSTER_USER
              value: ${APPFORMER_JMS_BROKER_USER}
            - name: AMQ_CLUSTER_PASSWORD
              value: ${APPFORMER_JMS_BROKER_PASSWORD}
            - name: AMQ_EXTRA_ARGS
            - name: AMQ_ANYCAST_PREFIX
            - name: AMQ_MULTICAST_PREFIX
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            image: ${AMQ_BROKER_IMAGE}
            imagePullPolicy: IfNotPresent
            name: broker-amq
            ports:
            - containerPort: 8161
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61616
              name: artemis
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
              failureThreshold: 3
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 60
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          name: ${APPLICATION_NAME}-amq-pvol
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${AMQ_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmcentr-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${DECISION_CENTRAL_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: KIE server controller token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Controller Token
    name: KIE_SERVER_CONTROLLER_TOKEN
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: DEVELOPMENT
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route for Decision Central.  Leave blank for default hostname, e.g.: insecure-<application-name>-rhdmcentr-<project>.<default-domain-suffix>'
    displayName: Decision Central Custom http Route Hostname
    name: DECISION_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route for Decision Central.  Leave blank for default hostname, e.g.: <application-name>-rhdmcentr-<project>.<default-domain-suffix>'
    displayName: Decision Central Custom https Route Hostname
    name: DECISION_CENTRAL_HOSTNAME_HTTPS
  - description: 'Custom hostname for http service route for KIE Server. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route for KIE Server. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file for Decision Central.
    displayName: Decision Central Server Keystore Secret Name
    name: DECISION_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret for Decision Central.
    displayName: Decision Central Server Keystore Filename
    name: DECISION_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate for Decision Central.
    displayName: Decision Central Server Certificate Name
    name: DECISION_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate for Decision Central.
    displayName: Decision Central Server Keystore Password
    name: DECISION_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file for KIE Server.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret for KIE Server.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate for KIE Server.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate for KIE Server.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The user name to connect to the JMS broker.
    displayName: AppFormer JMS Broker user name
    name: APPFORMER_JMS_BROKER_USER
    required: true
    value: jmsBrokerUser
  - description: The password to connect to the JMS broker.
    displayName: AppFormer JMS Broker password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: APPFORMER_JMS_BROKER_PASSWORD
    required: true
  - description: DataGrid image.
    displayName: DataGrid Image
    name: DATAGRID_IMAGE
    required: true
    value: registry.redhat.io/jboss-datagrid-7/datagrid73-openshift:1.5
  - description: DataGrid Container CPU limit.
    displayName: DataGrid Container CPU Limit
    name: DATAGRID_CPU_LIMIT
    required: true
    value: 1000m
  - description: DataGrid Container memory limit.
    displayName: DataGrid Container Memory Limit
    name: DATAGRID_MEMORY_LIMIT
    required: true
    value: 2Gi
  - description: Size of the persistent storage for DataGrid's runtime data.
    displayName: DataGrid Volume Capacity
    name: DATAGRID_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: AMQ Broker Image
    displayName: Image
    name: AMQ_BROKER_IMAGE
    required: true
    value: registry.redhat.io/amq7/amq-broker:7.6
  - description: User role for standard broker user.
    displayName: AMQ Role
    name: AMQ_ROLE
    required: true
    value: admin
  - description: The name of the broker.
    displayName: AMQ Name
    name: AMQ_NAME
    required: true
    value: broker
  - description: Specifies the maximum amount of memory that message data can consume. If no value is specified, half of the system’s memory is allocated.
    displayName: AMQ Global Max Size
    name: AMQ_GLOBAL_MAX_SIZE
  - description: Size of persistent storage for AMQ broker volume.
    displayName: Broker Volume Capacity
    name: AMQ_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Number of broker replicas for a cluster
    displayName: Number of Replicas
    name: AMQ_REPLICAS
    required: true
    value: "2"
  - description: Decision Central Container Replicas, defines how many Decision Central containers will be started.
    displayName: Decision Central Container Replicas
    name: DECISION_CENTRAL_CONTAINER_REPLICAS
    required: true
    value: "2"
  - description: KIE Server Container Replicas, defines how many KIE Server containers will be started.
    displayName: KIE Server Container Replicas
    name: KIE_SERVER_CONTAINER_REPLICAS
    required: true
    value: "2"
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "60000"
  - description: Namespace in which the ImageStreams for Red Hat Decision Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for Decision Central. Default is "rhdm-decisioncentral-rhel8".
    displayName: Decision Central ImageStream Name
    name: DECISION_CENTRAL_IMAGE_STREAM_NAME
    required: true
    value: rhdm-decisioncentral-rhel8
  - description: The name of the image stream to use for KIE server. Default is "rhdm-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhdm-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: Maven mirror that Decision Central and KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for building and deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*,!repo-rhdmcentr
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhdmcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The directory to use for git hooks, if required.
    displayName: Git hooks directory
    name: GIT_HOOKS_DIR
  - description: Size of the persistent storage for Decision Central's runtime data.
    displayName: Decision Central Volume Capacity
    name: DECISION_CENTRAL_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Decision Central Container memory limit.
    displayName: Decision Central Container Memory Limit
    name: DECISION_CENTRAL_MEMORY_LIMIT
    required: true
    value: 8Gi
  - description: Decision Central Container JVM max memory ratio. -Xmx is set to a ratio of the memory available on the container. The default is 80, which means the upper boundary is 80% of the available memory. To skip adding the -Xmx option, set this value to 0.
    displayName: Decision Central Container JVM Max Memory Ratio
    name: DECISION_CENTRAL_JAVA_MAX_MEM_RATIO
    required: true
    value: "80"
  - description: Decision Central Container CPU limit.
    displayName: Decision Central Container CPU Limit
    name: DECISION_CENTRAL_CPU_LIMIT
    required: true
    value: 2000m
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    required: true
    value: 1Gi
  - description: KIE server Container CPU limit.
    displayName: KIE Server Container CPU Limit
    name: KIE_SERVER_CPU_LIMIT
    required: true
    value: 1000m
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Decision Central RH-SSO Client name.
    displayName: Decision Central RH-SSO Client name
    name: DECISION_CENTRAL_SSO_CLIENT
  - description: Decision Central RH-SSO Client Secret.
    displayName: Decision Central RH-SSO Client Secret
    name: DECISION_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name used to create the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhdm: "7.8"
    template: rhdm78-kieserver
  message: |-
    A new Red Hat Decision Manager KIE server application has been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for a managed KIE Server, for Red Hat Decision Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Decision Manager 7.8 managed KIE Server
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhdm,decisionserver,jboss,kieserver
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.8/html/deploying_a_red_hat_decision_manager_7.8_managed_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to execute Rules on Red Hat Decision Manager KIE server 7.8, including application deployment configuration, secure and insecure http communication. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Decision Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhdm: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: rhdm78-kieserver
    namespace: openshift
    resourceVersion: "15205"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhdm78-kieserver
    uid: f410247c-a578-4fc5-a19d-8b96d5389008
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${DECISION_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHDMCENTR,EXTERNAL
            - name: RHDMCENTR_MAVEN_REPO_ID
              value: repo-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_SERVICE
              value: ${DECISION_CENTRAL_SERVICE}
            - name: RHDMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHDMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHDMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Maven mirror that KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhdmcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
    required: true
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Decision Central, where it can be reached, to allow service lookups (for example, maven repo usage), if required.
    displayName: Name of the Decision Central service
    name: DECISION_CENTRAL_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Decision Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhdm-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhdm-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: PRODUCTION
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. Sets the property org.kie.server.mgmt.api.disabled to true and org.kie.server.startup.strategy to LocalContainersStartupStrategy.
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name used to create the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This property defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhdm: "7.8"
    template: rhdm78-prod-immutable-kieserver
  message: |-
    A new immutable Red Hat Decision Manager KIE server has been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for an immutable KIE server in a production environment, for Red Hat Decision Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Decision Manager 7.8 immutable production environment
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhdm,decisionserver,jboss,kieserver,immutable,s2i
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.8/html/deploying_a_red_hat_decision_manager_7.8_immutable_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for an immutable production runtime environment for Red Hat Decision Manager 7.8, including a source to image (S2I) build of your services, application deployment configuration, secure and insecure http communication. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Decision Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhdm: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhdm78-prod-immutable-kieserver
    namespace: openshift
    resourceVersion: "15144"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhdm78-prod-immutable-kieserver
    uid: bcbe0ff3-a972-49da-878e-a9e9d38c0202
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-kieserver:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_SERVER_CONTAINER_DEPLOYMENT
            value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${DECISION_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: DEVELOPMENT
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHDMCENTR,EXTERNAL
            - name: RHDMCENTR_MAVEN_REPO_ID
              value: repo-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_SERVICE
              value: ${DECISION_CENTRAL_SERVICE}
            - name: RHDMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHDMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHDMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${APPLICATION_NAME}-kieserver
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}-kieserver
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Decision Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhdm-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhdm-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
    required: true
  - description: Git source URI for application.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
  - description: Git branch/tag reference.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: GitHub trigger secret.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Maven mirror that KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for building and deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhdmcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Decision Central, where it can be reached, to allow service lookups (for example, maven repo usage), if required.
    displayName: Name of the Decision Central service
    name: DECISION_CENTRAL_SERVICE
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder
    name: ARTIFACT_DIR
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. Sets the property org.kie.server.mgmt.api.disabled to true and org.kie.server.startup.strategy to LocalContainersStartupStrategy.
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
    required: true
    value: "true"
  - description: RH-SSO URL
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name used to create the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhdm: "7.8"
    template: rhdm78-prod-immutable-kieserver-amq
  message: |-
    A new immutable Red Hat Decision Manager KIE server has been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for an immutable KIE server in a production environment integrated with ActiveMQ, for Red Hat Decision Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Decision Manager 7.8 immutable production environment with ActiveMQ.
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhdm,decisionserver,jboss,kieserver,immutable,s2i,amq
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.8/html/deploying_a_red_hat_decision_manager_7.8_immutable_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for an immutable production runtime environment for Red Hat Decision Manager 7.8, including a source to image (S2I) build of your services, application deployment configuration, secure and insecure http communication. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Decision Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhdm: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhdm78-prod-immutable-kieserver-amq
    namespace: openshift
    resourceVersion: "15120"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhdm78-prod-immutable-kieserver-amq
    uid: a4bad035-6d58-4705-b32e-c1f91f9682f3
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's console and Jolokia port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-jolokia
    spec:
      ports:
      - name: amq-jolokia-console
        port: 8161
        targetPort: 8161
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-amqp
    spec:
      ports:
      - name: amq-amqp
        port: 5672
        targetPort: 5672
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP SSL port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-amqp-ssl
    spec:
      ports:
      - name: amq-amqp-ssl
        port: 5671
        targetPort: 5671
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-mqtt
    spec:
      ports:
      - name: amq-mqtt
        port: 1883
        targetPort: 1883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT SSL port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-mqtt-ssl
    spec:
      ports:
      - name: amq-mqtt-ssl
        port: 8883
        targetPort: 8883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-stomp
    spec:
      ports:
      - name: amq-stomp
        port: 61613
        targetPort: 61613
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP SSL port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-stomp-ssl
    spec:
      ports:
      - name: amq-stomp-ssl
        port: 61612
        targetPort: 61612
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
        service.alpha.openshift.io/dependencies: ' [{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - name: amq-tcp
        port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire (SSL) port.
        service.alpha.openshift.io/dependencies: ' [{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-amqp-ssl", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-mqtt-ssl", "kind": "Service"}, {"name": "${APPLICATION_NAME}-amq-stomp-ssl", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-tcp-ssl
    spec:
      ports:
      - name: amq-tcp-ssl
        port: 61617
        targetPort: 61617
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-amq-jolokia-console
    kind: Route
    metadata:
      annotations:
        description: Route for AMQ Jolokia Service
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: console-jolokia
    spec:
      tls:
        termination: passthrough
      to:
        kind: Service
        name: ${APPLICATION_NAME}-amq-jolokia
  - apiVersion: v1
    id: ${APPLICATION_NAME}-amq-tcp-ssl
    kind: Route
    metadata:
      annotations:
        description: Route for AMQ tcp-ssl Service
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: amq-tcp-ssl-external
    spec:
      tls:
        termination: passthrough
      to:
        kind: Service
        name: ${APPLICATION_NAME}-amq-tcp-ssl
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-kieserver:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_SERVER_CONTAINER_DEPLOYMENT
            value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${DECISION_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: DEVELOPMENT
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_REPOS
              value: RHDMCENTR,EXTERNAL
            - name: RHDMCENTR_MAVEN_REPO_SERVICE
              value: ${DECISION_CENTRAL_SERVICE}
            - name: RHDMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHDMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHDMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_JMS_QUEUE_REQUEST
              value: ${KIE_SERVER_JMS_QUEUE_REQUEST}
            - name: KIE_SERVER_JMS_QUEUE_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUE_RESPONSE}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq7=AMQ
            - name: AMQ_USERNAME
              value: ${AMQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${AMQ_PASSWORD}
            - name: AMQ_PROTOCOL
              value: tcp
            - name: AMQ_QUEUES
              value: ${AMQ_QUEUES}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${APPLICATION_NAME}-kieserver
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}-kieserver
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
            service: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${AMQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${AMQ_PASSWORD}
            - name: AMQ_ROLE
              value: ${AMQ_ROLE}
            - name: AMQ_NAME
              value: ${APPLICATION_NAME}-broker
            - name: AMQ_TRANSPORTS
              value: ${AMQ_PROTOCOL}
            - name: AMQ_QUEUES
              value: ${AMQ_QUEUES}
            - name: AMQ_GLOBAL_MAX_SIZE
              value: ${AMQ_GLOBAL_MAX_SIZE}
            - name: AMQ_REQUIRE_LOGIN
              value: "true"
            - name: AMQ_ANYCAST_PREFIX
            - name: AMQ_MULTICAST_PREFIX
            - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
              value: /etc/amq-secret-volume
            - name: AMQ_TRUSTSTORE
              value: ${AMQ_TRUSTSTORE}
            - name: AMQ_TRUSTSTORE_PASSWORD
              value: ${AMQ_TRUSTSTORE_PASSWORD}
            - name: AMQ_KEYSTORE
              value: ${AMQ_KEYSTORE}
            - name: AMQ_KEYSTORE_PASSWORD
              value: ${AMQ_KEYSTORE_PASSWORD}
            image: ${AMQ_BROKER_IMAGESTREAM_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8161
              name: console-jolokia
              protocol: TCP
            - containerPort: 5672
              name: amq-amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: amq-mqtt
              protocol: TCP
            - containerPort: 8883
              name: mqtt-ssl
              protocol: TCP
            - containerPort: 61613
              name: amq-stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: amq-tcp
              protocol: TCP
            - containerPort: 61617
              name: amq-tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /etc/amq-secret-volume
              name: broker-secret-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: broker-secret-volume
            secret:
              secretName: ${AMQ_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: ${AMQ_BROKER_IMAGESTREAM_NAME}
            namespace: ${AMQ_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Decision Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhdm-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhdm-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
    required: true
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: The id to use for the maven repository, if set. Default is generated randomly.
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
  - description: Fully qualified URL to a Maven repository.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Decision Central, where it can be reached, to allow service lookups (for example, maven repo usage), if required.
    displayName: Name of the Decision Central service
    name: DECISION_CENTRAL_SERVICE
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder
    name: ARTIFACT_DIR
  - description: KIE server Container memory limit
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. Sets the property org.kie.server.mgmt.api.disabled to true and org.kie.server.startup.strategy to LocalContainersStartupStrategy.
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
    required: true
    value: "true"
  - description: JNDI name of request queue for JMS. The default value is queue/KIE.SERVER.REQUEST
    displayName: KIE Server JMS Request Queue
    name: KIE_SERVER_JMS_QUEUE_REQUEST
  - description: JNDI name of response queue for JMS. The default value is queue/KIE.SERVER.RESPONSE
    displayName: KIE Server JMS Response Queue
    name: KIE_SERVER_JMS_QUEUE_RESPONSE
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: AMQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: AMQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: AMQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: AMQ_PASSWORD
  - description: User role for standard broker user.
    displayName: AMQ Role
    name: AMQ_ROLE
    required: true
    value: admin
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. These are the default queues needed by KIE Server. If using custom Queues, use the same values here as in the KIE_SERVER_JMS_QUEUE_RESPONSE and KIE_SERVER_JMS_QUEUE_REQUEST parameters.
    displayName: AMQ Queues
    name: AMQ_QUEUES
    value: queue/KIE.SERVER.REQUEST,queue/KIE.SERVER.RESPONSE
  - description: Specifies the maximum amount of memory that message data can consume. If no value is specified, half of the system’s memory is allocated.
    displayName: AMQ Global Max Size
    name: AMQ_GLOBAL_MAX_SIZE
  - description: The name of a secret containing AMQ SSL related files.
    displayName: AMQ Secret Name
    name: AMQ_SECRET
    required: true
  - description: The name of the AMQ SSL Trust Store file.
    displayName: AMQ TRUSTSTORE
    name: AMQ_TRUSTSTORE
  - description: The password for the AMQ Trust Store.
    displayName: AMQ TRUSTSTORE PASSWORD
    name: AMQ_TRUSTSTORE_PASSWORD
  - description: The name of the AMQ keystore file.
    displayName: AMQ KEYSTORE
    name: AMQ_KEYSTORE
  - description: The password for the AMQ keystore and certificate.
    displayName: AMQ KEYSTORE PASSWORD
    name: AMQ_KEYSTORE_PASSWORD
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: AMQ Protocols
    name: AMQ_PROTOCOL
    value: openwire
  - description: AMQ Broker Image Stream Name
    displayName: AMQ Broker Image Stream Name
    name: AMQ_BROKER_IMAGESTREAM_NAME
    required: true
    value: amq-broker:7.6
  - description: Namespace in which the ImageStreams for Red Hat AMQ images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: AMQ ImageStream Namespace
    name: AMQ_IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO URL
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name used to create the Client if it doesn't exist
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This property defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhdm: "7.8"
    template: rhdm78-trial-ephemeral
  message: |-
    A new Decision Manager trial environment has been created.
    The user name/password for accessing the Decision Central and KIE Server interfaces is

        User name: ${KIE_ADMIN_USER}
        Password: ${DEFAULT_PASSWORD}

    Please remember that this is an ephemeral environment and any work will be LOST with a simple pod restart.
  metadata:
    annotations:
      description: Application template for an ephemeral authoring and testing environment, for Red Hat Decision Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Decision Manager 7.8 ephemeral trial environment
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhdm,decisionserver,jboss,trial
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.8/html/deploying_a_red_hat_decision_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for an ephemeral authoring and testing environment for Red Hat Decision Manager 7.8, including application deployment configuration, secure and insecure http communication. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Decision Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhdm: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: rhdm78-trial-ephemeral
    namespace: openshift
    resourceVersion: "15210"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhdm78-trial-ephemeral
    uid: 06feccf7-6fe8-490c-8433-fc7eb55eec4f
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhdmsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhdmsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Decision Central web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhdmcentr-http
    kind: Route
    metadata:
      annotations:
        description: Route for Decision Central's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: insecure-${APPLICATION_NAME}-rhdmcentr
    spec:
      host: ${DECISION_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhdmcentr
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhdmcentr
      name: ${APPLICATION_NAME}-rhdmcentr
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhdmcentr
            service: ${APPLICATION_NAME}-rhdmcentr
          name: ${APPLICATION_NAME}-rhdmcentr
        spec:
          containers:
          - env:
            - name: KIE_ADMIN_USER
              value: ${KIE_ADMIN_USER}
            - name: KIE_ADMIN_PWD
              value: ${DEFAULT_PASSWORD}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "true"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: WORKBENCH_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-rhdmcentr
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: GIT_HOOKS_DIR
              value: ${GIT_HOOKS_DIR}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${DECISION_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${DECISION_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${DECISION_CENTRAL_HOSTNAME_HTTP}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhdm-decisioncentral-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhdmcentr
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${DECISION_CENTRAL_MEMORY_LIMIT}
          serviceAccountName: ${APPLICATION_NAME}-rhdmsvc
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhdmcentr
          from:
            kind: ImageStreamTag
            name: rhdm-decisioncentral-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: KIE_ADMIN_USER
              value: ${KIE_ADMIN_USER}
            - name: KIE_ADMIN_PWD
              value: ${DEFAULT_PASSWORD}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_REPOS
              value: RHDMCENTR,EXTERNAL
            - name: RHDMCENTR_MAVEN_REPO_ID
              value: repo-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_SERVICE
              value: ${APPLICATION_NAME}-rhdmcentr
            - name: RHDMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHDMCENTR_MAVEN_REPO_USERNAME
              value: ${KIE_ADMIN_USER}
            - name: RHDMCENTR_MAVEN_REPO_PASSWORD
              value: ${DEFAULT_PASSWORD}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            - name: FILTERS
              value: AC_ALLOW_ORIGIN,AC_ALLOW_METHODS,AC_ALLOW_HEADERS,AC_ALLOW_CREDENTIALS,AC_MAX_AGE
            - name: AC_ALLOW_ORIGIN_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Origin
            - name: AC_ALLOW_ORIGIN_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_ORIGIN}
            - name: AC_ALLOW_METHODS_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Methods
            - name: AC_ALLOW_METHODS_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_METHODS}
            - name: AC_ALLOW_HEADERS_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Headers
            - name: AC_ALLOW_HEADERS_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_HEADERS}
            - name: AC_ALLOW_CREDENTIALS_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Credentials
            - name: AC_ALLOW_CREDENTIALS_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_CREDENTIALS}
            - name: AC_MAX_AGE_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Max-Age
            - name: AC_MAX_AGE_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_MAX_AGE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
          serviceAccountName: ${APPLICATION_NAME}-rhdmsvc
          terminationGracePeriodSeconds: 90
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Default password used for multiple components for user convenience in this trial environment.
    displayName: Default Password
    name: DEFAULT_PASSWORD
    required: true
    value: RedHat
  - description: KIE administrator user name.
    displayName: KIE Admin User
    name: KIE_ADMIN_USER
    value: adminUser
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: DEVELOPMENT
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: Sets the Access-Control-Allow-Origin response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Origin response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_ORIGIN
    value: '*'
  - description: Sets the Access-Control-Allow-Methods response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Methods response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_METHODS
    value: GET, POST, OPTIONS, PUT
  - description: Sets the Access-Control-Allow-Headers response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Headers response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_HEADERS
    value: Accept, Authorization, Content-Type, X-Requested-With
  - description: Sets the Access-Control-Allow-Credentials response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Credentials response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_CREDENTIALS
    value: "true"
  - description: Sets the Access-Control-Max-Age response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Max-Age response header
    name: KIE_SERVER_ACCESS_CONTROL_MAX_AGE
    value: "1"
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: insecure-<application-name>-rhdmcentr-<project>.<default-domain-suffix>'
    displayName: Decision Central Custom http Route Hostname
    name: DECISION_CENTRAL_HOSTNAME_HTTP
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "60000"
  - description: Namespace in which the ImageStreams for Red Hat Decision Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhdm-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhdm-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
  - description: The id to use for the maven repository, if set. Default is generated randomly.
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The directory to use for git hooks, if required.
    displayName: Git hooks directory
    name: GIT_HOOKS_DIR
  - description: Decision Central Container memory limit.
    displayName: Decision Central Container Memory Limit
    name: DECISION_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Decision Central RH-SSO Client name.
    displayName: Decision Central RH-SSO Client name
    name: DECISION_CENTRAL_SSO_CLIENT
  - description: Decision Central RH-SSO Client Secret.
    displayName: Decision Central RH-SSO Client Secret
    name: DECISION_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name used to create the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-authoring
  message: |-
    A new persistent Process Automation Manager application have been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secrets named "${BUSINESS_CENTRAL_HTTPS_SECRET}" and "${KIE_SERVER_HTTPS_SECRET}"
    containing the ${BUSINESS_CENTRAL_HTTPS_KEYSTORE} and ${KIE_SERVER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a non-HA persistent authoring environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 authoring environment (non-HA, persistent, with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,authoring
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to develop and execute Rules and Processes on Red Hat Process Automation Manager 7.8, including application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-authoring
    namespace: openshift
    resourceVersion: "15158"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-authoring
    uid: 646eff07-9bd9-4fc5-a9e5-23fd31428cd2
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Business Central web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhpamcentr-http
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: insecure-${APPLICATION_NAME}-rhpamcentr
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhpamcentr-https
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
            service: ${APPLICATION_NAME}-rhpamcentr
          name: ${APPLICATION_NAME}-rhpamcentr
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "false"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: GIT_HOOKS_DIR
              value: ${GIT_HOOKS_DIR}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/businesscentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${BUSINESS_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${BUSINESS_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${BUSINESS_CENTRAL_HTTPS_PASSWORD}
            - name: WORKBENCH_ROUTE_NAME
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${BUSINESS_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${BUSINESS_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhpam-businesscentral-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhpamcentr
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/businesscentral-secret-volume
              name: businesscentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhpamcentr-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 60
          volumes:
          - name: businesscentral-keystore-volume
            secret:
              secretName: ${BUSINESS_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhpamcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhpamcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhpamcentr
          from:
            kind: ImageStreamTag
            name: rhpam-businesscentral-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_DATABASE
              value: rhpam7
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_DRIVER
              value: h2
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_H2_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_H2_PWD}
            - name: RHPAM_NONXA
              value: "false"
            - name: RHPAM_XA_CONNECTION_PROPERTY_URL
              value: jdbc:h2:/opt/kie/data/h2/rhpam;AUTO_SERVER=TRUE
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: org.hibernate.dialect.H2Dialect
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: ws
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: ControllerBasedStartupStrategy
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-kie-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-kie-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-kie-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${BUSINESS_CENTRAL_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kie-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: KIE server controller token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Controller Token
    name: KIE_SERVER_CONTROLLER_TOKEN
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: KIE server H2 database user name.
    displayName: KIE Server H2 Database User
    name: KIE_SERVER_H2_USER
    value: sa
  - description: KIE server H2 database password.
    displayName: KIE Server H2 Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_H2_PWD
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property)
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: DEVELOPMENT
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for the http service route for Business Central. Leave blank for default hostname, e.g.: insecure-<application-name>-rhpamcentr-<project>.<default-domain-suffix>'
    displayName: Business Central Custom http Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for the https service route for Business Central. Leave blank for default hostname, e.g.: <application-name>-rhpamcentr-<project>.<default-domain-suffix>'
    displayName: Business Central Custom https Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTPS
  - description: 'Custom hostname for the http service route for KIE Server. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for the https service route for KIE Server. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file for Business Central.
    displayName: Business Central Server Keystore Secret Name
    name: BUSINESS_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Business Central Server Keystore Filename
    name: BUSINESS_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Business Central Server Certificate Name
    name: BUSINESS_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Business Central Server Keystore Password
    name: BUSINESS_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file for KIE server.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "5000"
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: Maven mirror that Business Central and KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for building and deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*,!repo-rhpamcentr
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The directory to use for git hooks, if required.
    displayName: Git hooks directory
    name: GIT_HOOKS_DIR
  - description: Size of the persistent storage for Business Central runtime data.
    displayName: Business Central Volume Capacity
    name: BUSINESS_CENTRAL_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Business Central Container memory limit.
    displayName: Business Central Container Memory Limit
    name: BUSINESS_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Business Central RH-SSO Client name.
    displayName: Business Central RH-SSO Client name
    name: BUSINESS_CENTRAL_SSO_CLIENT
  - description: Business Central RH-SSO Client Secret.
    displayName: Business Central RH-SSO Client Secret
    name: BUSINESS_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-authoring-ha
  message: |-
    A new persistent HA Process Automation Manager application has been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secrets named "${BUSINESS_CENTRAL_HTTPS_SECRET}" and "${KIE_SERVER_HTTPS_SECRET}"
    containing the ${BUSINESS_CENTRAL_HTTPS_KEYSTORE} and ${KIE_SERVER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a HA persistent authoring environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 authoring environment (HA, persistent, with https)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,authoring,ha
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to develop and execute Rules and Processes on Red Hat Process Automation Manager 7.8 with High Availability enabled as tech preview, including application deployment configuration, secure and insecure http communication and persistent volumes to store data that needs to survive a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-authoring-ha
    namespace: openshift
    resourceVersion: "15180"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-authoring-ha
    uid: f9aec03f-f652-44e1-8270-6033cfe28c85
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Business Central web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for rhpamcentr clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr-ping
      name: ${APPLICATION_NAME}-rhpamcentr-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-datagrid-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-datagrid
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Provides a service for accessing the application over Hot Rod protocol.
        service.alpha.openshift.io/serving-cert-secret-name: datagrid-service-certs
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-datagrid
    spec:
      ports:
      - name: hotrod
        port: 11222
        targetPort: 11222
      selector:
        deploymentConfig: ${APPLICATION_NAME}-datagrid
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq-tcp
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      clusterIP: None
      ports:
      - port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for amq clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ping
      name: ping
    spec:
      clusterIP: None
      ports:
      - port: 8888
        protocol: TCP
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The MySQL server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhpamcentr-http
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central's http service.
        haproxy.router.openshift.io/balance: source
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: insecure-${APPLICATION_NAME}-rhpamcentr
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhpamcentr-https
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-datagrid
    spec:
      podManagementPolicy: OrderedReady
      replicas: 2
      selector:
        matchLabels:
          deploymentConfig: ${APPLICATION_NAME}-datagrid
      serviceName: ${APPLICATION_NAME}-datagrid
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-datagrid
          name: ${APPLICATION_NAME}-datagrid
        spec:
          containers:
          - env:
            - name: SERVICE_NAME
              value: ${APPLICATION_NAME}-datagrid
            - name: SERVICE_PROFILE
              value: ${APPLICATION_NAME}-datagrid
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-datagrid-ping
            - name: INFINISPAN_CONNECTORS
              value: hotrod
            image: ${DATAGRID_IMAGE}
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /opt/datagrid/bin/livenessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 15
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-datagrid
            ports:
            - containerPort: 8888
              name: ping
              protocol: TCP
            - containerPort: 11222
              name: hotrod
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /opt/datagrid/bin/readinessProbe.sh
              failureThreshold: 5
              initialDelaySeconds: 17
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
            resources:
              limits:
                cpu: ${DATAGRID_CPU_LIMIT}
                memory: ${DATAGRID_MEMORY_LIMIT}
              requests:
                cpu: ${DATAGRID_CPU_LIMIT}
                memory: ${DATAGRID_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /opt/datagrid/standalone/data
              name: srv-data
            - mountPath: /var/run/secrets/java.io/keystores
              name: datagrid-keystore-volume
            - mountPath: /var/run/secrets/openshift.io/serviceaccount
              name: datagrid-service-certs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 60
          volumes:
          - empty-dir: {}
            name: datagrid-keystore-volume
          - name: datagrid-service-certs
            secret:
              secretName: datagrid-service-certs
      triggers:
      - type: ConfigChange
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          name: srv-data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${DATAGRID_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      replicas: ${{BUSINESS_CENTRAL_CONTAINER_REPLICAS}}
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
          name: ${APPLICATION_NAME}-rhpamcentr
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "true"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: WORKBENCH_ROUTE_NAME
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: GIT_HOOKS_DIR
              value: ${GIT_HOOKS_DIR}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/businesscentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${BUSINESS_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${BUSINESS_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${BUSINESS_CENTRAL_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentr-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: APPFORMER_INFINISPAN_SERVICE_NAME
              value: ${APPLICATION_NAME}-datagrid
            - name: APPFORMER_INFINISPAN_PORT
              value: "11222"
            - name: APPFORMER_JMS_BROKER_ADDRESS
              value: ${APPLICATION_NAME}-amq-tcp
            - name: APPFORMER_JMS_BROKER_PORT
              value: "61616"
            - name: APPFORMER_JMS_BROKER_USER
              value: ${APPFORMER_JMS_BROKER_USER}
            - name: APPFORMER_JMS_BROKER_PASSWORD
              value: ${APPFORMER_JMS_BROKER_PASSWORD}
            - name: JAVA_MAX_MEM_RATIO
              value: ${BUSINESS_CENTRAL_JAVA_MAX_MEM_RATIO}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${BUSINESS_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${BUSINESS_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${BUSINESS_CENTRAL_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhpamcentr
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                cpu: ${BUSINESS_CENTRAL_CPU_LIMIT}
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
              requests:
                cpu: ${BUSINESS_CENTRAL_CPU_LIMIT}
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/businesscentral-secret-volume
              name: businesscentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhpamcentr-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 60
          volumes:
          - name: businesscentral-keystore-volume
            secret:
              secretName: ${BUSINESS_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhpamcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhpamcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhpamcentr
          from:
            kind: ImageStreamTag
            name: ${BUSINESS_CENTRAL_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: ${{KIE_SERVER_CONTAINER_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_DATABASE
              value: ${MYSQL_DB}
            - name: RHPAM_DRIVER
              value: mariadb
            - name: RHPAM_USERNAME
              value: ${MYSQL_USER}
            - name: RHPAM_PASSWORD
              value: ${MYSQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-mysql
            - name: RHPAM_SERVICE_PORT
              value: "3306"
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_MYSQL_DIALECT}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: ws
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                cpu: ${KIE_SERVER_CPU_LIMIT}
                memory: ${KIE_SERVER_MEMORY_LIMIT}
              requests:
                cpu: ${KIE_SERVER_CPU_LIMIT}
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-mysql; replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-mysql-init
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-amq
    spec:
      podManagementPolicy: OrderedReady
      replicas: ${{AMQ_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          deploymentConfig: ${APPLICATION_NAME}-amq
      serviceName: ${APPLICATION_NAME}-amq-tcp
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${APPFORMER_JMS_BROKER_USER}
            - name: AMQ_PASSWORD
              value: ${APPFORMER_JMS_BROKER_PASSWORD}
            - name: AMQ_ROLE
              value: ${AMQ_ROLE}
            - name: AMQ_NAME
              value: ${AMQ_NAME}
            - name: AMQ_TRANSPORTS
              value: openwire
            - name: AMQ_GLOBAL_MAX_SIZE
              value: ${AMQ_GLOBAL_MAX_SIZE}
            - name: AMQ_REQUIRE_LOGIN
            - name: AMQ_DATA_DIR
              value: /opt/amq/data
            - name: AMQ_DATA_DIR_LOGGING
              value: "true"
            - name: AMQ_CLUSTERED
              value: "true"
            - name: AMQ_REPLICAS
              value: ${AMQ_REPLICAS}
            - name: AMQ_CLUSTER_USER
              value: ${APPFORMER_JMS_BROKER_USER}
            - name: AMQ_CLUSTER_PASSWORD
              value: ${APPFORMER_JMS_BROKER_PASSWORD}
            - name: AMQ_EXTRA_ARGS
            - name: AMQ_ANYCAST_PREFIX
            - name: AMQ_MULTICAST_PREFIX
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            image: ${AMQ_BROKER_IMAGE}
            imagePullPolicy: IfNotPresent
            name: broker-amq
            ports:
            - containerPort: 8161
              name: jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61616
              name: artemis
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
              failureThreshold: 3
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /opt/amq/data
              name: ${APPLICATION_NAME}-amq-pvol
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 60
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          name: ${APPLICATION_NAME}-amq-pvol
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${AMQ_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${MYSQL_USER}
            - name: MYSQL_PASSWORD
              value: ${MYSQL_PWD}
            - name: MYSQL_DATABASE
              value: ${MYSQL_DB}
            - name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
              value: mysql_native_password
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
                port: 3306
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${MYSQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamcentr-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${BUSINESS_CENTRAL_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${MYSQL_DB_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values.
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: KIE server controller token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Controller Token
    name: KIE_SERVER_CONTROLLER_TOKEN
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: MySQL database user name.
    displayName: MySQL Database User
    name: MYSQL_USER
    value: rhpam
  - description: MySQL database password.
    displayName: MySQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: MYSQL_PWD
  - description: MySQL database name.
    displayName: MySQL Database Name
    name: MYSQL_DB
    value: rhpam7
  - description: Size of persistent storage for the KIE server database volume.
    displayName: MySQL Database Volume Capacity
    name: MYSQL_DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStream for the MySQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: MySQL ImageStream Namespace
    name: MYSQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The MySQL image version, which is intended to correspond to the MySQL version. Default is "8.0".
    displayName: MySQL ImageStream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    value: "8.0"
  - description: KIE server MySQL Hibernate dialect.
    displayName: KIE Server MySQL Dialect
    name: KIE_SERVER_MYSQL_DIALECT
    required: true
    value: org.hibernate.dialect.MySQL8Dialect
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: DEVELOPMENT
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route for Business Central. Leave blank for default hostname, e.g.: insecure-<application-name>-rhpamcentr-<project>.<default-domain-suffix>'
    displayName: Business Central Custom http Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route for Business Central. Leave blank for default hostname, e.g.: <application-name>-rhpamcentr-<project>.<default-domain-suffix>'
    displayName: Business Central Custom https Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTPS
  - description: 'Custom hostname for http service route for KIE Server. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route for KIE Server. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file for Business Central.
    displayName: Business Central Server Keystore Secret Name
    name: BUSINESS_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret for Business Central.
    displayName: Business Central Server Keystore Filename
    name: BUSINESS_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate for Business Central.
    displayName: Business Central Server Certificate Name
    name: BUSINESS_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate for Business Central.
    displayName: Business Central Server Keystore Password
    name: BUSINESS_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file for KIE Server.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret for KIE Server.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate for KIE Server.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate for KIE Server.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The user name for connecting to the JMS broker.
    displayName: AppFormer JMS Broker user name.
    name: APPFORMER_JMS_BROKER_USER
    required: true
    value: jmsBrokerUser
  - description: The password to connect to the JMS broker.
    displayName: AppFormer JMS Broker password.
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: APPFORMER_JMS_BROKER_PASSWORD
    required: true
  - description: DataGrid image.
    displayName: DataGrid Image
    name: DATAGRID_IMAGE
    required: true
    value: registry.redhat.io/jboss-datagrid-7/datagrid73-openshift:1.5
  - description: DataGrid Container CPU limit.
    displayName: DataGrid Container CPU Limit
    name: DATAGRID_CPU_LIMIT
    required: true
    value: 1000m
  - description: DataGrid Container memory limit.
    displayName: DataGrid Container Memory Limit
    name: DATAGRID_MEMORY_LIMIT
    required: true
    value: 2Gi
  - description: Size of the persistent storage for DataGrid's runtime data.
    displayName: DataGrid Volume Capacity
    name: DATAGRID_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: AMQ Broker Image.
    displayName: Image
    name: AMQ_BROKER_IMAGE
    required: true
    value: registry.redhat.io/amq7/amq-broker:7.6
  - description: User role for standard broker user.
    displayName: AMQ Role
    name: AMQ_ROLE
    required: true
    value: admin
  - description: The name of the broker.
    displayName: AMQ Name
    name: AMQ_NAME
    required: true
    value: broker
  - description: Specifies the maximum amount of memory that message data can consume. If no value is specified, half of the system’s memory is allocated.
    displayName: AMQ Global Max Size
    name: AMQ_GLOBAL_MAX_SIZE
  - description: Size of persistent storage for AMQ broker volume.
    displayName: Broker Volume Capacity
    name: AMQ_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Number of broker replicas for a cluster.
    displayName: Number of Replicas
    name: AMQ_REPLICAS
    required: true
    value: "2"
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: Enables connection to KIE Server via OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "5000"
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for Business Central. Default is "rhpam-businesscentral-rhel8".
    displayName: Business Central ImageStream Name
    name: BUSINESS_CENTRAL_IMAGE_STREAM_NAME
    required: true
    value: rhpam-businesscentral-rhel8
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: Maven mirror that Business Central and KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for building and deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*,!repo-rhpamcentr
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The directory to use for git hooks, if required.
    displayName: Git hooks directory
    name: GIT_HOOKS_DIR
  - description: Sets refresh-interval for the EJB timer database data-store service.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    required: true
    value: "60000"
  - description: Size of the persistent storage for Business Central runtime data.
    displayName: Business Central Volume Capacity
    name: BUSINESS_CENTRAL_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Business Central Container memory limit.
    displayName: Business Central Container Memory Limit
    name: BUSINESS_CENTRAL_MEMORY_LIMIT
    required: true
    value: 8Gi
  - description: Business Central Container JVM max memory ratio. -Xmx is set to a ratio of the memory available on the container. The default is 80, which means the upper boundary is 80% of the available memory.  To skip adding the -Xmx option, set this value to 0.
    displayName: Business Central Container JVM Max Memory Ratio
    name: BUSINESS_CENTRAL_JAVA_MAX_MEM_RATIO
    required: true
    value: "80"
  - description: Business Central Container CPU limit.
    displayName: Business Central Container CPU Limit
    name: BUSINESS_CENTRAL_CPU_LIMIT
    required: true
    value: 2000m
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    required: true
    value: 1Gi
  - description: KIE server Container CPU limit.
    displayName: KIE Server Container CPU Limit
    name: KIE_SERVER_CPU_LIMIT
    required: true
    value: 1000m
  - description: Business Central Container Replicas, defines how many Business Central containers will be started.
    displayName: Business Central Container Replicas
    name: BUSINESS_CENTRAL_CONTAINER_REPLICAS
    required: true
    value: "2"
  - description: KIE Server Container Replicas, defines how many KIE Server containers will be started.
    displayName: KIE Server Container Replicas
    name: KIE_SERVER_CONTAINER_REPLICAS
    required: true
    value: "2"
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Business Central RH-SSO Client name.
    displayName: Business Central RH-SSO Client name
    name: BUSINESS_CENTRAL_SSO_CLIENT
  - description: Business Central RH-SSO Client Secret.
    displayName: Business Central RH-SSO Client Secret
    name: BUSINESS_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format of every entry in the file is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-kieserver-externaldb
  message: |-
    A new Process Automation Manager KIE server application have been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for a managed KIE Server with an external database, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 managed KIE Server with an external database
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,kieserver,externaldb
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_managed_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to execute Rules and Processes on Red Hat Process Automation Manager KIE server 7.8, including application deployment configuration, secure and insecure http communication, using a external database. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-kieserver-externaldb
    namespace: openshift
    resourceVersion: "15190"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-kieserver-externaldb
    uid: 5c21d130-c3a2-4449-90a8-fdfe60d842a6
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-kieserver:latest
      source:
        images:
        - from:
            kind: ImageStreamTag
            name: ${EXTENSIONS_IMAGE}
            namespace: ${EXTENSIONS_IMAGE_NAMESPACE}
          paths:
          - destinationDir: ./extensions/extras
            sourcePath: ${EXTENSIONS_INSTALL_DIR}/.
      strategy:
        sourceStrategy:
          env:
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - imageChange: {}
        type: ImageChange
      - imageChange:
          from:
            kind: ImageStreamTag
            name: ${EXTENSIONS_IMAGE}
            namespace: ${EXTENSIONS_IMAGE_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_EXTERNALDB_JNDI}
            - name: KIE_SERVER_PERSISTENCE_SCHEMA
              value: ${KIE_SERVER_PERSISTENCE_SCHEMA}
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_EXTERNALDB_DIALECT}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_EXTERNALDB_DB}
            - name: RHPAM_SERVICE_HOST
              value: ${KIE_SERVER_EXTERNALDB_SERVICE_HOST}
            - name: RHPAM_SERVICE_PORT
              value: ${KIE_SERVER_EXTERNALDB_SERVICE_PORT}
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_EXTERNALDB_JNDI}
            - name: RHPAM_DRIVER
              value: ${KIE_SERVER_EXTERNALDB_DRIVER}
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_EXTERNALDB_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_EXTERNALDB_PWD}
            - name: RHPAM_NONXA
              value: ${KIE_SERVER_EXTERNALDB_NONXA}
            - name: RHPAM_URL
              value: ${KIE_SERVER_EXTERNALDB_URL}
            - name: RHPAM_XA_CONNECTION_PROPERTY_URL
              value: ${KIE_SERVER_EXTERNALDB_URL}
            - name: RHPAM_MIN_POOL_SIZE
              value: ${KIE_SERVER_EXTERNALDB_MIN_POOL_SIZE}
            - name: RHPAM_MAX_POOL_SIZE
              value: ${KIE_SERVER_EXTERNALDB_MAX_POOL_SIZE}
            - name: RHPAM_CONNECTION_CHECKER
              value: ${KIE_SERVER_EXTERNALDB_CONNECTION_CHECKER}
            - name: RHPAM_EXCEPTION_SORTER
              value: ${KIE_SERVER_EXTERNALDB_EXCEPTION_SORTER}
            - name: RHPAM_BACKGROUND_VALIDATION
              value: ${KIE_SERVER_EXTERNALDB_BACKGROUND_VALIDATION}
            - name: RHPAM_VALIDATION_MILLIS
              value: ${KIE_SERVER_EXTERNALDB_BACKGROUND_VALIDATION_MILLIS}
            - name: RHPAM_DRIVER_TYPE
              value: ${KIE_SERVER_EXTERNALDB_DRIVER_TYPE}
            - name: RHPAM_JTA
              value: "true"
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-kieserver:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Maven mirror that the KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: Hibernate persistence schema.
    displayName: KIE Server Persistence Schema
    name: KIE_SERVER_PERSISTENCE_SCHEMA
  - description: KIE server external database Hibernate dialect.
    displayName: KIE Server External Database Dialect
    name: KIE_SERVER_EXTERNALDB_DIALECT
    required: true
  - description: Sets the datasource service host. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the KIE_SERVER_EXTERNALDB_URL parameter is set.
    displayName: Datasource Service Host
    name: KIE_SERVER_EXTERNALDB_SERVICE_HOST
  - description: Sets the datasource service port. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the KIE_SERVER_EXTERNALDB_URL parameter is set.
    displayName: Database service Port
    name: KIE_SERVER_EXTERNALDB_SERVICE_PORT
  - description: Sets the datasources type. It can be XA or NONXA. For non XA set it to true. Default value is true.
    displayName: Non XA datasource
    name: KIE_SERVER_EXTERNALDB_NONXA
  - description: Sets the datasource jdbc connection url. Note that, if you are using PostgreSQL do not use this field, use the SERVICE_HOST and PORT. If using SERVICE_PORT and HOST there is no need to fill this parameter.
    displayName: KIE Server External Database URL
    name: KIE_SERVER_EXTERNALDB_URL
  - description: The predefined driver name, available values are mysql, postgresql or the preferred name for the external driver.
    displayName: KIE Server External Database Driver
    name: KIE_SERVER_EXTERNALDB_DRIVER
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/ExampleDS.
    displayName: Database JNDI Name
    name: KIE_SERVER_EXTERNALDB_JNDI
    required: true
    value: java:jboss/datasources/jbpmDS
  - description: KIE server external database name. Leave blank if the KIE_SERVER_EXTERNALDB_URL is set.
    displayName: KIE Server External Database name
    name: KIE_SERVER_EXTERNALDB_DB
  - description: KIE server external database user name.
    displayName: KIE Server External Database User
    name: KIE_SERVER_EXTERNALDB_USER
    required: true
  - description: KIE server external database password.
    displayName: KIE Server External Database Password
    name: KIE_SERVER_EXTERNALDB_PWD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: KIE_SERVER_EXTERNALDB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: KIE_SERVER_EXTERNALDB_MAX_POOL_SIZE
  - description: An org.jboss.jca.adapters.jdbc.ValidConnectionChecker that provides a SQLException isValidConnection(Connection e) method to validate if a connection is valid.
    displayName: JDBC Connection Checker class
    name: KIE_SERVER_EXTERNALDB_CONNECTION_CHECKER
  - description: An org.jboss.jca.adapters.jdbc.ExceptionSorter that provides a boolean isExceptionFatal(SQLException e) method to validate if an exception should be broadcast to all javax.resource.spi.ConnectionEventListener as a connectionErrorOccurred.
    displayName: JDBC Exception Sorter class
    name: KIE_SERVER_EXTERNALDB_EXCEPTION_SORTER
  - description: Sets the sql validation method to background-validation, if set to false the validate-on-match method will be used.
    displayName: JDBC background validation
    name: KIE_SERVER_EXTERNALDB_BACKGROUND_VALIDATION
  - description: Defines the interval for the background-validation check for the jdbc connections.
    displayName: JDBC Background Validation Millis
    name: KIE_SERVER_EXTERNALDB_BACKGROUND_VALIDATION_MILLIS
  - description: KIE server external database driver type, applicable only for DB2, possible values are 4 (default) or 2.
    displayName: KIE Server External Database Driver Type
    name: KIE_SERVER_EXTERNALDB_DRIVER_TYPE
  - description: ImageStreamTag definition for the image containing the drivers and configuration. For example, custom-driver-image:7.8.0.
    displayName: Drivers Extension Image
    name: EXTENSIONS_IMAGE
    required: true
    value: custom-driver-extension:7.8.0
  - description: Namespace within which the ImageStream definition for the image containing the drivers and configuration is located.
    displayName: Drivers ImageStream Namespace
    name: EXTENSIONS_IMAGE_NAMESPACE
    required: true
    value: openshift
  - description: Full path to the directory within the extensions image where the extensions are located (e.g. install.sh, modules/, etc.).
    displayName: Drivers Image Install Directory
    name: EXTENSIONS_INSTALL_DIR
    required: true
    value: /extensions
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: PRODUCTION
  - description: KIE server mbeans enabled/disabled (Sets the kie.mbeans and kie.scanner.mbeans system properties).
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering (Sets the org.drools.server.filter.classes system property).
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: Sets refresh-interval for the EJB timer database data-store service.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. Sets the property org.kie.server.mgmt.api.disabled to true and org.kie.server.startup.strategy to LocalContainersStartupStrategy.
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This property defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-kieserver-mysql
  message: |-
    A new Process Automation Manager KIE server application have been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for a managed KIE Server with a MySQL database, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 managed KIE Server with a MySQL database
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,kieserver,mysql
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_managed_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to execute Rules and Processes on Red Hat Process Automation Manager KIE server 7.8, including application deployment configuration, secure and insecure http communication, using a MySQL database. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-kieserver-mysql
    namespace: openshift
    resourceVersion: "15162"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-kieserver-mysql
    uid: 8082d786-d3b0-48b9-a463-3654fea95a63
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_CONNECTION_CHECKER
              value: org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker
            - name: RHPAM_EXCEPTION_SORTER
              value: org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_MYSQL_DB}
            - name: RHPAM_DRIVER
              value: mariadb
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_MYSQL_DIALECT}
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_MYSQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_MYSQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-mysql
            - name: RHPAM_SERVICE_PORT
              value: "3306"
            - name: RHPAM_JTA
              value: "true"
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-mysql; replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-mysql-init
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
            service: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${KIE_SERVER_MYSQL_USER}
            - name: MYSQL_PASSWORD
              value: ${KIE_SERVER_MYSQL_PWD}
            - name: MYSQL_DATABASE
              value: ${KIE_SERVER_MYSQL_DB}
            - name: MYSQL_DEFAULT_AUTHENTICATION_PLUGIN
              value: mysql_native_password
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
                port: 3306
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${MYSQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Maven mirror that the KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: Namespace in which the ImageStream for the MySQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: MySQL ImageStream Namespace
    name: MYSQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The MySQL image version, which is intended to correspond to the MySQL version. Default is "8.0".
    displayName: MySQL ImageStream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    value: "8.0"
  - description: KIE server MySQL database user name.
    displayName: KIE Server MySQL Database User
    name: KIE_SERVER_MYSQL_USER
    value: rhpam
  - description: KIE server MySQL database password.
    displayName: KIE Server MySQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_MYSQL_PWD
  - description: KIE server MySQL database name.
    displayName: KIE Server MySQL Database Name
    name: KIE_SERVER_MYSQL_DB
    value: rhpam7
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: KIE server MySQL Hibernate dialect.
    displayName: KIE Server MySQL Dialect
    name: KIE_SERVER_MYSQL_DIALECT
    required: true
    value: org.hibernate.dialect.MySQL8Dialect
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: PRODUCTION
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: Sets refresh-interval for the EJB timer database data-store service.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped sets the property org.kie.server.mgmt.api.disabled to true and org.kie.server.startup.strategy to LocalContainersStartupStrategy.
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-kieserver-postgresql
  message: |-
    A new Process Automation Manager KIE server application have been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for a managed KIE Server with a PostgreSQL database, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 managed KIE Server with a PostgreSQL database
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,kieserver,postgresql
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_managed_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed to execute Rules and Processes on Red Hat Process Automation Manager KIE server 7.8, including application deployment configuration, secure and insecure http communication using a PostgreSQL database. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: rhpam78-kieserver-postgresql
    namespace: openshift
    resourceVersion: "15197"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-kieserver-postgresql
    uid: 81c10e71-69d0-4123-853c-d66d3661db22
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: RHPAM_DRIVER
              value: postgresql
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-postgresql
            - name: RHPAM_SERVICE_PORT
              value: "5432"
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_POSTGRESQL_DIALECT}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_CONNECTION_CHECKER
              value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker
            - name: RHPAM_EXCEPTION_SORTER
              value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-postgresql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-postgresql; replicas=$(oc get dc ${APPLICATION_NAME}-postgresql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-postgresql-init
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
            service: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: POSTGRESQL_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: POSTGRESQL_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Maven mirror that the KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: KIE server PostgreSQL database user name.
    displayName: KIE Server PostgreSQL Database User
    name: KIE_SERVER_POSTGRESQL_USER
    value: rhpam
  - description: KIE server PostgreSQL database password.
    displayName: KIE Server PostgreSQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_POSTGRESQL_PWD
  - description: KIE server PostgreSQL database name.
    displayName: KIE Server PostgreSQL Database Name
    name: KIE_SERVER_POSTGRESQL_DB
    value: rhpam7
  - description: Namespace in which the ImageStream for the PostgreSQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: PostgreSQL ImageStream Namespace
    name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The PostgreSQL image version, which is intended to correspond to the PostgreSQL version. Default is "10".
    displayName: PostgreSQL ImageStream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    value: "10"
  - description: Allows the PostgreSQL to handle XA transactions.
    displayName: PostgreSQL Database max prepared connections
    name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
    required: true
    value: "100"
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: KIE server PostgreSQL Hibernate dialect.
    displayName: KIE Server PostgreSQL Dialect
    name: KIE_SERVER_POSTGRESQL_DIALECT
    required: true
    value: org.hibernate.dialect.PostgreSQLDialect
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: PRODUCTION
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: Sets refresh-interval for the EJB timer database data-store service.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped sets the property org.kie.server.mgmt.api.disabled to true and org.kie.server.startup.strategy to LocalContainersStartupStrategy.
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-managed
  message: |-
    A new environment has been set up for Red Hat Process Automation Manager 7.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secrets named "${BUSINESS_CENTRAL_HTTPS_SECRET}" and "${KIE_SERVER_HTTPS_SECRET}"
    containing the ${BUSINESS_CENTRAL_HTTPS_KEYSTORE} and ${KIE_SERVER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a managed HA production runtime environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 managed production environment.
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,prod
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for a HA production runtime environment for Red Hat Process Automation Manager 7.8, including application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive to a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-managed
    namespace: openshift
    resourceVersion: "15176"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-managed
    uid: bf31f388-e178-4aef-bc1f-08a81ba6462f
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Business Central Monitoring web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports. (First KIE server)
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The first database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhpamcentrmon-http
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central Monitoring's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: insecure-${APPLICATION_NAME}-rhpamcentrmon
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhpamcentrmon-https
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central Monitoring's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for First KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for First KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      replicas: ${{BUSINESS_CENTRAL_MONITORING_CONTAINER_REPLICAS}}
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
            service: ${APPLICATION_NAME}-rhpamcentrmon
          name: ${APPLICATION_NAME}-rhpamcentrmon
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "true"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/businesscentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${BUSINESS_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${BUSINESS_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${BUSINESS_CENTRAL_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentrmon-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${BUSINESS_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${BUSINESS_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhpam-businesscentral-monitoring-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhpamcentrmon
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/businesscentral-secret-volume
              name: businesscentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhpamcentr-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 60
          volumes:
          - name: businesscentral-keystore-volume
            secret:
              secretName: ${BUSINESS_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhpamcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhpamcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhpamcentrmon
          from:
            kind: ImageStreamTag
            name: rhpam-businesscentral-monitoring-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: ${{KIE_SERVER_CONTAINER_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentrmon
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: RHPAM_DRIVER
              value: postgresql
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_POSTGRESQL_DIALECT}
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-postgresql
            - name: RHPAM_SERVICE_PORT
              value: "5432"
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-postgresql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-postgresql; replicas=$(oc get dc ${APPLICATION_NAME}-postgresql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-postgresql-init
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
            service: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: POSTGRESQL_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: POSTGRESQL_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentr-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 64Mi
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Maven mirror that the KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
    required: true
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "5000"
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server controller token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Controller Token
    name: KIE_SERVER_CONTROLLER_TOKEN
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: Namespace in which the ImageStream for the PostgreSQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: PostgreSQL ImageStream Namespace
    name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The PostgreSQL image version, which is intended to correspond to the PostgreSQL version. Default is "10".
    displayName: PostgreSQL ImageStream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    value: "10"
  - description: KIE server PostgreSQL database user name.
    displayName: KIE Server PostgreSQL Database User
    name: KIE_SERVER_POSTGRESQL_USER
    value: rhpam
  - description: KIE server PostgreSQL database password.
    displayName: KIE Server PostgreSQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_POSTGRESQL_PWD
  - description: KIE server PostgreSQL database name.
    displayName: KIE Server PostgreSQL Database Name
    name: KIE_SERVER_POSTGRESQL_DB
    value: rhpam7
  - description: Allows the PostgreSQL to handle XA transactions.
    displayName: PostgreSQL Database max prepared connections
    name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
    required: true
    value: "100"
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: KIE server PostgreSQL Hibernate dialect.
    displayName: KIE Server PostgreSQL Dialect
    name: KIE_SERVER_POSTGRESQL_DIALECT
    required: true
    value: org.hibernate.dialect.PostgreSQLDialect
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: PRODUCTION
  - description: KIE server mbeans enabled/disabled (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: insecure-<application-name>-rhpamcentrmon-<project>.<default-domain-suffix>'
    displayName: Business Central Monitoring Custom http Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-rhpamcentrmon-<project>.<default-domain-suffix>'
    displayName: Business Central Monitoring Custom https Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTPS
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file for Business Central.
    displayName: Business Central Monitoring Server Keystore Secret Name
    name: BUSINESS_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Business Central Monitoring Server Keystore Filename
    name: BUSINESS_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Business Central Monitoring Server Certificate Name
    name: BUSINESS_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Business Central Monitoring Server Keystore Password
    name: BUSINESS_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file for KIE server.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: Sets refresh-interval for the EJB timer service database-data-store.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: Business Central Monitoring Container memory limit.
    displayName: Business Central Monitoring Container Memory Limit
    name: BUSINESS_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: Business Central Monitoring Container Replicas, will define how much Business Central Monitoring containers will be started.
    displayName: Business Central Monitoring Container Replicas
    name: BUSINESS_CENTRAL_MONITORING_CONTAINER_REPLICAS
    required: true
    value: "3"
  - description: KIE Server Container Replicas, will define how much KIE Server containers will be started.
    displayName: KIE Server Container Replicas
    name: KIE_SERVER_CONTAINER_REPLICAS
    required: true
    value: "3"
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Business Central Monitoring RH-SSO Client name.
    displayName: Business Central Monitoring RH-SSO Client name
    name: BUSINESS_CENTRAL_SSO_CLIENT
  - description: Business Central Monitoring RH-SSO Client Secret.
    displayName: Business Central Monitoring RH-SSO Client Secret
    name: BUSINESS_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-prod
  message: |-
    A new environment has been set up for Red Hat Process Automation Manager 7.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secrets named "${BUSINESS_CENTRAL_HTTPS_SECRET}", "${KIE_SERVER_HTTPS_SECRET}" and
    "${KIE_SERVER_ROUTER_HTTPS_SECRET}" containing the ${BUSINESS_CENTRAL_HTTPS_KEYSTORE}, ${KIE_SERVER_HTTPS_KEYSTORE} and
    ${KIE_SERVER_ROUTER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a managed HA production runtime environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 production environment
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,prod
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for a HA production runtime environment for Red Hat Process Automation Manager 7.8, including application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: rhpam78-prod
    namespace: openshift
    resourceVersion: "15199"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-prod
    uid: 410b6501-a05e-429f-98d6-d043095a19b1
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-view
    roleRef:
      name: view
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-smartrouter-view
    roleRef:
      name: view
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Business Central Monitoring web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The smart router server http and https ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter
    spec:
      ports:
      - name: http
        port: 9000
        targetPort: 9000
      - name: https
        port: 9443
        targetPort: 9443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports. (First KIE server)
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-1
      name: ${APPLICATION_NAME}-kieserver-1
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver-1
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-1
      name: ${APPLICATION_NAME}-kieserver-1-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver-1
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports. (Second KIE server)
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-2
      name: ${APPLICATION_NAME}-kieserver-2
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver-2
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-2
      name: ${APPLICATION_NAME}-kieserver-2-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver-2
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The first database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql-1
      name: ${APPLICATION_NAME}-postgresql-1
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql-1
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The second database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql-2
      name: ${APPLICATION_NAME}-postgresql-2
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql-2
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhpamcentrmon-http
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central Monitoring's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhpamcentrmon-https
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central Monitoring's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: secure-${APPLICATION_NAME}-rhpamcentrmon
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-1-http
    kind: Route
    metadata:
      annotations:
        description: Route for First KIE server's http service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-1
      name: ${APPLICATION_NAME}-kieserver-1
    spec:
      host: ${KIE_SERVER1_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver-1
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-1-https
    kind: Route
    metadata:
      annotations:
        description: Route for First KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-1
      name: secure-${APPLICATION_NAME}-kieserver-1
    spec:
      host: ${KIE_SERVER1_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver-1
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-2-http
    kind: Route
    metadata:
      annotations:
        description: Route for Second KIE server's http service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-2
      name: ${APPLICATION_NAME}-kieserver-2
    spec:
      host: ${KIE_SERVER2_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver-2
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-2-https
    kind: Route
    metadata:
      annotations:
        description: Route for Second KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-2
      name: secure-${APPLICATION_NAME}-kieserver-2
    spec:
      host: ${KIE_SERVER2_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver-2
  - apiVersion: v1
    id: ${APPLICATION_NAME}-smartrouter-http
    kind: Route
    metadata:
      annotations:
        description: Route for Smart Router's http service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter
    spec:
      host: ${SMART_ROUTER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    id: ${APPLICATION_NAME}-smartrouter-https
    kind: Route
    metadata:
      annotations:
        description: Route for Smart Router's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: secure-${APPLICATION_NAME}-smartrouter
    spec:
      host: ${SMART_ROUTER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      replicas: ${{BUSINESS_CENTRAL_MONITORING_CONTAINER_REPLICAS}}
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
            service: ${APPLICATION_NAME}-rhpamcentrmon
          name: ${APPLICATION_NAME}-rhpamcentrmon
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/businesscentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${BUSINESS_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${BUSINESS_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${BUSINESS_CENTRAL_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentrmon-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${BUSINESS_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${BUSINESS_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhpam-businesscentral-monitoring-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhpamcentrmon
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/businesscentral-secret-volume
              name: businesscentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhpamcentr-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: businesscentral-keystore-volume
            secret:
              secretName: ${BUSINESS_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhpamcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhpamcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhpamcentrmon
          from:
            kind: ImageStreamTag
            name: rhpam-businesscentral-monitoring-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter
    spec:
      replicas: ${{SMART_ROUTER_CONTAINER_REPLICAS}}
      selector:
        deploymentConfig: ${APPLICATION_NAME}-smartrouter
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-smartrouter
            service: ${APPLICATION_NAME}-smartrouter
          name: ${APPLICATION_NAME}-smartrouter
        spec:
          containers:
          - env:
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_ROUTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KIE_SERVER_ROUTER_PORT
              value: "9000"
            - name: KIE_SERVER_ROUTER_PORT_TLS
              value: "9443"
            - name: KIE_SERVER_ROUTER_URL_EXTERNAL
              value: ${KIE_SERVER_ROUTER_URL_EXTERNAL}
            - name: KIE_SERVER_ROUTER_ID
              value: ${KIE_SERVER_ROUTER_ID}
            - name: KIE_SERVER_ROUTER_NAME
              value: ${KIE_SERVER_ROUTER_NAME}
            - name: KIE_SERVER_ROUTER_ROUTE_NAME
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_ROUTER_SERVICE
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_ROUTER_PROTOCOL
              value: ${KIE_SERVER_ROUTER_PROTOCOL}
            - name: KIE_SERVER_ROUTER_TLS_KEYSTORE_KEYALIAS
              value: ${KIE_SERVER_ROUTER_HTTPS_NAME}
            - name: KIE_SERVER_ROUTER_TLS_KEYSTORE_PASSWORD
              value: ${KIE_SERVER_ROUTER_HTTPS_PASSWORD}
            - name: KIE_SERVER_ROUTER_TLS_KEYSTORE
              value: /etc/smartrouter-secret-volume/${KIE_SERVER_ROUTER_HTTPS_KEYSTORE}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentrmon
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: http
            - name: KIE_SERVER_ROUTER_REPO
              value: /opt/rhpam-smartrouter/data
            - name: KIE_SERVER_ROUTER_CONFIG_WATCHER_ENABLED
              value: "true"
            image: rhpam-smartrouter-rhel8
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-smartrouter
            ports:
            - containerPort: 9000
              name: http
              protocol: TCP
            resources:
              limits:
                memory: ${SMART_ROUTER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /opt/rhpam-smartrouter/data
              name: ${APPLICATION_NAME}-smartrouter
            - mountPath: /etc/smartrouter-secret-volume
              name: smartrouter-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-smartrouter
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-smartrouter
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-smartrouter-claim
          - name: smartrouter-keystore-volume
            secret:
              secretName: ${KIE_SERVER_ROUTER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-smartrouter
          from:
            kind: ImageStreamTag
            name: rhpam-smartrouter-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-1
      name: ${APPLICATION_NAME}-kieserver-1
    spec:
      replicas: ${{KIE_SERVER_CONTAINER_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver-1
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver-1
            service: ${APPLICATION_NAME}-kieserver-1
          name: ${APPLICATION_NAME}-kieserver-1
        spec:
          containers:
          - env:
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentrmon
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: ws
            - name: KIE_SERVER_ID
              value: ${APPLICATION_NAME}-kieserver-1
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver-1
            - name: KIE_SERVER_USE_SECURE_ROUTE_NAME
              value: ${KIE_SERVER1_USE_SECURE_ROUTE_NAME}
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ""
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_MAVEN_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_ROUTER_SERVICE
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_ROUTER_PORT
              value: "9000"
            - name: KIE_SERVER_ROUTER_PROTOCOL
              value: ${KIE_SERVER_ROUTER_PROTOCOL}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: RHPAM_DRIVER
              value: postgresql
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_POSTGRESQL_DIALECT}
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-postgresql-1
            - name: RHPAM_SERVICE_PORT
              value: "5432"
            - name: TIMER_SERVICE_DATA_STORE
              value: ${APPLICATION_NAME}-postgresql-1
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-1-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER1_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER1_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER1_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER1_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver-1
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-postgresql-1 -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-postgresql-1; replicas=$(oc get dc ${APPLICATION_NAME}-postgresql-1 -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-postgresql-init-1
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 60
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver-1
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql-1
      name: ${APPLICATION_NAME}-postgresql-1
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql-1
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql-1
            service: ${APPLICATION_NAME}-postgresql-1
          name: ${APPLICATION_NAME}-postgresql-1
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: POSTGRESQL_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: POSTGRESQL_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql-1
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim-1
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql-1
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver-2
      name: ${APPLICATION_NAME}-kieserver-2
    spec:
      replicas: ${{KIE_SERVER_CONTAINER_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver-2
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver-2
            service: ${APPLICATION_NAME}-kieserver-2
          name: ${APPLICATION_NAME}-kieserver-2
        spec:
          containers:
          - env:
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_CONTROLLER_TOKEN}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentrmon
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: ws
            - name: KIE_SERVER_ID
              value: ${APPLICATION_NAME}-kieserver-2
            - name: KIE_SERVER_ROUTE_NAME
              value: ${APPLICATION_NAME}-kieserver-2
            - name: KIE_SERVER_USE_SECURE_ROUTE_NAME
              value: ${KIE_SERVER2_USE_SECURE_ROUTE_NAME}
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ""
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_MAVEN_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_ROUTER_SERVICE
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_ROUTER_PORT
              value: "9000"
            - name: KIE_SERVER_ROUTER_PROTOCOL
              value: ${KIE_SERVER_ROUTER_PROTOCOL}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: RHPAM_DRIVER
              value: postgresql
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_POSTGRESQL_DIALECT}
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-postgresql-2
            - name: RHPAM_SERVICE_PORT
              value: "5432"
            - name: TIMER_SERVICE_DATA_STORE
              value: ${APPLICATION_NAME}-postgresql-2
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-2-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER2_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER2_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER2_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER2_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver-2
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-postgresql-2 -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-postgresql-2; replicas=$(oc get dc ${APPLICATION_NAME}-postgresql-2 -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-postgresql-init-2
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 60
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver-2
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql-2
      name: ${APPLICATION_NAME}-postgresql-2
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql-2
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql-2
            service: ${APPLICATION_NAME}-postgresql-2
          name: ${APPLICATION_NAME}-postgresql-2
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: POSTGRESQL_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: POSTGRESQL_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql-2
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim-2
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql-2
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql-1
      name: ${APPLICATION_NAME}-postgresql-claim-1
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql-2
      name: ${APPLICATION_NAME}-postgresql-claim-2
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 64Mi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentr-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 64Mi
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Maven mirror that the KIE server must use. If you configure a mirror, this mirror must contain all artifacts that are required for deploying your services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
    required: true
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The service name for the optional Business Central, where it can be reached, to allow service lookups (for maven repo usage), if required.
    displayName: Name of the Maven service hosted by Business Central
    name: BUSINESS_CENTRAL_MAVEN_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: Custom hostname for http service route.  Leave blank for default hostname, e.g. <application-name>-smartrouter-<project>.<default-domain-suffix>'
    displayName: Smart Router Custom http Route Hostname
    name: SMART_ROUTER_HOSTNAME_HTTP
  - description: Custom hostname for https service route.  Leave blank for default hostname, e.g. secure-<application-name>-smartrouter-<project>.<default-domain-suffix>'
    displayName: Smart Router Custom https Route Hostname
    name: SMART_ROUTER_HOSTNAME_HTTPS
  - description: Router ID used when connecting to the controller. (router property org.kie.server.router.id)
    displayName: Smart Router ID
    name: KIE_SERVER_ROUTER_ID
    required: true
    value: kie-server-router
  - description: KIE server router protocol. (Used to build the org.kie.server.router.url.external property)
    displayName: Smart Router protocol
    name: KIE_SERVER_ROUTER_PROTOCOL
  - description: Public URL where the router can be found. Format http://<host>:<port>  (router property org.kie.server.router.url.external)
    displayName: Smart Router external URL
    name: KIE_SERVER_ROUTER_URL_EXTERNAL
  - description: Router name used when connecting to the controller. (router property org.kie.server.router.name)
    displayName: Smart Router name
    name: KIE_SERVER_ROUTER_NAME
    required: true
    value: KIE Server Router
  - description: KIE server controller token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Controller Token
    name: KIE_SERVER_CONTROLLER_TOKEN
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: Namespace in which the ImageStream for the PostgreSQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: PostgreSQL ImageStream Namespace
    name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The PostgreSQL image version, which is intended to correspond to the PostgreSQL version. Default is "10".
    displayName: PostgreSQL ImageStream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    value: "10"
  - description: KIE server PostgreSQL database user name.
    displayName: KIE Server PostgreSQL Database User
    name: KIE_SERVER_POSTGRESQL_USER
    value: rhpam
  - description: KIE server PostgreSQL database password.
    displayName: KIE Server PostgreSQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_POSTGRESQL_PWD
  - description: KIE server PostgreSQL database name.
    displayName: KIE Server PostgreSQL Database Name
    name: KIE_SERVER_POSTGRESQL_DB
    value: rhpam7
  - description: Allows the PostgreSQL to handle XA transactions.
    displayName: PostgreSQL Database max prepared connections
    name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
    required: true
    value: "100"
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: KIE server PostgreSQL Hibernate dialect.
    displayName: KIE Server PostgreSQL Dialect
    name: KIE_SERVER_POSTGRESQL_DIALECT
    required: true
    value: org.hibernate.dialect.PostgreSQLDialect
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: PRODUCTION
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>-rhpamcentrmon-<project>.<default-domain-suffix>'
    displayName: Business Central Monitoring Custom http Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-rhpamcentrmon-<project>.<default-domain-suffix>'
    displayName: Business Central Monitoring Custom https Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTPS
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server 1 Custom http Route Hostname
    name: KIE_SERVER1_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server 1 Custom https Route Hostname
    name: KIE_SERVER1_HOSTNAME_HTTPS
  - description: If true, the KIE server will use secure-<application-name>-kieserver vs. <application-name>-kieserver as the KIE server route endpoint for Business Central to report. Therefore, Business Central displays the secure link to the user.
    displayName: Use the secure route name to link application requests to KIE_SERVER1_HOSTNAME_HTTPS vs KIE_SERVER1_HOSTNAME_HTTP.
    name: KIE_SERVER1_USE_SECURE_ROUTE_NAME
    value: "false"
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server 2 Custom http Route Hostname
    name: KIE_SERVER2_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server 2 Custom https Route Hostname
    name: KIE_SERVER2_HOSTNAME_HTTPS
  - description: If true, will use secure-APPLICATION_NAME-kieserver-2 vs. APPLICATION_NAME-kieserver-2 as the route name.
    displayName: Use the secure route name to link application requests to KIE_SERVER2_HOSTNAME_HTTPS vs KIE_SERVER2_HOSTNAME_HTTP.
    name: KIE_SERVER2_USE_SECURE_ROUTE_NAME
    value: "false"
  - description: The name of the secret containing the keystore file for Business Central.
    displayName: Business Central Monitoring Server Keystore Secret Name
    name: BUSINESS_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Business Central Monitoring Server Keystore Filename
    name: BUSINESS_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Business Central Monitoring Server Certificate Name
    name: BUSINESS_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Business Central Monitoring Server Keystore Password
    name: BUSINESS_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file for Smart Router.
    displayName: Smart Router Keystore Secret Name
    name: KIE_SERVER_ROUTER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Smart Router Keystore Filename
    name: KIE_SERVER_ROUTER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Smart Router Certificate Name
    name: KIE_SERVER_ROUTER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Smart Router Keystore Password
    name: KIE_SERVER_ROUTER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: The name of the secret containing the keystore file for KIE Server.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: Sets refresh-interval for the EJB timer service database-data-store.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: Business Central Monitoring Container memory limit.
    displayName: Business Central Monitoring Container Memory Limit
    name: BUSINESS_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: Smart Router Container memory limit
    displayName: Smart Router Container Memory Limit
    name: SMART_ROUTER_MEMORY_LIMIT
    value: 512Mi
  - description: Business Central Monitoring Container Replicas, defines how many Business Central Monitoring containers will be started.
    displayName: Business Central Monitoring Container Replicas
    name: BUSINESS_CENTRAL_MONITORING_CONTAINER_REPLICAS
    required: true
    value: "3"
  - description: Smart Router Container Replicas, defines how many smart router containers will be started.
    displayName: Smart Router Container Replicas
    name: SMART_ROUTER_CONTAINER_REPLICAS
    required: true
    value: "2"
  - description: KIE Server Container Replicas, defines how many KIE Server containers will be started.
    displayName: KIE Server Container Replicas
    name: KIE_SERVER_CONTAINER_REPLICAS
    required: true
    value: "3"
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Business Central Monitoring RH-SSO Client name.
    displayName: Business Central Monitoring RH-SSO Client name
    name: BUSINESS_CENTRAL_SSO_CLIENT
  - description: Business Central Monitoring RH-SSO Client Secret.
    displayName: Business Central Monitoring RH-SSO Client Secret
    name: BUSINESS_CENTRAL_SSO_SECRET
  - description: KIE Server 1 RH-SSO Client name.
    displayName: KIE Server 1 RH-SSO Client name
    name: KIE_SERVER1_SSO_CLIENT
  - description: KIE Server 1 RH-SSO Client Secret.
    displayName: KIE Server 1 RH-SSO Client Secret
    name: KIE_SERVER1_SSO_SECRET
  - description: KIE Server 2 RH-SSO Client name.
    displayName: KIE Server 2 RH-SSO Client name
    name: KIE_SERVER2_SSO_CLIENT
  - description: KIE Server 2 RH-SSO Client Secret.
    displayName: KIE Server 2 RH-SSO Client Secret
    name: KIE_SERVER2_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-prod-immutable-kieserver
  message: |-
    A new immutable Red Hat Process Automation Manager KIE server have been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for an immutable KIE server in a production environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 immutable production environment
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,kieserver,immutable,s2i
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_immutable_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for a immutable production runtime environment for Red Hat Process Automation Manager 7.8, including a source-to-image (S2I) build of your services, application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive to a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: rhpam78-prod-immutable-kieserver
    namespace: openshift
    resourceVersion: "15198"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-prod-immutable-kieserver
    uid: 310cab82-c964-46da-8e53-ea3365d0c001
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-kieserver:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_SERVER_CONTAINER_DEPLOYMENT
            value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: DEVELOPMENT
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_ROUTER_SERVICE
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_MIRROR_URL
              value: ${MAVEN_MIRROR_URL}
            - name: MAVEN_MIRROR_OF
              value: ${MAVEN_MIRROR_OF}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_DRIVER
              value: postgresql
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: ${KIE_SERVER_POSTGRESQL_DIALECT}
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-postgresql
            - name: RHPAM_SERVICE_PORT
              value: "5432"
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${APPLICATION_NAME}-kieserver
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          initContainers:
          - command:
            - /bin/bash
            - -c
            - replicas=$(oc get dc ${APPLICATION_NAME}-postgresql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-postgresql; replicas=$(oc get dc ${APPLICATION_NAME}-postgresql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            image: registry.redhat.io/openshift3/ose-cli
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}-postgresql-init
            terminationMessagePolicy: FallbackToLogsOnError
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}-kieserver
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
            service: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: POSTGRESQL_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: POSTGRESQL_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server persistence datasource. (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: Namespace in which the ImageStream for the PostgreSQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: PostgreSQL ImageStream Namespace
    name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The PostgreSQL image version, which is intended to correspond to the PostgreSQL version. Default is "10".
    displayName: PostgreSQL ImageStream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    value: "10"
  - description: KIE server PostgreSQL database user name.
    displayName: KIE Server PostgreSQL Database User
    name: KIE_SERVER_POSTGRESQL_USER
    value: rhpam
  - description: KIE server PostgreSQL database password.
    displayName: KIE Server PostgreSQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_POSTGRESQL_PWD
  - description: KIE server PostgreSQL database name.
    displayName: KIE Server PostgreSQL Database Name
    name: KIE_SERVER_POSTGRESQL_DB
    value: rhpam7
  - description: Allows the PostgreSQL to handle XA transactions.
    displayName: PostgreSQL Database max prepared connections
    name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
    required: true
    value: "100"
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: KIE server PostgreSQL Hibernate dialect.
    displayName: KIE Server PostgreSQL Dialect
    name: KIE_SERVER_POSTGRESQL_DIALECT
    required: true
    value: org.hibernate.dialect.PostgreSQLDialect
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE server bypass auth user.
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
    required: true
  - description: Git source URI for application.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
  - description: Git branch/tag reference.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: GitHub trigger secret.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Maven mirror to use for S2I builds. If enabled, the mirror must contain all the artifacts necessary for building and running the required services.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Maven mirror configuration for KIE server.
    displayName: Maven mirror of
    name: MAVEN_MIRROR_OF
    value: external:*
  - description: 'The id to use for the maven repository. If set, it can be excluded from the optionally configured mirror by adding it to MAVEN_MIRROR_OF. For example: external:*,!repo-rhpamcentr,!repo-custom. If MAVEN_MIRROR_URL is set but MAVEN_MIRROR_ID is not set, an id will be generated randomly, but won''t be usable in MAVEN_MIRROR_OF.'
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder
    name: ARTIFACT_DIR
  - description: Sets refresh-interval for the EJB timer service database-data-store.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. (Sets the property org.kie.server.mgmt.api.disabled to true)
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
    required: true
    value: "true"
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-prod-immutable-kieserver-amq
  message: |-
    A new immutable Red Hat Process Automation Manager KIE server have been created in your project.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_HTTPS_SECRET}" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.
  metadata:
    annotations:
      description: Application template for an immutable KIE server in a production environment integrated with ActiveMQ, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 immutable production environment with ActiveMQ
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,kieserver,immutable,s2i,amq
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_immutable_server_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for a immutable production runtime environment for Red Hat Process Automation Manager 7.8, including a source-to-image (S2I) build of your services, application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive to a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: rhpam78-prod-immutable-kieserver-amq
    namespace: openshift
    resourceVersion: "15223"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-prod-immutable-kieserver-amq
    uid: 8b7bfe8d-9114-47d9-a842-a0ac5fa9474d
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-kieserver-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's console and Jolokia port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-jolokia
    spec:
      ports:
      - name: amq-jolokia
        port: 8161
        targetPort: 8161
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-amqp
    spec:
      ports:
      - name: amq-amqp
        port: 5672
        targetPort: 5672
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's AMQP SSL port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-amqp-ssl
    spec:
      ports:
      - name: amq-amqp-ssl
        port: 5671
        targetPort: 5671
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-mqtt
    spec:
      ports:
      - name: amq-mqtt
        port: 1883
        targetPort: 1883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's MQTT SSL port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-mqtt-ssl
    spec:
      ports:
      - name: amq-mqtt-ssl
        port: 8883
        targetPort: 8883
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-stomp
    spec:
      ports:
      - name: amq-stomp
        port: 61613
        targetPort: 61613
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's STOMP SSL port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-stomp-ssl
    spec:
      ports:
      - name: amq-stomp-ssl
        port: 61612
        targetPort: 61612
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-tcp
    spec:
      ports:
      - name: amq-tcp
        port: 61616
        targetPort: 61616
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The broker's OpenWire (SSL) port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp-ssl", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq-tcp-ssl
    spec:
      ports:
      - name: amq-tcp-ssl
        port: 61617
        targetPort: 61617
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-kieserver-https
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    id: ${APPLICATION_NAME}-amq-jolokia-console
    kind: Route
    metadata:
      annotations:
        description: Route for AMQ Jolokia Service
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: amq-jolokia-console
    spec:
      tls:
        termination: passthrough
      to:
        kind: Service
        name: ${APPLICATION_NAME}-amq-jolokia
  - apiVersion: v1
    id: ${APPLICATION_NAME}-amq-tcp-ssl
    kind: Route
    metadata:
      annotations:
        description: Route for AMQ tcp-ssl Service
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: amq-tcp-ssl-external
    spec:
      tls:
        termination: passthrough
      to:
        kind: Service
        name: ${APPLICATION_NAME}-amq-tcp-ssl
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-kieserver:latest
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${SOURCE_REPOSITORY_REF}
          uri: ${SOURCE_REPOSITORY_URL}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: KIE_SERVER_CONTAINER_DEPLOYMENT
            value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_MODE
              value: DEVELOPMENT
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_ROUTER_SERVICE
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_PERSISTENCE_DS
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: DATASOURCES
              value: RHPAM
            - name: RHPAM_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: RHPAM_JNDI
              value: ${KIE_SERVER_PERSISTENCE_DS}
            - name: RHPAM_JTA
              value: "true"
            - name: RHPAM_DRIVER
              value: postgresql
            - name: KIE_SERVER_PERSISTENCE_DIALECT
              value: org.hibernate.dialect.PostgreSQLDialect
            - name: RHPAM_USERNAME
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: RHPAM_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: RHPAM_SERVICE_HOST
              value: ${APPLICATION_NAME}-postgresql
            - name: RHPAM_SERVICE_PORT
              value: "5432"
            - name: TIMER_SERVICE_DATA_STORE
              value: ${APPLICATION_NAME}-postgresql
            - name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
              value: ${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}
            - name: KIE_SERVER_EXECUTOR_JMS
              value: ${KIE_SERVER_EXECUTOR_JMS}
            - name: KIE_SERVER_EXECUTOR_JMS_TRANSACTED
              value: ${KIE_SERVER_EXECUTOR_JMS_TRANSACTED}
            - name: KIE_SERVER_JMS_QUEUE_REQUEST
              value: ${KIE_SERVER_JMS_QUEUE_REQUEST}
            - name: KIE_SERVER_JMS_QUEUE_RESPONSE
              value: ${KIE_SERVER_JMS_QUEUE_RESPONSE}
            - name: KIE_SERVER_JMS_QUEUE_EXECUTOR
              value: ${KIE_SERVER_JMS_QUEUE_EXECUTOR}
            - name: KIE_SERVER_JMS_ENABLE_SIGNAL
              value: ${KIE_SERVER_JMS_ENABLE_SIGNAL}
            - name: KIE_SERVER_JMS_QUEUE_SIGNAL
              value: ${KIE_SERVER_JMS_QUEUE_SIGNAL}
            - name: KIE_SERVER_JMS_ENABLE_AUDIT
              value: ${KIE_SERVER_JMS_ENABLE_AUDIT}
            - name: KIE_SERVER_JMS_QUEUE_AUDIT
              value: ${KIE_SERVER_JMS_QUEUE_AUDIT}
            - name: KIE_SERVER_JMS_AUDIT_TRANSACTED
              value: ${KIE_SERVER_JMS_AUDIT_TRANSACTED}
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-amq7=AMQ
            - name: AMQ_USERNAME
              value: ${AMQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${AMQ_PASSWORD}
            - name: AMQ_PROTOCOL
              value: tcp
            - name: AMQ_QUEUES
              value: ${AMQ_QUEUES}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/kieserver-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${KIE_SERVER_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${KIE_SERVER_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${KIE_SERVER_HTTPS_PASSWORD}
            - name: KIE_SERVER_MGMT_DISABLED
              value: ${KIE_SERVER_MGMT_DISABLED}
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-kieserver-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${KIE_SERVER_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: ${APPLICATION_NAME}-kieserver
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/kieserver-secret-volume
              name: kieserver-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-kieserver
          terminationGracePeriodSeconds: 90
          volumes:
          - name: kieserver-keystore-volume
            secret:
              secretName: ${KIE_SERVER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStream
            name: ${APPLICATION_NAME}-kieserver
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
            service: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${KIE_SERVER_POSTGRESQL_USER}
            - name: POSTGRESQL_PASSWORD
              value: ${KIE_SERVER_POSTGRESQL_PWD}
            - name: POSTGRESQL_DATABASE
              value: ${KIE_SERVER_POSTGRESQL_DB}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-amq
      name: ${APPLICATION_NAME}-amq
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-amq
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-amq
            service: ${APPLICATION_NAME}-amq
          name: ${APPLICATION_NAME}-amq
        spec:
          containers:
          - env:
            - name: AMQ_USER
              value: ${AMQ_USERNAME}
            - name: AMQ_PASSWORD
              value: ${AMQ_PASSWORD}
            - name: AMQ_ROLE
              value: ${AMQ_ROLE}
            - name: AMQ_NAME
              value: ${APPLICATION_NAME}-broker
            - name: AMQ_TRANSPORTS
              value: ${AMQ_PROTOCOL}
            - name: AMQ_QUEUES
              value: ${AMQ_QUEUES}
            - name: AMQ_GLOBAL_MAX_SIZE
              value: ${AMQ_GLOBAL_MAX_SIZE}
            - name: AMQ_REQUIRE_LOGIN
              value: "true"
            - name: AMQ_ANYCAST_PREFIX
            - name: AMQ_MULTICAST_PREFIX
            - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
              value: /etc/amq-secret-volume
            - name: AMQ_TRUSTSTORE
              value: ${AMQ_TRUSTSTORE}
            - name: AMQ_TRUSTSTORE_PASSWORD
              value: ${AMQ_TRUSTSTORE_PASSWORD}
            - name: AMQ_KEYSTORE
              value: ${AMQ_KEYSTORE}
            - name: AMQ_KEYSTORE_PASSWORD
              value: ${AMQ_KEYSTORE_PASSWORD}
            image: ${AMQ_BROKER_IMAGESTREAM_NAME}
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-amq
            ports:
            - containerPort: 8161
              name: console-jolokia
              protocol: TCP
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqp-ssl
              protocol: TCP
            - containerPort: 1883
              name: mqtt
              protocol: TCP
            - containerPort: 8883
              name: mqtt-ssl
              protocol: TCP
            - containerPort: 61613
              name: stomp
              protocol: TCP
            - containerPort: 61612
              name: stomp-ssl
              protocol: TCP
            - containerPort: 61616
              name: artemis
              protocol: TCP
            - containerPort: 61617
              name: amq-tcp-ssl
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/amq/bin/readinessProbe.sh
            volumeMounts:
            - mountPath: /etc/amq-secret-volume
              name: broker-secret-volume
              readOnly: true
          terminationGracePeriodSeconds: 60
          volumes:
          - name: broker-secret-volume
            secret:
              secretName: ${AMQ_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-amq
          from:
            kind: ImageStreamTag
            name: ${AMQ_BROKER_IMAGESTREAM_NAME}
            namespace: ${AMQ_IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-postgresql
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: KIE server persistence datasource (Sets the org.kie.server.persistence.ds system property)
    displayName: KIE Server Persistence DS
    name: KIE_SERVER_PERSISTENCE_DS
    value: java:/jboss/datasources/rhpam
  - description: Namespace in which the ImageStream for the PostgreSQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: PostgreSQL ImageStream Namespace
    name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
    value: openshift
  - description: The PostgreSQL image version, which is intended to correspond to the PostgreSQL version. Default is "10".
    displayName: PostgreSQL ImageStream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    value: "10"
  - description: KIE server PostgreSQL database user name
    displayName: KIE Server PostgreSQL Database User
    name: KIE_SERVER_POSTGRESQL_USER
    value: rhpam
  - description: KIE server PostgreSQL database password
    displayName: KIE Server PostgreSQL Database Password
    from: '[a-zA-Z]{6}[0-9]{1}!'
    generate: expression
    name: KIE_SERVER_POSTGRESQL_PWD
  - description: KIE server PostgreSQL database name
    displayName: KIE Server PostgreSQL Database Name
    name: KIE_SERVER_POSTGRESQL_DB
    value: rhpam7
  - description: Allows the PostgreSQL to handle XA transactions.
    displayName: PostgreSQL Database max prepared connections
    name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
    required: true
    value: "100"
  - description: Size of persistent storage for the database volume.
    displayName: Database Volume Capacity
    name: DB_VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: KIE server mbeans enabled/disabled (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route.  Leave blank for default hostname, e.g.: <application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom https Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file
    displayName: KIE Server Keystore Secret Name
    name: KIE_SERVER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret
    displayName: KIE Server Keystore Filename
    name: KIE_SERVER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate
    displayName: KIE Server Certificate Name
    name: KIE_SERVER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate
    displayName: KIE Server Keystore Password
    name: KIE_SERVER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Allows the KIE server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
    required: true
  - description: Git source URI for application
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
  - description: Git branch/tag reference
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: GitHub trigger secret
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Maven mirror to use for S2I builds
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: The id to use for the maven repository, if set. Default is generated randomly.
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
  - description: Fully qualified URL to a Maven repository.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied.
    displayName: List of directories from which archives will be copied into the deployment folder
    name: ARTIFACT_DIR
  - description: Sets refresh-interval for the EJB timer service database-data-store.
    displayName: Timer service data store refresh interval (in milliseconds)
    name: TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL
    value: "30000"
  - description: KIE server Container memory limit
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. (Sets the property org.kie.server.mgmt.api.disabled to true)
    displayName: Disable KIE Server Management
    name: KIE_SERVER_MGMT_DISABLED
    required: true
    value: "true"
  - description: Enables the JMS executor, set false to disable it.
    displayName: KIE Server JMS Executor
    name: KIE_SERVER_EXECUTOR_JMS
    value: "true"
  - description: Enable transactions for JMS executor, disabled by default
    displayName: KIE Server Transacted Executor
    name: KIE_SERVER_EXECUTOR_JMS_TRANSACTED
    value: "false"
  - description: JNDI name of request queue for JMS. The default value is queue/KIE.SERVER.REQUEST
    displayName: KIE Server JMS Request Queue
    name: KIE_SERVER_JMS_QUEUE_REQUEST
  - description: JNDI name of response queue for JMS. The default value is queue/KIE.SERVER.RESPONSE
    displayName: KIE Server JMS Response Queue
    name: KIE_SERVER_JMS_QUEUE_RESPONSE
  - description: JNDI name of response queue for JMS. The default value is queue/KIE.SERVER.RESPONSE
    displayName: KIE Server JMS Executor Queue
    name: KIE_SERVER_JMS_QUEUE_EXECUTOR
  - description: Enable the Signal configuration through JMS
    displayName: Enable KIE Server JMS Signal Queue
    name: KIE_SERVER_JMS_ENABLE_SIGNAL
    value: "true"
  - description: JMS queue for signals
    displayName: KIE Server JMS Signal Queue
    name: KIE_SERVER_JMS_QUEUE_SIGNAL
  - description: Enable the Audit logging through JMS
    displayName: Enable KIE Server JMS Audit
    name: KIE_SERVER_JMS_ENABLE_AUDIT
    value: "true"
  - description: JMS queue for audit logging
    displayName: KIE Server JMS Audit Queue
    name: KIE_SERVER_JMS_QUEUE_AUDIT
  - description: determines if JMS session is transacted or not - default true.
    displayName: KIE Server JMS Audit logger transacted
    name: KIE_SERVER_JMS_AUDIT_TRANSACTED
  - description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: AMQ Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: AMQ_USERNAME
  - description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
    displayName: AMQ Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: AMQ_PASSWORD
  - description: User role for standard broker user.
    displayName: AMQ Role
    name: AMQ_ROLE
    required: true
    value: admin
  - description: Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. These are the default queues needed by KIE Server. If using custom Queues, use the same values here as in the KIE_SERVER_JMS_QUEUE_RESPONSE, KIE_SERVER_JMS_QUEUE_REQUEST, KIE_SERVER_JMS_QUEUE_SIGNAL, KIE_SERVER_JMS_QUEUE_AUDIT  and KIE_SERVER_JMS_QUEUE_EXECUTOR parameters.
    displayName: AMQ Queues
    name: AMQ_QUEUES
    value: queue/KIE.SERVER.REQUEST,queue/KIE.SERVER.RESPONSE,queue/KIE.SERVER.EXECUTOR,queue/KIE.SERVER.SIGNAL,queue/KIE.SERVER.AUDIT
  - description: Specifies the maximum amount of memory that message data can consume. If no value is specified, half of the system’s memory is allocated.
    displayName: AMQ Global Max Size
    name: AMQ_GLOBAL_MAX_SIZE
  - description: The name of a secret containing AMQ SSL related files.
    displayName: AMQ Secret Name
    name: AMQ_SECRET
    required: true
  - description: The name of the AMQ SSL Trust Store file.
    displayName: AMQ TRUSTSTORE
    name: AMQ_TRUSTSTORE
  - description: The password for the AMQ Trust Store.
    displayName: AMQ TRUSTSTORE PASSWORD
    name: AMQ_TRUSTSTORE_PASSWORD
  - description: The name of the AMQ keystore file.
    displayName: AMQ KEYSTORE
    name: AMQ_KEYSTORE
  - description: The password for the AMQ keystore and certificate.
    displayName: AMQ KEYSTORE PASSWORD
    name: AMQ_KEYSTORE_PASSWORD
  - description: 'Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.'
    displayName: AMQ Protocols
    name: AMQ_PROTOCOL
    value: openwire
  - description: AMQ Broker Image
    displayName: AMQ Broker Image
    name: AMQ_BROKER_IMAGESTREAM_NAME
    required: true
    value: amq-broker:7.6
  - description: Namespace in which the ImageStreams for Red Hat AMQ images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: AMQ ImageStream Namespace
    name: AMQ_IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO URL
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: KIE Server RH-SSO Client name
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This property defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-prod-immutable-monitor
  message: |-
    A new environment has been set up for Red Hat Process Automation Manager 7.
    The username/password needed for accessing the application are stored in "${CREDENTIALS_SECRET}" secret as
    KIE_ADMIN_USER and KIE_ADMIN_PWD

    To create a new KIE server and connect to this monitoring console/router, use the following "oc" command:
    oc new-app -f rhpam78-prod-immutable-kieserver.yaml \
      -p CREDENTIALS_SECRET=${CREDENTIALS_SECRET} \
      -p KIE_SERVER_MONITOR_SERVICE=${APPLICATION_NAME}-rhpamcentrmon \
      -p KIE_SERVER_ROUTER_SERVICE=${APPLICATION_NAME}-smartrouter \
      -p SOURCE_REPOSITORY_URL=https://example.com/xxxx.git -p CONTEXT_DIR=rootDir \
      -p KIE_SERVER_CONTAINER_DEPLOYMENT=containerId=G:A:V

    You must create the secret named "${CREDENTIALS_SECRET}" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named "${KIE_SERVER_ROUTER_HTTPS_SECRET}" containing the ${BUSINESS_CENTRAL_HTTPS_KEYSTORE} and ${KIE_SERVER_ROUTER_HTTPS_KEYSTORE} files used for serving secure content.
  metadata:
    annotations:
      description: Application template for a router and monitoring console in a production environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 production monitoring environment
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,immutable,s2i,monitor
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for a router and monitoring console in a production environment for Red Hat Process Automation Manager 7.8, including application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive to a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-prod-immutable-monitor
    namespace: openshift
    resourceVersion: "15161"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-prod-immutable-monitor
    uid: f204281c-6a59-4889-b275-e3cc8bb6b01a
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-smartrouter-view
    roleRef:
      name: view
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Business Central Monitoring web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      - name: https
        port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
        targetPort: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The smart router server http and https ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter
    spec:
      ports:
      - name: http
        port: 9000
        targetPort: 9000
      - name: https
        port: 9443
        targetPort: 9443
      selector:
        deploymentConfig: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhpamcentrmon-http
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central Monitoring's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: insecure-${APPLICATION_NAME}-rhpamcentrmon
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    id: ${APPLICATION_NAME}-rhpamcentrmon-https
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central Monitoring's https service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-rhpamcentrmon
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-smartrouter-http
    kind: Route
    metadata:
      annotations:
        description: Route for Smart Router's http service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: insecure-${APPLICATION_NAME}-smartrouter
    spec:
      host: ${SMART_ROUTER_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    id: ${APPLICATION_NAME}-smartrouter-https
    kind: Route
    metadata:
      annotations:
        description: Route for Smart Router's https service.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter
    spec:
      host: ${SMART_ROUTER_HOSTNAME_HTTPS}
      port:
        targetPort: https
      tls:
        termination: passthrough
      to:
        name: ${APPLICATION_NAME}-smartrouter
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentrmon
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhpamcentrmon
            service: ${APPLICATION_NAME}-rhpamcentrmon
          name: ${APPLICATION_NAME}-rhpamcentrmon
        spec:
          containers:
          - env:
            - name: APPLICATION_USERS_PROPERTIES
              value: /opt/kie/data/configuration/application-users.properties
            - name: APPLICATION_ROLES_PROPERTIES
              value: /opt/kie/data/configuration/application-roles.properties
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${BUSINESS_CENTRAL_SERVICE}
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "true"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_MONITOR_TOKEN}
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/businesscentral-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${BUSINESS_CENTRAL_HTTPS_KEYSTORE}
            - name: HTTPS_NAME
              value: ${BUSINESS_CENTRAL_HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${BUSINESS_CENTRAL_HTTPS_PASSWORD}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentrmon-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${BUSINESS_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${BUSINESS_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
            - name: HOSTNAME_HTTPS
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTPS}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhpam-businesscentral-monitoring-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhpamcentrmon
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/businesscentral-secret-volume
              name: businesscentral-keystore-volume
              readOnly: true
            - mountPath: /opt/kie/data
              name: ${APPLICATION_NAME}-rhpamcentr-pvol
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 60
          volumes:
          - name: businesscentral-keystore-volume
            secret:
              secretName: ${BUSINESS_CENTRAL_HTTPS_SECRET}
          - name: ${APPLICATION_NAME}-rhpamcentr-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-rhpamcentr-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhpamcentrmon
          from:
            kind: ImageStreamTag
            name: rhpam-businesscentral-monitoring-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter
    spec:
      replicas: 2
      selector:
        deploymentConfig: ${APPLICATION_NAME}-smartrouter
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-smartrouter
            service: ${APPLICATION_NAME}-smartrouter
          name: ${APPLICATION_NAME}-smartrouter
        spec:
          containers:
          - env:
            - name: KIE_SERVER_ROUTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KIE_SERVER_ROUTER_PORT
              value: "9000"
            - name: KIE_SERVER_ROUTER_PORT_TLS
              value: "9443"
            - name: KIE_SERVER_ROUTER_URL_EXTERNAL
              value: ${KIE_SERVER_ROUTER_URL_EXTERNAL}
            - name: KIE_SERVER_ROUTER_ID
              value: ${KIE_SERVER_ROUTER_ID}
            - name: KIE_SERVER_ROUTER_NAME
              value: ${KIE_SERVER_ROUTER_NAME}
            - name: KIE_SERVER_ROUTER_ROUTE_NAME
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_ROUTER_SERVICE
              value: ${APPLICATION_NAME}-smartrouter
            - name: KIE_SERVER_ROUTER_PROTOCOL
              value: ${KIE_SERVER_ROUTER_PROTOCOL}
            - name: KIE_SERVER_ROUTER_TLS_KEYSTORE_KEYALIAS
              value: ${KIE_SERVER_ROUTER_HTTPS_NAME}
            - name: KIE_SERVER_ROUTER_TLS_KEYSTORE_PASSWORD
              value: ${KIE_SERVER_ROUTER_HTTPS_PASSWORD}
            - name: KIE_SERVER_ROUTER_TLS_KEYSTORE
              value: /etc/smartrouter-secret-volume/${KIE_SERVER_ROUTER_HTTPS_KEYSTORE}
            - name: KIE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_USER
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  key: KIE_ADMIN_PWD
                  name: ${CREDENTIALS_SECRET}
            - name: KIE_SERVER_CONTROLLER_TOKEN
              value: ${KIE_SERVER_MONITOR_TOKEN}
            - name: KIE_SERVER_CONTROLLER_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentrmon
            - name: KIE_SERVER_CONTROLLER_PROTOCOL
              value: http
            - name: KIE_SERVER_ROUTER_REPO
              value: /opt/rhpam-smartrouter/data
            - name: KIE_SERVER_ROUTER_CONFIG_WATCHER_ENABLED
              value: "true"
            image: rhpam-smartrouter-rhel8
            imagePullPolicy: Always
            name: ${APPLICATION_NAME}-smartrouter
            ports:
            - containerPort: 9000
              name: http
              protocol: TCP
            resources:
              limits:
                memory: ${SMART_ROUTER_MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /opt/rhpam-smartrouter/data
              name: ${APPLICATION_NAME}-smartrouter
            - mountPath: /etc/smartrouter-secret-volume
              name: smartrouter-keystore-volume
              readOnly: true
          serviceAccountName: ${APPLICATION_NAME}-smartrouter
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-smartrouter
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-smartrouter-claim
          - name: smartrouter-keystore-volume
            secret:
              secretName: ${KIE_SERVER_ROUTER_HTTPS_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-smartrouter
          from:
            kind: ImageStreamTag
            name: rhpam-smartrouter-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-smartrouter
      name: ${APPLICATION_NAME}-smartrouter-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 64Mi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentrmon
      name: ${APPLICATION_NAME}-rhpamcentr-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 64Mi
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: The id to use for the maven repository, if set. Default is generated randomly.
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required.
    displayName: Name of the Business Central service
    name: BUSINESS_CENTRAL_SERVICE
  - description: Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values
    displayName: Credentials secret
    name: CREDENTIALS_SECRET
    required: true
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "5000"
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    value: 7.8.0
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: insecure-<application-name>-smartrouter-<project>.<default-domain-suffix>'
    displayName: Smart Router Custom http Route Hostname
    name: SMART_ROUTER_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>-smartrouter-<project>.<default-domain-suffix>'
    displayName: Smart Router Custom https Route Hostname
    name: SMART_ROUTER_HOSTNAME_HTTPS
  - description: Router ID used in API communication. (Router property org.kie.server.router.id)
    displayName: Smart Router ID
    name: KIE_SERVER_ROUTER_ID
    required: true
    value: kie-server-router
  - description: KIE server router protocol. (Used to build the org.kie.server.router.url.external property)
    displayName: Smart Router protocol
    name: KIE_SERVER_ROUTER_PROTOCOL
  - description: Public URL where the router can be found. Format http://<host>:<port> (Router property org.kie.server.router.url.external)
    displayName: Smart Router external URL
    name: KIE_SERVER_ROUTER_URL_EXTERNAL
  - description: Router name used in the Business Central user interface. (Router property org.kie.server.router.name)
    displayName: Smart Router name
    name: KIE_SERVER_ROUTER_NAME
    required: true
    value: KIE Server Router
  - description: The name of the secret containing the keystore file.
    displayName: Smart Router Keystore Secret Name
    name: KIE_SERVER_ROUTER_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Smart Router Keystore Filename
    name: KIE_SERVER_ROUTER_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Smart Router Certificate Name
    name: KIE_SERVER_ROUTER_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Smart Router Keystore Password
    name: KIE_SERVER_ROUTER_HTTPS_PASSWORD
    value: mykeystorepass
  - description: KIE server monitor token for bearer authentication. (Sets the org.kie.server.controller.token system property)
    displayName: KIE Server Monitor Token
    name: KIE_SERVER_MONITOR_TOKEN
  - description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: insecure-<application-name>-rhpamcentrmon-<project>.<default-domain-suffix>'
    displayName: Business Central Custom http Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>-rhpamcentrmon-<project>.<default-domain-suffix>'
    displayName: Business Central Custom https Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file.
    displayName: Business Central Server Keystore Secret Name
    name: BUSINESS_CENTRAL_HTTPS_SECRET
    required: true
  - description: The name of the keystore file within the secret.
    displayName: Business Central Server Keystore Filename
    name: BUSINESS_CENTRAL_HTTPS_KEYSTORE
    value: keystore.jks
  - description: The name associated with the server certificate.
    displayName: Business Central Server Certificate Name
    name: BUSINESS_CENTRAL_HTTPS_NAME
    value: jboss
  - description: The password for the keystore and certificate.
    displayName: Business Central Server Keystore Password
    name: BUSINESS_CENTRAL_HTTPS_PASSWORD
    value: mykeystorepass
  - description: Business Central Container memory limit.
    displayName: Business Central Container Memory Limit
    name: BUSINESS_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: Smart Router Container memory limit.
    displayName: Smart Router Container Memory Limit
    name: SMART_ROUTER_MEMORY_LIMIT
    value: 512Mi
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Business Central Monitoring RH-SSO Client name.
    displayName: Business Central Monitoring RH-SSO Client name
    name: BUSINESS_CENTRAL_SSO_CLIENT
  - description: Business Central Monitoring RH-SSO Client Secret.
    displayName: Business Central Monitoring RH-SSO Client Secret
    name: BUSINESS_CENTRAL_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhpam: "7.8"
    template: rhpam78-trial-ephemeral
  message: |-
    A new Process Automation Manager trial environment has been created.
    The user name/password for accessing the Business Central interface and calls to the KIE server is

        User name: ${KIE_ADMIN_USER}
        Password: ${DEFAULT_PASSWORD}

    Please remember that this is an ephemeral environment and any work will be LOST with a simple pod restart.
  metadata:
    annotations:
      description: Application template for an ephemeral authoring and testing environment, for Red Hat Process Automation Manager 7.8 - Deprecated
      iconClass: icon-jboss
      openshift.io/display-name: Red Hat Process Automation Manager 7.8 ephemeral trial environment
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: rhpam,processserver,jboss,trial
      template.openshift.io/bindable: "false"
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.8/html/deploying_a_red_hat_process_automation_manager_7.8_authoring_environment_on_red_hat_openshift_container_platform/
      template.openshift.io/long-description: This template defines resources needed for an ephemeral authoring and testing environment for Red Hat Process Automation Manager 7.8, including application deployment configuration, secure and insecure http communication. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.
      template.openshift.io/support-url: https://access.redhat.com
      version: "7.8"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhpam: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/bindable: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: rhpam78-trial-ephemeral
    namespace: openshift
    resourceVersion: "15114"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-trial-ephemeral
    uid: fc3b0e0c-16ad-4698-8496-3d32813c9cd4
  objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-rhpamsvc-edit
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-rhpamsvc
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the Business Central web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      ports:
      - name: http
        port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: All the KIE server web server's ports.
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 3600
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-rhpamcentr-http
    kind: Route
    metadata:
      annotations:
        description: Route for Business Central's http service.
        haproxy.router.openshift.io/timeout: 1h
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: insecure-${APPLICATION_NAME}-rhpamcentr
    spec:
      host: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
      port:
        targetPort: http
      to:
        name: ${APPLICATION_NAME}-rhpamcentr
  - apiVersion: v1
    id: insecure-${APPLICATION_NAME}-kieserver-http
    kind: Route
    metadata:
      annotations:
        description: Route for KIE server's http service.
        haproxy.router.openshift.io/balance: source
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
      name: insecure-${APPLICATION_NAME}-kieserver
    spec:
      host: ${KIE_SERVER_HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}-kieserver
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-rhpamcentr
      name: ${APPLICATION_NAME}-rhpamcentr
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-rhpamcentr
            service: ${APPLICATION_NAME}-rhpamcentr
          name: ${APPLICATION_NAME}-rhpamcentr
        spec:
          containers:
          - env:
            - name: WORKBENCH_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-rhpamcentr
            - name: KIE_ADMIN_USER
              value: ${KIE_ADMIN_USER}
            - name: KIE_ADMIN_PWD
              value: ${DEFAULT_PASSWORD}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_ENABLED
              value: "true"
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED}
            - name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
              value: ${KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE}
            - name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
              value: ${KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL}
            - name: MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: GIT_HOOKS_DIR
              value: ${GIT_HOOKS_DIR}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${BUSINESS_CENTRAL_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${BUSINESS_CENTRAL_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${BUSINESS_CENTRAL_HOSTNAME_HTTP}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            image: rhpam-businesscentral-rhel8
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /rest/healthy
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-rhpamcentr
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /rest/ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${BUSINESS_CENTRAL_MEMORY_LIMIT}
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 60
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-rhpamcentr
          from:
            kind: ImageStreamTag
            name: rhpam-businesscentral-rhel8:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        application: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}-kieserver
        services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
      name: ${APPLICATION_NAME}-kieserver
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${APPLICATION_NAME}-kieserver
      strategy:
        rollingParams:
          maxSurge: 100%
          maxUnavailable: 0
        type: Rolling
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-kieserver
            service: ${APPLICATION_NAME}-kieserver
            services.server.kie.org/kie-server-id: ${APPLICATION_NAME}-kieserver
          name: ${APPLICATION_NAME}-kieserver
        spec:
          containers:
          - env:
            - name: WORKBENCH_SERVICE_NAME
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: KIE_ADMIN_USER
              value: ${KIE_ADMIN_USER}
            - name: KIE_ADMIN_PWD
              value: ${DEFAULT_PASSWORD}
            - name: KIE_SERVER_MODE
              value: ${KIE_SERVER_MODE}
            - name: KIE_MBEANS
              value: ${KIE_MBEANS}
            - name: DROOLS_SERVER_FILTER_CLASSES
              value: ${DROOLS_SERVER_FILTER_CLASSES}
            - name: PROMETHEUS_SERVER_EXT_DISABLED
              value: ${PROMETHEUS_SERVER_EXT_DISABLED}
            - name: KIE_SERVER_BYPASS_AUTH_USER
              value: ${KIE_SERVER_BYPASS_AUTH_USER}
            - name: KIE_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['services.server.kie.org/kie-server-id']
            - name: KIE_SERVER_ROUTE_NAME
              value: insecure-${APPLICATION_NAME}-kieserver
            - name: KIE_SERVER_STARTUP_STRATEGY
              value: OpenShiftStartupStrategy
            - name: KIE_SERVER_CONTAINER_DEPLOYMENT
              value: ${KIE_SERVER_CONTAINER_DEPLOYMENT}
            - name: MAVEN_REPOS
              value: RHPAMCENTR,EXTERNAL
            - name: RHPAMCENTR_MAVEN_REPO_ID
              value: repo-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_SERVICE
              value: ${APPLICATION_NAME}-rhpamcentr
            - name: RHPAMCENTR_MAVEN_REPO_PATH
              value: /maven2/
            - name: RHPAMCENTR_MAVEN_REPO_USERNAME
              value: ${KIE_ADMIN_USER}
            - name: RHPAMCENTR_MAVEN_REPO_PASSWORD
              value: ${DEFAULT_PASSWORD}
            - name: EXTERNAL_MAVEN_REPO_ID
              value: ${MAVEN_REPO_ID}
            - name: EXTERNAL_MAVEN_REPO_URL
              value: ${MAVEN_REPO_URL}
            - name: EXTERNAL_MAVEN_REPO_USERNAME
              value: ${MAVEN_REPO_USERNAME}
            - name: EXTERNAL_MAVEN_REPO_PASSWORD
              value: ${MAVEN_REPO_PASSWORD}
            - name: SSO_URL
              value: ${SSO_URL}
            - name: SSO_OPENIDCONNECT_DEPLOYMENTS
              value: ROOT.war
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SECRET
              value: ${KIE_SERVER_SSO_SECRET}
            - name: SSO_CLIENT
              value: ${KIE_SERVER_SSO_CLIENT}
            - name: SSO_USERNAME
              value: ${SSO_USERNAME}
            - name: SSO_PASSWORD
              value: ${SSO_PASSWORD}
            - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
              value: ${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}
            - name: SSO_PRINCIPAL_ATTRIBUTE
              value: ${SSO_PRINCIPAL_ATTRIBUTE}
            - name: HOSTNAME_HTTP
              value: ${KIE_SERVER_HOSTNAME_HTTP}
            - name: AUTH_LDAP_URL
              value: ${AUTH_LDAP_URL}
            - name: AUTH_LDAP_BIND_DN
              value: ${AUTH_LDAP_BIND_DN}
            - name: AUTH_LDAP_BIND_CREDENTIAL
              value: ${AUTH_LDAP_BIND_CREDENTIAL}
            - name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
              value: ${AUTH_LDAP_JAAS_SECURITY_DOMAIN}
            - name: AUTH_LDAP_BASE_CTX_DN
              value: ${AUTH_LDAP_BASE_CTX_DN}
            - name: AUTH_LDAP_BASE_FILTER
              value: ${AUTH_LDAP_BASE_FILTER}
            - name: AUTH_LDAP_SEARCH_SCOPE
              value: ${AUTH_LDAP_SEARCH_SCOPE}
            - name: AUTH_LDAP_SEARCH_TIME_LIMIT
              value: ${AUTH_LDAP_SEARCH_TIME_LIMIT}
            - name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
              value: ${AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE}
            - name: AUTH_LDAP_PARSE_USERNAME
              value: ${AUTH_LDAP_PARSE_USERNAME}
            - name: AUTH_LDAP_USERNAME_BEGIN_STRING
              value: ${AUTH_LDAP_USERNAME_BEGIN_STRING}
            - name: AUTH_LDAP_USERNAME_END_STRING
              value: ${AUTH_LDAP_USERNAME_END_STRING}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_ID}
            - name: AUTH_LDAP_ROLES_CTX_DN
              value: ${AUTH_LDAP_ROLES_CTX_DN}
            - name: AUTH_LDAP_ROLE_FILTER
              value: ${AUTH_LDAP_ROLE_FILTER}
            - name: AUTH_LDAP_ROLE_RECURSION
              value: ${AUTH_LDAP_ROLE_RECURSION}
            - name: AUTH_LDAP_DEFAULT_ROLE
              value: ${AUTH_LDAP_DEFAULT_ROLE}
            - name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
              value: ${AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID}
            - name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
              value: ${AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN}
            - name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
              value: ${AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN}
            - name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
              value: ${AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK}
            - name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
              value: ${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}
            - name: AUTH_ROLE_MAPPER_REPLACE_ROLE
              value: ${AUTH_ROLE_MAPPER_REPLACE_ROLE}
            - name: FILTERS
              value: AC_ALLOW_ORIGIN,AC_ALLOW_METHODS,AC_ALLOW_HEADERS,AC_ALLOW_CREDENTIALS,AC_MAX_AGE
            - name: AC_ALLOW_ORIGIN_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Origin
            - name: AC_ALLOW_ORIGIN_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_ORIGIN}
            - name: AC_ALLOW_METHODS_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Methods
            - name: AC_ALLOW_METHODS_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_METHODS}
            - name: AC_ALLOW_HEADERS_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Headers
            - name: AC_ALLOW_HEADERS_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_HEADERS}
            - name: AC_ALLOW_CREDENTIALS_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Allow-Credentials
            - name: AC_ALLOW_CREDENTIALS_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_ALLOW_CREDENTIALS}
            - name: AC_MAX_AGE_FILTER_RESPONSE_HEADER_NAME
              value: Access-Control-Max-Age
            - name: AC_MAX_AGE_FILTER_RESPONSE_HEADER_VALUE
              value: ${KIE_SERVER_ACCESS_CONTROL_MAX_AGE}
            image: ${KIE_SERVER_IMAGE_STREAM_NAME}
            imagePullPolicy: Always
            lifecycle:
              postStart:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - /opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /services/rest/server/healthcheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 15
              timeoutSeconds: 2
            name: ${APPLICATION_NAME}-kieserver
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            readinessProbe:
              failureThreshold: 36
              httpGet:
                path: /services/rest/server/readycheck
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 5
              timeoutSeconds: 2
            resources:
              limits:
                memory: ${KIE_SERVER_MEMORY_LIMIT}
          serviceAccountName: ${APPLICATION_NAME}-rhpamsvc
          terminationGracePeriodSeconds: 90
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-kieserver
          from:
            kind: ImageStreamTag
            name: ${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: myapp
  - description: Default password used for multiple components for user convenience in this trial environment.
    displayName: Default Password
    name: DEFAULT_PASSWORD
    required: true
    value: RedHat
  - description: KIE administrator user name.
    displayName: KIE Admin User
    name: KIE_ADMIN_USER
    value: adminUser
  - description: Allows the KIE server to bypass the authenticated user for task-related operations e.g. queries. (Sets the org.kie.server.bypass.auth.user system property)
    displayName: KIE Server Bypass Auth User
    name: KIE_SERVER_BYPASS_AUTH_USER
    value: "false"
  - description: The KIE Server mode. Valid values are 'DEVELOPMENT' or 'PRODUCTION'. In production mode, you can not deploy SNAPSHOT versions of artifacts on the KIE server and can not change the version of an artifact in an existing container. (Sets the org.kie.server.mode system property).
    displayName: KIE Server Mode
    name: KIE_SERVER_MODE
    value: DEVELOPMENT
  - description: KIE server mbeans enabled/disabled. (Sets the kie.mbeans and kie.scanner.mbeans system properties)
    displayName: KIE MBeans
    name: KIE_MBEANS
    value: enabled
  - description: KIE server class filtering. (Sets the org.drools.server.filter.classes system property)
    displayName: Drools Server Filter Classes
    name: DROOLS_SERVER_FILTER_CLASSES
    value: "true"
  - description: If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)
    displayName: Prometheus Server Extension Disabled
    name: PROMETHEUS_SERVER_EXT_DISABLED
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-<application-name>-kieserver-<project>.<default-domain-suffix>'
    displayName: KIE Server Custom http Route Hostname
    name: KIE_SERVER_HOSTNAME_HTTP
  - description: Sets the Access-Control-Allow-Origin response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Origin response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_ORIGIN
    value: '*'
  - description: Sets the Access-Control-Allow-Methods response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Methods response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_METHODS
    value: GET, POST, OPTIONS, PUT
  - description: Sets the Access-Control-Allow-Headers response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Headers response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_HEADERS
    value: Accept, Authorization, Content-Type, X-Requested-With
  - description: Sets the Access-Control-Allow-Credentials response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Allow-Credentials response header
    name: KIE_SERVER_ACCESS_CONTROL_ALLOW_CREDENTIALS
    value: "true"
  - description: Sets the Access-Control-Max-Age response header value in the KIE Server (useful for CORS support).
    displayName: KIE Server Access-Control-Max-Age response header
    name: KIE_SERVER_ACCESS_CONTROL_MAX_AGE
    value: "1"
  - description: 'Custom hostname for http service route for Business Central. Leave blank for default hostname, e.g.: insecure-<application-name>-rhpamcentr-<project>.<default-domain-suffix>'
    displayName: Business Central Custom http Route Hostname
    name: BUSINESS_CENTRAL_HOSTNAME_HTTP
  - description: If set to true, turns on KIE server global discovery feature (Sets the org.kie.server.controller.openshift.global.discovery.enabled system property)
    displayName: Enable KIE server global discovery
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_GLOBAL_DISCOVERY_ENABLED
    value: "false"
  - description: If OpenShift integration of Business Central is turned on, setting this parameter to true enables connection to KIE Server via an OpenShift internal Service endpoint. (Sets the org.kie.server.controller.openshift.prefer.kieserver.service system property)
    displayName: Prefer KIE Server OpenShift Service
    name: KIE_SERVER_CONTROLLER_OPENSHIFT_PREFER_KIESERVER_SERVICE
    value: "true"
  - description: KIE ServerTemplate Cache TTL in milliseconds. (Sets the org.kie.server.controller.template.cache.ttl system property)
    displayName: KIE ServerTemplate Cache TTL
    name: KIE_SERVER_CONTROLLER_TEMPLATE_CACHE_TTL
    value: "5000"
  - description: Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is "openshift".
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The name of the image stream to use for KIE server. Default is "rhpam-kieserver-rhel8".
    displayName: KIE Server ImageStream Name
    name: KIE_SERVER_IMAGE_STREAM_NAME
    required: true
    value: rhpam-kieserver-rhel8
  - description: A named pointer to an image in an image stream. Default is "7.8.0".
    displayName: ImageStream Tag
    name: IMAGE_STREAM_TAG
    required: true
    value: 7.8.0
  - description: 'KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2'
    displayName: KIE Server Container Deployment
    name: KIE_SERVER_CONTAINER_DEPLOYMENT
  - description: The id to use for the maven repository, if set. Default is generated randomly.
    displayName: Maven repository ID
    name: MAVEN_REPO_ID
    value: repo-custom
  - description: Fully qualified URL to a Maven repository or service.
    displayName: Maven repository URL
    name: MAVEN_REPO_URL
  - description: User name for accessing the Maven repository, if required.
    displayName: Maven repository user name
    name: MAVEN_REPO_USERNAME
  - description: Password to access the Maven repository, if required.
    displayName: Maven repository password
    name: MAVEN_REPO_PASSWORD
  - description: The directory to use for git hooks, if required.
    displayName: Git hooks directory
    name: GIT_HOOKS_DIR
  - description: Business Central Container memory limit.
    displayName: Business Central Container Memory Limit
    name: BUSINESS_CENTRAL_MEMORY_LIMIT
    value: 2Gi
  - description: KIE server Container memory limit.
    displayName: KIE Server Container Memory Limit
    name: KIE_SERVER_MEMORY_LIMIT
    value: 1Gi
  - description: RH-SSO URL.
    displayName: RH-SSO URL
    name: SSO_URL
  - description: RH-SSO Realm name.
    displayName: RH-SSO Realm name
    name: SSO_REALM
  - description: Business Central RH-SSO Client name.
    displayName: Business Central RH-SSO Client name
    name: BUSINESS_CENTRAL_SSO_CLIENT
  - description: Business Central RH-SSO Client Secret.
    displayName: Business Central RH-SSO Client Secret
    name: BUSINESS_CENTRAL_SSO_SECRET
  - description: KIE Server RH-SSO Client name.
    displayName: KIE Server RH-SSO Client name
    name: KIE_SERVER_SSO_CLIENT
  - description: KIE Server RH-SSO Client Secret.
    displayName: KIE Server RH-SSO Client Secret
    name: KIE_SERVER_SSO_SECRET
  - description: RH-SSO Realm admin user name for creating the Client if it doesn't exist.
    displayName: RH-SSO Realm admin user name
    name: SSO_USERNAME
  - description: RH-SSO Realm Admin Password used to create the Client.
    displayName: RH-SSO Realm Admin Password
    name: SSO_PASSWORD
  - description: RH-SSO Disable SSL Certificate Validation.
    displayName: RH-SSO Disable SSL Certificate Validation
    name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
    value: "false"
  - description: RH-SSO Principal Attribute to use as user name.
    displayName: RH-SSO Principal Attribute
    name: SSO_PRINCIPAL_ATTRIBUTE
    value: preferred_username
  - description: LDAP Endpoint to connect for authentication.
    displayName: LDAP Endpoint
    name: AUTH_LDAP_URL
  - description: Bind DN used for authentication.
    displayName: LDAP Bind DN
    name: AUTH_LDAP_BIND_DN
  - description: LDAP Credentials used for authentication.
    displayName: LDAP Bind Credentials
    name: AUTH_LDAP_BIND_CREDENTIAL
  - description: The JMX ObjectName of the JaasSecurityDomain used to decrypt the password.
    displayName: LDAP JAAS Security Domain
    name: AUTH_LDAP_JAAS_SECURITY_DOMAIN
  - description: LDAP Base DN of the top-level context to begin the user search.
    displayName: LDAP Base DN
    name: AUTH_LDAP_BASE_CTX_DN
  - description: LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0}).
    displayName: LDAP Base Search filter
    name: AUTH_LDAP_BASE_FILTER
  - description: The search scope to use.
    displayName: LDAP Search scope
    name: AUTH_LDAP_SEARCH_SCOPE
  - description: The timeout in milliseconds for user or role searches.
    displayName: LDAP Search time limit
    name: AUTH_LDAP_SEARCH_TIME_LIMIT
  - description: The name of the attribute in the user entry that contains the DN of the user. This may be necessary if the DN of the user itself contains special characters, backslash for example, that prevent correct user mapping. If the attribute does not exist, the entry’s DN is used.
    displayName: LDAP DN attribute
    name: AUTH_LDAP_DISTINGUISHED_NAME_ATTRIBUTE
  - description: A flag indicating if the DN is to be parsed for the user name. If set to true, the DN is parsed for the user name. If set to false the DN is not parsed for the user name. This option is used together with usernameBeginString and usernameEndString.
    displayName: LDAP Parse username
    name: AUTH_LDAP_PARSE_USERNAME
  - description: Defines the String which is to be removed from the start of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username begin string
    name: AUTH_LDAP_USERNAME_BEGIN_STRING
  - description: Defines the String which is to be removed from the end of the DN to reveal the user name. This option is used together with usernameEndString and only taken into account if parseUsername is set to true.
    displayName: LDAP Username end string
    name: AUTH_LDAP_USERNAME_END_STRING
  - description: Name of the attribute containing the user roles.
    displayName: LDAP Role attributeID
    name: AUTH_LDAP_ROLE_ATTRIBUTE_ID
  - description: The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is.
    displayName: LDAP Roles Search DN
    name: AUTH_LDAP_ROLES_CTX_DN
  - description: A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1}).
    displayName: LDAP Role search filter
    name: AUTH_LDAP_ROLE_FILTER
  - description: The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0.
    displayName: LDAP Role recursion
    name: AUTH_LDAP_ROLE_RECURSION
  - description: A role included for all authenticated users.
    displayName: LDAP Default role
    name: AUTH_LDAP_DEFAULT_ROLE
  - description: Name of the attribute within the roleCtxDN context which contains the role name. If the roleAttributeIsDN property is set to true, this property is used to find the role object’s name attribute.
    displayName: LDAP Role name attribute ID
    name: AUTH_LDAP_ROLE_NAME_ATTRIBUTE_ID
  - description: A flag indicating if the DN returned by a query contains the roleNameAttributeID. If set to true, the DN is checked for the roleNameAttributeID. If set to false, the DN is not checked for the roleNameAttributeID. This flag can improve the performance of LDAP queries.
    displayName: LDAP Role DN contains roleNameAttributeID
    name: AUTH_LDAP_PARSE_ROLE_NAME_FROM_DN
  - description: Whether or not the roleAttributeID contains the fully-qualified DN of a role object. If false, the role name is taken from the value of the roleNameAttributeId attribute of the context name. Certain directory schemas, such as Microsoft Active Directory, require this attribute to be set to true.
    displayName: LDAP Role Attribute ID is DN
    name: AUTH_LDAP_ROLE_ATTRIBUTE_IS_DN
  - description: If you are not using referrals, you can ignore this option. When using referrals, this option denotes the attribute name which contains users defined for a certain role, for example member, if the role object is inside the referral. Users are checked against the content of this attribute name. If this option is not set, the check will always fail, so role objects cannot be stored in a referral tree.
    displayName: LDAP Referral user attribute ID
    name: AUTH_LDAP_REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK
  - description: When present, the RoleMapping Login Module will be configured to use the provided file. This parameter defines the fully-qualified file path and name of a properties file or resource which maps roles to replacement roles. The format is original_role=role1,role2,role3
    displayName: RoleMapping rolesProperties file path
    name: AUTH_ROLE_MAPPER_ROLES_PROPERTIES
  - description: Whether to add to the current roles, or replace the current roles with the mapped ones. Replaces if set to true.
    displayName: RoleMapping replaceRole property
    name: AUTH_ROLE_MAPPER_REPLACE_ROLE
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse77-spring-boot-camel
  metadata:
    annotations:
      description: Spring Boot and Camel QuickStart. This example demonstrates how you can use Apache Camel with Spring Boot on OpenShift. The quickstart uses Spring Boot to configure an application which includes a Camel route that triggers a message every 5th second, and routes the message to a log.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.7 Camel with Spring Boot
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.7"
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: s2i-fuse77-spring-boot-camel
    namespace: openshift
    resourceVersion: "15168"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/s2i-fuse77-spring-boot-camel
    uid: 5dcc1a22-088d-4667-8213-5c330017f820
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-java-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse77-spring-boot-camel
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-1.0.0.fuse-770010-redhat-00004
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.7"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 1.0.0.fuse-770010-redhat-00004
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Dfabric8.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse77-spring-boot-camel-rest-3scale
  metadata:
    annotations:
      description: Spring Boot, Camel REST DSL and 3Scale QuickStart. This example demonstrates how to use Camel's REST DSL to expose a RESTful API and expose it to 3scale.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.7 Camel REST DSL and 3Scale
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,java,springboot,fis,jboss-fuse,3scale
      version: "1.7"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: s2i-fuse77-spring-boot-camel-rest-3scale
    namespace: openshift
    resourceVersion: "15211"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/s2i-fuse77-spring-boot-camel-rest-3scale
    uid: 1fa01817-9f85-4bd8-84a9-e2e2e4ea3c65
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9411
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-java-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8080
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse77-spring-boot-camel-rest-3scale
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-rest-3scale.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-rest-3scale-1.0.0.fuse-770010-redhat-00003
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: camel-rest-3scale
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.7"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 1.0.0.fuse-770010-redhat-00003
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Dfabric8.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse77-spring-boot-camel-xml
  metadata:
    annotations:
      description: Spring Boot and Camel Xml QuickStart. This example demonstrates how you can use Apache Camel with Spring Boot on OpenShift. The quickstart uses Spring Boot to configure an application which includes a Camel route (in Spring xml) that triggers a message every 5th second, and routes the message to a log.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.7 Camel XML DSL with Spring Boot
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.7"
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:template: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: s2i-fuse77-spring-boot-camel-xml
    namespace: openshift
    resourceVersion: "15212"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/s2i-fuse77-spring-boot-camel-xml
    uid: d4a3a1f1-3af7-49b3-a6ec-fdd20f5b4390
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-java-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse77-spring-boot-camel-xml
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-xml.git
  - description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-xml-1.0.0.fuse-770010-redhat-00003
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.7"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 1.0.0.fuse-770010-redhat-00003
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Dfabric8.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rh-sso: 7.2-v1.4.0
    template: sso72-https
  message: 'A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example RH-SSO 7 application. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.2 (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.2 server based deployment, securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: rh-sso-7.2-v1.4.0
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rh-sso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso72-https
    namespace: openshift
    resourceVersion: "15155"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-https
    uid: fb1d5d2f-44af-4de2-a2c0-8029fc8c49a5
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rh-sso: 7.2-v1.4.0
    template: sso72-mysql
  message: 'A new RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example RH-SSO 7 application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.2 + MySQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration for MySQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: rh-sso-7.2-v1.4.0
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rh-sso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: sso72-mysql
    namespace: openshift
    resourceVersion: "15200"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-mysql
    uid: a5534730-5fd1-4da5-953c-9401dbf4f074
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rh-sso: 7.2-v1.4.0
    template: sso72-mysql-persistent
  message: 'A new persistent RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example RH-SSO 7 application with a MySQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.2 + MySQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration for MySQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: rh-sso-7.2-v1.4.0
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rh-sso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso72-mysql-persistent
    namespace: openshift
    resourceVersion: "15140"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-mysql-persistent
    uid: 39bcf598-5c7e-4288-b81d-cfcf066e404e
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rh-sso: 7.2-v1.4.0
    template: sso72-postgresql
  message: 'A new RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example RH-SSO 7 application with a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.2 + PostgreSQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration for PostgreSQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: rh-sso-7.2-v1.4.0
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rh-sso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: sso72-postgresql
    namespace: openshift
    resourceVersion: "15224"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-postgresql
    uid: 896936b0-df8a-4c36-b933-483fea0a1906
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rh-sso: 7.2-v1.4.0
    template: sso72-postgresql-persistent
  message: 'A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example RH-SSO 7 application with a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.2 + PostgreSQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: rh-sso-7.2-v1.4.0
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rh-sso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: sso72-postgresql-persistent
    namespace: openshift
    resourceVersion: "15108"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-postgresql-persistent
    uid: 01d93da3-ad65-40e0-abe8-3edb47f51943
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-https
  message: 'A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-https
    namespace: openshift
    resourceVersion: "15128"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-https
    uid: b1bb3530-977d-4a0b-89e5-05187ddbb62a
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-mysql
  message: 'A new RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + MySQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for MySQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-mysql
    namespace: openshift
    resourceVersion: "15131"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-mysql
    uid: 8829ea1b-bfa3-4f76-b14d-f8ac37808146
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-mysql-persistent
  message: 'A new persistent RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + MySQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for MySQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-mysql-persistent
    namespace: openshift
    resourceVersion: "15174"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-mysql-persistent
    uid: d80d85c0-7939-49db-b35e-c6ceb3b2c4b8
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 3306
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-ocp4-x509-https
  message: A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 (Ephemeral)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-ocp4-x509-https
    namespace: openshift
    resourceVersion: "15133"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-https
    uid: 6bdd6f7b-ab9c-4653-8321-f0852f49c376
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server admininistrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-ocp4-x509-mysql-persistent
  message: A new persistent RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + MySQL (Persistent)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for MySQL using persistence, and securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-ocp4-x509-mysql-persistent
    namespace: openshift
    resourceVersion: "15141"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-mysql-persistent
    uid: 0e1a99aa-d7d6-4b73-97df-539c3b4eda25
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 3306
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH_SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service.  This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-ocp4-x509-postgresql-persistent
  message: A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + PostgreSQL (Persistent)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-ocp4-x509-postgresql-persistent
    namespace: openshift
    resourceVersion: "15191"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-postgresql-persistent
    uid: a7e3772c-7f51-425e-a868-69f485246b60
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-postgresql
  message: 'A new RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + PostgreSQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for PostgreSQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: sso73-postgresql
    namespace: openshift
    resourceVersion: "15109"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-postgresql
    uid: 85fd12f3-8c1c-4e76-9d0c-bf0a18065798
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-postgresql-persistent
  message: 'A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + PostgreSQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso73-postgresql-persistent
    namespace: openshift
    resourceVersion: "15192"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-postgresql-persistent
    uid: 5ce8a591-cca0-4ffc-a15a-e82f793f8c94
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-https
  message: 'A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso74-https
    namespace: openshift
    resourceVersion: "15146"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-https
    uid: 73bd60ea-06a5-48e1-b64d-2e70f66e1af6
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-ocp4-x509-https
  message: A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK (Ephemeral)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2022-02-15T15:50:14Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:14Z"
    name: sso74-ocp4-x509-https
    namespace: openshift
    resourceVersion: "15214"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-ocp4-x509-https
    uid: 5515fd8f-6568-4fb6-9ac9-436e838a8dab
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server admininistrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-ocp4-x509-postgresql-persistent
  message: A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK + PostgreSQL (Persistent)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso74-ocp4-x509-postgresql-persistent
    namespace: openshift
    resourceVersion: "15121"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-ocp4-x509-postgresql-persistent
    uid: d4dc8810-c71c-43fe-b950-9aca0368e1bc
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-postgresql
  message: 'A new RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK + PostgreSQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, deployment configuration for PostgreSQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2022-02-15T15:50:12Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:12Z"
    name: sso74-postgresql
    namespace: openshift
    resourceVersion: "15110"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-postgresql
    uid: 84b63a3e-8644-4bc6-92e2-670244790fb5
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-postgresql-persistent
  message: 'A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK + PostgreSQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.52
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2022-02-15T15:50:13Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2022-02-15T15:50:13Z"
    name: sso74-postgresql-persistent
    namespace: openshift
    resourceVersion: "15153"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-postgresql-persistent
    uid: e23b6631-706f-4e70-b4fa-9f1c31d02349
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
